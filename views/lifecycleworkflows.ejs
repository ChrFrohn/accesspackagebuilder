<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link rel="icon" href="/images/favicon.png" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github-dark.min.css"
    />
    <script src="/javascripts/userprofile.js"></script>
    <script
      data-name="BMC-Widget"
      data-cfasync="false"
      src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js"
      data-id="nicowyss"
      data-description="Support me on Buy me a coffee!"
      data-color="#347DFE"
      data-position="Right"
      data-x_margin="18"
      data-y_margin="18"
    ></script>
    <title>Access Package Builder - Lifecycle Workflows</title>
  </head>
  <body>
    <div class="container">
      <!-- Sidebar -->
      <%- include('partials/navbar') %> <!-- Include navbar partial -->
      <!-- Main Content -->
      <main class="content">
        <header>
          <h1>Lifecycle Workflows Integration</h1>
          <h3>Integrate lifecycle workflows into your environment!</h3>
        </header>
        <section>
          <h1>Workflow: Assign On-Premise Groups</h1>
          <p>
            Unfortunately, there is only the option of equipping Access Packages
            with cloud groups, but this is often not enough. Therefore,
            synchronized groups can also be managed via a "Custom Task
            Extension".
          </p>
          <img
            src="/images/architecture.gif"
            alt="Loading animation"
            style="
              display: block;
              margin-left: auto;
              margin-right: auto;
              width: auto;
              height: 500px;
            "
          />
          <p>
            Architecture and detailed instructions
            <a
              href="https://cloudfil.ch/lifecycle-workflow-custom-task-extension-for-assigning-on-premise-groups-to-users/"
              target="_blank"
              >Lifecycle Workflow Custom Task Extension for Assigning On-Premise
              Groups to Users</a
            >
            can be found on my Blog Page.
          </p>

          <section id="workflow1">
            <h1>Powershell Runbook</h1>
            <p>
              In particular, I would like to discuss here how the runbook can
              interact with the access-packages.json files which can be created
              in a previous step.
            </p>
            <pre
              style="height: 200px"
            ><code id="powershell-code" class="powershell"></code></pre>
            <p><strong>Input File Format</strong></p>
            <pre
              style="height: 200px"
            ><code id="json-code" class="json"></code></pre>
            <p><strong>Output Log</strong></p>
            <pre
              style="height: 200px"
            ><code id="log-code" class="plaintext"></code></pre>
            <p>
              The log file now clearly shows which groups were assigned to the
              user and which were skipped. Depending on the status code, it is
              reported back whether the job was successful or not. For a closer
              look I recommend my Blog Post about it.
            </p>
          </section>
        </section>
      </main>
    </div>
    <!-- Highlight.js JS -->
    <script
      type="text/javascript"
      charset="utf8"
      src="https://code.jquery.com/jquery-3.5.1.min.js"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/powershell.min.js"></script>
    <script>
      // Function to fetch and display file content
      function loadFile(filePath, elementId, language) {
        fetch(filePath)
          .then((response) => response.text())
          .then((content) => {
            let codeBlock = document.getElementById(elementId);
            codeBlock.textContent = content; // Insert raw text
            codeBlock.classList.add(language); // Ensure highlight.js knows the language
            hljs.highlightElement(codeBlock); // Highlight syntax
          })
          .catch((error) => console.error("Error loading file:", error));
      }

      // Load JSON file and Log file dynamically
      loadFile(
        "/helper/Assign-OnPrem-UserToGroup.ps1",
        "powershell-code",
        "powershell"
      );
      loadFile("/helper/access-packages.json", "json-code", "json");
      loadFile("/helper/output.txt", "log-code", "plaintext");
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        hljs.highlightAll();
      });
    </script>
  </body>
</html>
