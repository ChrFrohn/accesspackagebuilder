{"version":3,"file":"applicationinsights-analytics-js.cjs.min.js","sources":["https://raw.githubusercontent.com/microsoft/ApplicationInsights-JS/refs/tags/3.3.6/tools/shims/src/Constants.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/internal/treeshake_helpers.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/internal/constants.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/safe.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/safe_get.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/base.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/get_own_prop_desc.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/has_own_prop.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/has_own.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/for_each_key.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/define.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/internal/map.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/as_string.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/diagnostics.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/throw.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/object.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/enum.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/symbol/well_known.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/internal/global.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/internal/unwrapFunction.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/math/min_max.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/slice.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/substring.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/polyfills/symbol.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/lazy.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/cache.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/environment.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/symbol/symbol.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/iterator/forOf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/iterator/iterator.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/funcs/funcs.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/array/append.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/array/forEach.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/array/indexOf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/set_proto.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/array/map.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/create.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/customError.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/date.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/polyfills/trim.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/object/is_plain_object.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/helpers/perf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/trim.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/math/floor.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/math/round.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/ends_with.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/string/index_of.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/timer/handler.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.11.8/lib/src/timer/timeout.ts","https://raw.githubusercontent.com/microsoft/ApplicationInsights-JS/refs/tags/3.3.6/tools/shims/src/Constants.ts","https://raw.githubusercontent.com/microsoft/dynamicproto-js/refs/tags/2.0.3/lib/src/DynamicProto.ts","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK.Enums/EnumHelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/AggregationError.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/__DynamicConstants.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/InternalConstants.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/HelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/EnvUtils.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/RandomHelper.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DataCacheHelper.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/ConfigDefaults.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/DynamicSupport.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/DynamicProperty.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/DynamicState.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/DynamicConfig.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/Config/ConfigDefaultHelpers.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DbgExtensionUtils.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DiagnosticLogger.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/CookieMgr.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/PerfManager.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/CoreUtils.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/W3cTraceParent.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/TelemetryHelpers.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/ProcessTelemetryContext.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/BaseTelemetryPlugin.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/UnloadHandlerContainer.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/UnloadHookContainer.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/EventHelpers.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCore/dist-es5/JavaScriptSDK/InstrumentHooks.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Constants.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/__DynamicConstants.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Common/DataSanitizer.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/UrlHelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Util.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Enums.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/StorageHelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Event.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Exception.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Common/DataPoint.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Metric.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/HelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/PageView.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/RemoteDependencyData.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/Trace.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/Telemetry/PageViewPerformance.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/TelemetryItemCreator.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/DomHelperFuncs.js","applicationinsights-analytics-js@3.3.6/shared/AppInsightsCommon/dist-es5/applicationinsights-common.js","applicationinsights-analytics-js@3.3.6/dist-es5/__DynamicConstants.js","applicationinsights-analytics-js@3.3.6/dist-es5/JavaScriptSDK/Telemetry/PageViewManager.js","applicationinsights-analytics-js@3.3.6/dist-es5/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js","applicationinsights-analytics-js@3.3.6/dist-es5/JavaScriptSDK/AnalyticsPlugin.js","applicationinsights-analytics-js@3.3.6/dist-es5/JavaScriptSDK/Telemetry/PageVisitTimeManager.js","applicationinsights-analytics-js@3.3.6/dist-es5/JavaScriptSDK/Timing.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const strShimFunction = \"function\";\r\nexport const strShimObject = \"object\";\r\nexport const strShimUndefined = \"undefined\";\r\nexport const strShimPrototype = \"prototype\";\r\nexport const strDefault = \"default\";\r\n\r\nexport const ObjClass = Object;\r\nexport const ObjProto = ObjClass[strShimPrototype];\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2024 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal tree shaking helper to return the first available function from the two provided.\r\n * This is required to ensure that tree-shaking can remove any unused functions as this ensures\r\n * that the alias assignments are not considered side-effects and are tagged correctly as pure.\r\n * @param func1 - The system function to use if available\r\n * @param func2 - The polyfill function to use if the static function is not available\r\n * @returns The first available function from the two provided\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _pureAssign<F>(func1: F, func2?: F): F {\r\n    return func1 || func2;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal tree shaking helper to return the value of the named property from the provided object.\r\n * By using this helper, we can explicitly tell the tree-shaking tool that this function is pure and\r\n * has no side effects. As some tree-shaking tools may not be able to determine this automatically.\r\n * @param value - The object to get the property value from\r\n * @param name - The name of the property to get the value of\r\n * @returns The value of the named property from the provided object\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _pureRef<R extends T[keyof T], T = any>(value: T, name: keyof T): R {\r\n    return value[name] as R;\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { _pureAssign, _pureRef } from \"./treeshake_helpers\";\r\n\r\n// These constants are currently NOT exported directly, we may export them later associated with a frozen namespace (maybe)\r\n// For now do NOT expect that we will export these values.\r\n\r\nexport const UNDEF_VALUE: undefined = undefined;\r\nexport const NULL_VALUE: null = null;\r\n\r\nexport const EMPTY = \"\";\r\nexport const FUNCTION = \"function\";\r\nexport const OBJECT = \"object\";\r\nexport const PROTOTYPE = \"prototype\";\r\nexport const __PROTO__ = \"__proto__\";\r\nexport const UNDEFINED = \"undefined\";\r\nexport const CONSTRUCTOR = \"constructor\";\r\nexport const SYMBOL = \"Symbol\";\r\nexport const POLYFILL_TAG = \"_polyfill\";\r\nexport const LENGTH = \"length\";\r\nexport const NAME = \"name\";\r\nexport const CALL = \"call\";\r\nexport const TO_STRING = \"toString\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjClass = (/*#__PURE__*/_pureAssign(Object));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjProto = (/*#__PURE__*/_pureRef<typeof Object.prototype>(ObjClass, PROTOTYPE));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const StrCls = (/*#__PURE__*/_pureAssign(String));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const StrProto = (/*#__PURE__*/_pureRef<typeof String.prototype>(StrCls, PROTOTYPE)) as String;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const MathCls = (/*#__PURE__*/_pureAssign(Math)) as Math;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrCls = (/*#__PURE__*/_pureAssign(Array));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrProto = (/*#__PURE__*/_pureRef<typeof ArrCls.prototype>(ArrCls, PROTOTYPE));\r\n\r\n/**\r\n * @ignore\r\n *\r\n */\r\nexport const ArrSlice = (/*#__PURE__*/_pureRef<typeof ArrProto.slice>(ArrProto, \"slice\"));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Infers the return type of the specified function\r\n * @since 0.10.5\r\n * @group Safe\r\n * @typeParam T - The type of the function which to infer the return type\r\n */\r\nexport type SafeReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any\r\n\r\n/**\r\n * Defines the return value of the {@link safe} function, which is an object with either a value or an error\r\n * @since 0.10.5\r\n * @group Safe\r\n * @typeParam T - The type of the function to call\r\n * @typeParam R - The return type of the function\r\n */\r\nexport interface ISafeReturn<T extends (...args: any) => any> {\r\n    /**\r\n     * The value returned by the function call\r\n     */\r\n    v?: SafeReturnType<T>;\r\n\r\n    /**\r\n     * The error thrown by the function call\r\n     */\r\n    e?: Error;\r\n}\r\n\r\n/**\r\n * Call the specified function with zero or more individual arguments, the call will be wrapped in a try / catch\r\n * block and the result returned wrapped in an {@link ISafeReturn} instance. If the function call throws an\r\n * exception the {@link ISafeReturn.e | error} property will contain the exception otherwise the {@link ISafeReturn.v | value}\r\n * property will contain the value returned from the function.\r\n * @since 0.10.5\r\n * @group Safe\r\n * @param func - The function to call\r\n * @param argArray - An array of the arguments to pass to the function\r\n * @returns The return value of the function or undefined if an exception is thrown\r\n * @example\r\n * ```ts\r\n * let result = safe((value: string) => {\r\n *    return JSON.parse(value);\r\n * }, [\"{ invalid: json value\"]);\r\n *\r\n * // result.e instanceof SyntaxError\r\n *\r\n * let result2 = safe((value: string) => {\r\n *   return JSON.parse(value);\r\n * }, [\"{ valid: 'json value' }\"]);\r\n *\r\n * // result2.v === { valid: \"json value\" }\r\n * ```\r\n */\r\nexport function safe<F extends (...args: unknown[]) => any>(func: F, argArray?: any[]): ISafeReturn<F> {\r\n    try {\r\n        return {\r\n            v: func.apply(this, argArray)\r\n        };\r\n    } catch (e) {\r\n        return { e };\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { safe } from \"./safe\";\r\n\r\n/**\r\n * Function to safely execute a callback function, if the function throws the provided default\r\n * value will be returned.\r\n * @since 0.9.5\r\n * @group Safe\r\n * @param cb - Callback function be wrapped with an exception\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns The result of the callback function or the default if an exception occurred calling the callback\r\n * function.\r\n * @example\r\n * ```ts\r\n * let theExpression = \"{ invalid: json value\";\r\n *\r\n * let result = safeGet(() => {\r\n *     return JSON.parse(theExpression);\r\n * }, {});\r\n *\r\n * // result === {};\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function safeGet<T = boolean>(cb: () => T, defValue: T): T {\r\n    let result = safe(cb);\r\n    \r\n    return result.e ? defValue : result.v;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrCls, FUNCTION, NULL_VALUE, OBJECT, ObjProto, TO_STRING, UNDEFINED, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { safeGet } from \"./safe_get\";\r\n\r\nlet _primitiveTypes: string[];\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the provided type.\r\n * @param theType - The type to match against the `typeof value`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createIs<T>(theType: string): (value: any) => value is T {\r\n    return function (value: any): value is T {\r\n        return typeof value === theType;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the object type specified based on {@link objToString}.\r\n * @param - The object name to match for the `objToString(value)`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createObjIs<T>(theName: string): (value: any) => value is T {\r\n    const theType = \"[object \" + theName + \"]\";\r\n    return function (value: any): value is T {\r\n        return !!(value && objToString(value) === theType);\r\n    }\r\n}\r\n\r\n/**\r\n * The `objToString()` method returns a string representing the object. This explicitly\r\n * always calls the `Object.prototype.toString()` method.\r\n *\r\n * An object's toString() method is most commonly invoked when that object undergoes:\r\n * - explicit type conversion to a string (for example, String(myObject))\r\n * - implicit type coercion into a string (for example, myObject + \"hello world\")\r\n *\r\n * @group Object\r\n * @param value - The object to be converted into a string\r\n * @returns A string representation of the object\r\n * @example\r\n * ```ts\r\n * objToString(new Date()); // [object Date]\r\n * objToString(new String()); // [object String]\r\n *\r\n * // Math has its Symbol.toStringTag\r\n * objToString(Math); // [object Math]\r\n *\r\n * objToString(undefined); // [object Undefined]\r\n * objToString(null); // [object Null]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function objToString(value: any): string {\r\n    return ObjProto[TO_STRING].call(value);\r\n}\r\n\r\n/**\r\n * Validate if the provided value object is of the expected type\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @param theType - The expected type name as a string\r\n * @returns `true` if the value matches the provided type\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isTypeof(value: any, theType: string): boolean {\r\n    return typeof value === theType;\r\n}\r\n\r\n/**\r\n * Checks if the provided value is undefined or contains the string value \"undefined\",\r\n * if you want to consider the string value as undefined see {@link isStrictUndefined}\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the value is undefined or \"undefined\", otherwise false\r\n * @example\r\n * ```ts\r\n * isUndefined(undefined);              // true\r\n * isUndefined(\"undefined\");            // true\r\n *\r\n * isUndefined(null);                   // false\r\n * isUndefined(\"null\");                 // false\r\n * isUndefined(\"1\");                    // false\r\n * isUndefined(\"aa\");                   // false\r\n * isUndefined(new Date());             // false\r\n * isUndefined(1);                      // false\r\n * isUndefined(\"\");                     // false\r\n * isUndefined(_dummyFunction);         // false\r\n * isUndefined([]);                     // false\r\n * isUndefined(new Array(1));           // false\r\n * isUndefined(true);                   // false\r\n * isUndefined(false);                  // false\r\n * isUndefined(\"true\");                 // false\r\n * isUndefined(\"false\");                // false\r\n * isUndefined(new Boolean(true));      // false\r\n * isUndefined(new Boolean(false));     // false\r\n * isUndefined(new Boolean(\"true\"));    // false\r\n * isUndefined(new Boolean(\"false\"));   // false\r\n * isUndefined(Boolean(true));          // false\r\n * isUndefined(Boolean(false));         // false\r\n * isUndefined(Boolean(\"true\"));        // false\r\n * isUndefined(Boolean(\"false\"));       // false\r\n * isUndefined(new RegExp(\"\"));         // false\r\n * isUndefined(new ArrayBuffer(0));     // false\r\n * isUndefined(new Error(\"Test Error\"));// false\r\n * isUndefined(new TypeError(\"Test TypeError\"));    // false\r\n * isUndefined(new TestError(\"Test TestError\"));    // false\r\n * isUndefined(_dummyError());          // false\r\n * isUndefined(Promise.reject());       // false\r\n * isUndefined(Promise.resolve());      // false\r\n * isUndefined(new Promise(() => {}));  // false\r\n * isUndefined(_simplePromise());       // false\r\n * isUndefined(_simplePromiseLike());   // false\r\n * isUndefined(Object.create(null));    // false\r\n * isUndefined(polyObjCreate(null));    // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isUndefined(value: any) {\r\n    return typeof value === UNDEFINED || value === UNDEFINED;\r\n}\r\n\r\n/**\r\n * Checks if the provided value is undefined, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if the typeof value === UNDEFINED\r\n * @example\r\n * ```ts\r\n * isStrictUndefined(undefined);    // true\r\n *\r\n * isStrictUndefined(null);         // false\r\n * isStrictUndefined(\"null\");       // false\r\n * isStrictUndefined(\"undefined\");  // false\r\n * isStrictUndefined(\"1\");          // false\r\n * isStrictUndefined(\"aa\");         // false\r\n * isStrictUndefined(new Date());   // false\r\n * isStrictUndefined(0);            // false\r\n * isStrictUndefined(1);            // false\r\n * isStrictUndefined(\"\");           // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isStrictUndefined(arg: any): arg is undefined {\r\n    return !isDefined(arg);\r\n}\r\n\r\n/**\r\n * Checks if the provided value is null, undefined or contains the string value of \"undefined\".\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns `true` if the value is `null` or `undefined`\r\n * @example\r\n * ```ts\r\n * isNullOrUndefined(null);         // true\r\n * isNullOrUndefined(undefined);    // true\r\n * isNullOrUndefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isNullOrUndefined(value);        // true\r\n *\r\n * isNullOrUndefined(\"\");           // false\r\n * isNullOrUndefined(0);            // false\r\n * isNullOrUndefined(new Date());   // false\r\n * isNullOrUndefined(true);         // false\r\n * isNullOrUndefined(false);        // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isNullOrUndefined(value:  any): boolean {\r\n    return value === NULL_VALUE || isUndefined(value);\r\n}\r\n\r\n/**\r\n * Checks if the provided value is null, undefined only, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isStrictNullOrUndefined(null);         // true\r\n * isStrictNullOrUndefined(undefined);    // true\r\n * isStrictNullOrUndefined(\"undefined\");  // false\r\n *\r\n * let value = null;\r\n * isStrictNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isStrictNullOrUndefined(value);        // true\r\n *\r\n * isStrictNullOrUndefined(\"\");           // false\r\n * isStrictNullOrUndefined(0);            // false\r\n * isStrictNullOrUndefined(new Date());   // false\r\n * isStrictNullOrUndefined(true);         // false\r\n * isStrictNullOrUndefined(false);        // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isStrictNullOrUndefined(value: any): boolean {\r\n    return value === NULL_VALUE || !isDefined(value);\r\n}\r\n\r\n/**\r\n * Checks if the passed value is defined, which means it has any value and is not undefined.\r\n * A string value of \"undefined\" is considered to be defined.\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if arg has a value (is not === undefined)\r\n * @example\r\n * ```ts\r\n * isDefined(null);         // false\r\n * isDefined(undefined);    // false\r\n * isDefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isDefined(value);        // false\r\n * let value = undefined;\r\n * isDefined(value);        // false\r\n *\r\n * isDefined(\"\");           // true\r\n * isDefined(0);            // true\r\n * isDefined(new Date());   // true\r\n * isDefined(true);         // true\r\n * isDefined(false);        // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isDefined(arg: any): boolean {\r\n    return !!arg || arg !== UNDEF_VALUE;\r\n}\r\n\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 7 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - null\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @param value - The value to check whether it's a primitive value\r\n * @example\r\n * ```ts\r\n * isPrimitive(null);                   // true\r\n * isPrimitive(undefined);              // true\r\n * isPrimitive(\"null\");                 // true\r\n * isPrimitive(\"undefined\");            // true\r\n * isPrimitive(\"1\");                    // true\r\n * isPrimitive(\"aa\");                   // true\r\n * isPrimitive(1);                      // true\r\n * isPrimitive(Number(2));              // true\r\n * isPrimitive(\"\");                     // true\r\n * isPrimitive(String(\"\"));             // true\r\n * isPrimitive(true);                   // true\r\n * isPrimitive(false);                  // true\r\n * isPrimitive(\"true\");                 // true\r\n * isPrimitive(\"false\");                // true\r\n * isPrimitive(BigInt(42));             // true\r\n * isPrimitive(Symbol.for(\"Hello\"));    // true\r\n *\r\n * isPrimitive(new String(\"aa\"));       // false\r\n * isPrimitive(new Date());             // false\r\n * isPrimitive(_dummyFunction);         // false\r\n * isPrimitive([]);                     // false\r\n * isPrimitive(new Array(1));           // false\r\n * isPrimitive(new Boolean(true));      // false\r\n * isPrimitive(new Boolean(false));     // false\r\n * isPrimitive(new Boolean(\"true\"));    // false\r\n * isPrimitive(new Boolean(\"false\"));   // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPrimitive(value: any): value is string | number | bigint | boolean | undefined | symbol | null {\r\n    return value === NULL_VALUE || isPrimitiveType(typeof value);\r\n}\r\n\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 6 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.9.6\r\n * @group Type Identity\r\n * @param theType - The type as a string value to be checked whther it's a primitive type, this should be the value\r\n * returned from `typeof value`.\r\n * @example\r\n * ```ts\r\n * isPrimitiveType(null);                   // false\r\n * isPrimitiveType(undefined);              // false\r\n * isPrimitiveType(\"null\");                 // false\r\n * isPrimitiveType(\"undefined\");            // false\r\n * isPrimitiveType(\"1\");                    // false\r\n * isPrimitiveType(\"aa\");                   // false\r\n * isPrimitiveType(1);                      // false\r\n * isPrimitiveType(Number(2));              // false\r\n * isPrimitiveType(\"\");                     // false\r\n * isPrimitiveType(String(\"\"));             // false\r\n * isPrimitiveType(true);                   // false\r\n * isPrimitiveType(false);                  // false\r\n * isPrimitiveType(\"true\");                 // false\r\n * isPrimitiveType(\"false\");                // false\r\n * isPrimitiveType(BigInt(42));             // false\r\n * isPrimitiveType(Symbol.for(\"Hello\"));    // false\r\n *\r\n * isPrimitiveType(\"string\");               // true\r\n * isPrimitiveType(\"number\");               // true\r\n * isPrimitiveType(\"boolean\");              // true\r\n * isPrimitiveType(\"undefined\");            // true\r\n * isPrimitiveType(\"symbol\");               // true\r\n * isPrimitiveType(\"bigint\");               // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPrimitiveType(theType: string): boolean {\r\n    !_primitiveTypes && (_primitiveTypes = [ \"string\", \"number\", \"boolean\", UNDEFINED, \"symbol\", \"bigint\" ]);\r\n\r\n    return !!(theType !== OBJECT && _primitiveTypes.indexOf(theType) !== -1);\r\n}\r\n\r\n/**\r\n * Checks to see if the past value is a string value\r\n * @group Type Identity\r\n * @group String\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isString(\"\");            // true\r\n * isString(\"null\");        // true\r\n * isString(\"undefined\");   // true\r\n * isString(String(\"\"));    // true\r\n *\r\n * isString(null);          // false\r\n * isString(undefined);     // false\r\n * isString(0);             // false\r\n * ```\r\n */\r\nexport const isString: (value: any) => value is string = (/*#__PURE__*/_createIs<string>(\"string\"));\r\n\r\n/**\r\n * Checks to see if the past value is a function value\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * function myFunction() { }\r\n * isFunction(null);            // false\r\n * isFunction(undefined);       // false\r\n * isFunction(\"null\");          // false\r\n * isFunction(\"undefined\");     // false\r\n * isFunction(\"1\");             // false\r\n * isFunction(\"aa\");            // false\r\n * isFunction(new Date());      // false\r\n * isFunction(1);               // false\r\n * isFunction(\"\");              // false\r\n * isFunction(myFunction);      // true\r\n * isFunction([]);              // false\r\n * isFunction(new Array(1));    // false\r\n * ```\r\n */\r\nexport const isFunction: (value: any) => value is Function = (/*#__PURE__*/_createIs<Function>(FUNCTION));\r\n\r\n/**\r\n * Checks to see if the past value is an object value\r\n * @group Type Identity\r\n * @group Object\r\n * @typeParam T - The object type, defaults to any\r\n * @param value - The value to check\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isObject<T>(value: T): value is T {\r\n    if (!value && isNullOrUndefined(value)) {\r\n        return false;\r\n    }\r\n\r\n    return !!value && typeof value === OBJECT;\r\n}\r\n\r\n/**\r\n * Checks if the type of value is an Array.\r\n *\r\n * @group Type Identity\r\n * @group Array\r\n * @param arg - Value to be checked.\r\n * @return True if the value is a Array, false otherwise.\r\n * @example\r\n * ```ts\r\n * import { isArray, isObject } from \"@nevware21/ts-utils\";\r\n *\r\n * function performAction(value: any) {\r\n *     if (isArray(value) || isObject(value)) {\r\n *         // Do something\r\n *     } else {\r\n *         // Do something else\r\n *     }\r\n * }\r\n * ```\r\n */\r\nexport const isArray: <T = any>(arg: any) => arg is Array<T> = (/* #__PURE__*/_pureRef<typeof ArrCls.isArray>(ArrCls as any, \"isArray\"));\r\n\r\n/**\r\n * Check if an object is of type Date\r\n * @group Type Identity\r\n * @example\r\n * ```ts\r\n * import { isDate } from \"@nevware21/ts-utils\";\r\n *\r\n * let _theDate = null;\r\n *\r\n * function getSetDate(newDate?: any) {\r\n *     _theDate = isDate(newDate) ? newDate : new Date();\r\n *\r\n *     return _theDate;\r\n * }\r\n * ```\r\n */\r\nexport const isDate: (value: any) => value is Date = (/*#__PURE__*/_createObjIs<Date>(\"Date\"));\r\n\r\n/**\r\n * Checks if the type of value is a number.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a number, false otherwise.\r\n */\r\nexport const isNumber: (value: any) => value is number = (/*#__PURE__*/_createIs<number>(\"number\"));\r\n\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a boolean, false otherwise.\r\n */\r\nexport const isBoolean: (value: any) => value is boolean = (/*#__PURE__*/_createIs<boolean>(\"boolean\"));\r\n\r\n/**\r\n * Determines if a value is a regular expression object.\r\n * @group Type Identity\r\n * @param value - Reference to check.\r\n * @returns True if `value` is a `RegExp`.\r\n */\r\nexport const isRegExp: (value: any) => value is RegExp = (/*#__PURE__*/_createObjIs<RegExp>(\"RegExp\"));\r\n\r\n/**\r\n * Checks if the type of value is a File object.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a File, false otherwise.\r\n */\r\nexport const isFile: (value: any) => value is File = (/*#__PURE__*/_createObjIs<File>(\"File\"));\r\n\r\n/**\r\n * Checks if the type of value is a FormData object.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a FormData, false otherwise.\r\n */\r\nexport const isFormData: (value: any) => value is FormData = (/*#__PURE__*/_createObjIs<FormData>(\"FormData\"));\r\n\r\n/**\r\n * Checks if the type of value is a Blob object.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Blob, false otherwise.\r\n */\r\nexport const isBlob: (value: any) => value is Blob = (/*#__PURE__*/_createObjIs<Blob>(\"Blob\"));\r\n\r\n/**\r\n * Checks if the type of value is a ArrayBuffer object.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a ArrayBuffer, false otherwise.\r\n */\r\nexport const isArrayBuffer: (value: any) => value is ArrayBuffer = (/*#__PURE__*/_createObjIs<ArrayBuffer>(\"ArrayBuffer\"));\r\n\r\n/**\r\n * Checks if the type of value is a Error object.\r\n * @group Type Identity\r\n * @group Error\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Error, false otherwise.\r\n */\r\nexport const isError: (value: any) => value is Error = (/*#__PURE__*/_createObjIs<Error>(\"Error\"));\r\n\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a PromiseLike, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPromiseLike<T>(value: any): value is PromiseLike<T> {\r\n    return !!(value && value.then && isFunction(value.then));\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * This is an alias for {@link isPromiseLike}.\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport const isThenable: <T>(value: any) => value is PromiseLike<T> = isPromiseLike;\r\n\r\n/**\r\n * Checks if the type of value is a Promise instance (contains then and catch functions).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Promise, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPromise<T>(value: any): value is Promise<T> {\r\n    return !!(value && value.then && value.catch && isFunction(value.then) && isFunction((value as any).catch));\r\n}\r\n\r\n/**\r\n * Checks if the type of value does not evaluate to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param value - Value to be checked.\r\n * @return True if the value is not truthy, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isNotTruthy(value: any) {\r\n    return !value || !isTruthy(value);\r\n}\r\n\r\n/**\r\n * Checks if the type of value evaluates to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param value - Value to be checked.\r\n * @return True if the value is not truthy, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isTruthy(value: any) {\r\n    // Objects created with no prototype (Object.create(null)) cannot be converted to primitives\r\n    // Which causes this code to throw, additionally just using !! also fails for Boolean objects\r\n    // !!(new Boolean(false)) evaluates to true\r\n    return !(!value || safeGet(() => !(value && (0 + value)), !value));\r\n    //return !(!value || !(value && (0 + value)));\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The objGetOwnPropertyDescriptor() method returns an object describing the configuration of a specific property on\r\n * a given object (that is, one directly present on an object and not in the object's prototype chain). The object\r\n * returned is mutable but mutating it has no effect on the original property's configuration.\r\n * @since 0.4.3\r\n * @group Object\r\n * @param target - Object that contains the property.\r\n * @param prop - Name of the property.\r\n * @returns A property descriptor of the given property if it exists on the object, otherwise undefined.\r\n *\r\n * @example\r\n * ```ts\r\n * o = {};\r\n * objDefineProp(o, 'qux', {\r\n *   value: 8675309,\r\n *   writable: false,\r\n *   enumerable: false\r\n * });\r\n * d = objGetOwnPropertyDescriptor(o, 'qux');\r\n * // d is {\r\n * //   value: 8675309,\r\n * //   writable: false,\r\n * //   enumerable: false,\r\n * //   configurable: false\r\n * // }\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // TypeError: \"foo\" is not an object  // ES5 code\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // Object returned by ES2015 code: {\r\n * //   configurable: false,\r\n * //   enumerable: true,\r\n * //   value: \"f\",\r\n * //   writable: false\r\n * // }\r\n * ```\r\n * Note: In ES5, if the first argument to this method is not an object (a primitive), then it will cause a TypeError. In ES2015, a non-object first argument will be coerced to an object at first.\r\n */\r\nexport const objGetOwnPropertyDescriptor: (target: any, prop: PropertyKey) => PropertyDescriptor | undefined = (/* #__PURE__ */_pureRef<typeof Object.getOwnPropertyDescriptor>(ObjClass as any, \"getOwnPropertyDescriptor\"));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, ObjProto } from \"../internal/constants\";\r\n\r\n/**\r\n * The objHasOwnProperty() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n *\r\n * The objHasOwnProperty() method returns true if the specified property is a direct\r\n * property of the object — even if the value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in\r\n * operator, this method does not check for the specified property in the object's\r\n * prototype chain.\r\n *\r\n * The method can be called on most JavaScript objects, because most objects descend\r\n * from Object, and hence inherit its methods. For example Array is an Object, so you\r\n * can use objHasOwnProperty() method to check whether an index exists:\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwnProperty(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwnProperty(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function objHasOwnProperty<T = any>(obj: T, prop: PropertyKey): boolean {\r\n    return !!obj && ObjProto.hasOwnProperty[CALL](obj, prop);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\n\r\n/**\r\n * The objHasOwn() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n * If the property is inherited, or does not exist, the method returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over {@link objHasOwnProperty} () because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport const objHasOwn: <T = any>(obj: T, prop: PropertyKey) => boolean = (/*#__PURE__*/_pureAssign((/* #__PURE__ */_pureRef(ObjClass as any, \"hasOwn\")), polyObjHasOwn));\r\n\r\n/**\r\n * The polyObjHasOwn() method is a polyfill for {@link objHasOwn} when the native\r\n * [Object.hasOwnreturns](https://caniuse.com/?search=hasOwn) is not supported, it returns a\r\n * boolean indicating whether the object has the specified property as its own property (as\r\n * opposed to inheriting it). If the property is inherited, or does not exist, the method\r\n * returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over objHasOwnProperty() because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @group Polyfill\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * polyObjHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * polyObjHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyObjHasOwn<T = any>(obj: T, prop: PropertyKey): boolean {\r\n    return objHasOwnProperty(obj, prop) || !!objGetOwnPropertyDescriptor(obj, prop)\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isObject } from \"../helpers/base\";\r\nimport { CALL } from \"../internal/constants\";\r\nimport { objHasOwn } from \"./has_own\";\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each key in an object. This is equivelent to `arrForEach(Object.keys(theObject), callbackFn)` or\r\n * if not using the array helper `Object.keys(theObject).forEach(callbackFn)` except that this helper avoid creating a temporary of the object\r\n * keys before iterating over them and like the `arrForEach` helper you CAN stop or break the iteration by returning -1 from the `callbackFn` function.\r\n * @group Object\r\n * @typeParam T - The object type\r\n * @param callbackfn - A function that accepts up to two arguments, the key name and the current value of the property represented by the key.\r\n * @param thisArg - [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the object will be used as the this value.\r\n * @example\r\n * ```ts\r\n * function performAction<T>(target: T, source: any) {\r\n *    if (!isNullOrUndefined(source)) {\r\n *        objForEachKey(source, (key, value) => {\r\n *            // Set the target with a reference to the same value with the same name\r\n *            target[key] = value;\r\n *        });\r\n *    }\r\n *\r\n *    return target;\r\n * }\r\n * ```\r\n */\r\nexport function objForEachKey<T>(theObject: T, callbackfn: (key: string, value: T[keyof T]) => void | number, thisArg?: any): void {\r\n    if (theObject && isObject(theObject)) {\r\n        for (const prop in theObject) {\r\n            if (objHasOwn(theObject, prop)) {\r\n                if (callbackfn[CALL](thisArg || theObject, prop, theObject[prop]) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { isFunction, isStrictUndefined } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { ILazyValue } from \"../helpers/lazy\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * Definition of the Property Descriptor mappings for the objDefine functions.\r\n * If a descriptor has neither of value, writable, get and set keys, it is treated as a data descriptor.\r\n * If a descriptor has both [value or writable] and [get or set] keys, an exception is thrown.\r\n * Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited\r\n * properties will be considered as well. In order to ensure these defaults are preserved, you might\r\n * freeze existing objects in the descriptor object's prototype chain upfront, specify all options\r\n * explicitly, or point to null with {@link objCreate}(null).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport interface ObjDefinePropDescriptor<V = any> {\r\n    /**\r\n     * Identifies if this property should be configurable (true) when this value is set to false,\r\n     * - the type of this property cannot be changed between data property and accessor property, and\r\n     * - the property may not be deleted, and\r\n     * - other attributes of its descriptor cannot be changed (however, if it's a data descriptor with writable: true,\r\n     * the value can be changed, and writable can be changed to false).\r\n     * Defaults to true.\r\n     */\r\n    c?: boolean;\r\n\r\n    /**\r\n     * Identifies if this property will be visible during enumeration of the properties on the corresponding object.\r\n     * Defaults to true.\r\n     */\r\n    e?: boolean;\r\n\r\n    /**\r\n     * __data descriptor__\r\n     * The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.).\r\n     * Defaults to undefined.\r\n     */\r\n    v?: V;\r\n\r\n    /**\r\n     * A Lazy value instance which will be used to return the value, this will be wrapped in a getter function.\r\n     * @since 0.9.4\r\n     */\r\n    l?: ILazyValue<V>;\r\n\r\n    /**\r\n     * true if the value associated with the property may be changed with an assignment operator. Defaults to false.\r\n     */\r\n    w?: boolean;\r\n\r\n    /**\r\n     * A function which serves as a getter for the property, or undefined if there is no getter. When the property\r\n     * is accessed, this function is called without arguments and with this set to the object through which the\r\n     * property is accessed (this may not be the object on which the property is defined due to inheritance). The\r\n     * return value will be used as the value of the property. Defaults to undefined.\r\n     */\r\n    g?(): V;\r\n\r\n    /**\r\n     * A function which serves as a setter for the property, or undefined if there is no setter. When the property\r\n     * is assigned, this function is called with one argument (the value being assigned to the property) and with\r\n     * this set to the object through which the property is assigned. Defaults to undefined.\r\n     * @param value - The value to set the property to.\r\n     */\r\n    s?(value: V): void;\r\n}\r\n\r\n/**\r\n * An object whose keys represent the names of properties to be defined or modified and whose values are objects\r\n * describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptor} for more details).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport type ObjDefinePropDescriptorMap = {\r\n    [key: PropertyKey]: ObjDefinePropDescriptor\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Mapping from ObjDefinePropDescriptor key to PropertyDescriptor key\r\n */\r\nconst propMap: { [key in keyof ObjDefinePropDescriptor]: keyof PropertyDescriptor } = {\r\n    e: \"enumerable\",\r\n    c: \"configurable\",\r\n    v: \"value\",\r\n    w: \"writable\",\r\n    g: \"get\",\r\n    s: \"set\"\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to convert ObjDefinePropDescriptor into PropertyDescriptor\r\n * @param value - The prop descriptor to convert\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createProp(value: ObjDefinePropDescriptor): PropertyDescriptor {\r\n    let prop: PropertyDescriptor = {};\r\n    prop[propMap[\"c\"]] = true;\r\n    prop[propMap[\"e\"]] = true;\r\n\r\n    if (value.l) {\r\n        // Asign a getter function to return the value when requested\r\n        prop.get = () => value.l.v;\r\n\r\n        // If it has a setter then expose it as well\r\n        let desc = objGetOwnPropertyDescriptor(value.l, \"v\");\r\n        if (desc && desc.set) {\r\n            prop.set = (newValue: any) => {\r\n                value.l.v = newValue;\r\n            };\r\n        }\r\n    }\r\n\r\n    objForEachKey(value, (key: keyof ObjDefinePropDescriptor, value) => {\r\n        prop[propMap[key]] = isStrictUndefined(value) ? prop[propMap[key]] : value;\r\n    });\r\n\r\n    return prop;\r\n}\r\n\r\n/**\r\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\r\n * This is a wrapper for [Object.defineProperty](https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/defineproperty)\r\n *\r\n * This method allows a precise addition to or modification of a property on an object. Normal property addition through\r\n * assignment creates properties which show up during property enumeration (for...in loop or objKeys method), whose\r\n * values may be changed, and which may be deleted. This method allows these extra details to be changed from their\r\n * defaults. By default, properties added using objDefineProp() are not writable, not enumerable, and not configurable.\r\n *\r\n * Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data\r\n * descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property\r\n * described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\r\n *\r\n * This is an alias for Object.defineProperty\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name or Symbol of the property to be defined or modified.\r\n * @param descriptor - The descriptor for the property being defined or modified.\r\n * @returns The object that was passed to the function with the new or updated property.\r\n */\r\nexport const objDefineProp: <T>(target: T, key: PropertyKey, descriptor: PropertyDescriptor & ThisType<any>) => T = (/*#__PURE__*/_pureRef<typeof Object.defineProperty>(ObjClass as any, \"defineProperty\"));\r\n\r\n/**\r\n * The objDefineProperties() method defines new or modifies existing properties directly on an object, returning the object.\r\n * This is a wrapper for [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param props - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns\r\n */\r\nexport const objDefineProperties: <T>(target: T, props: PropertyDescriptorMap & ThisType<any>) => T = (/*#__PURE__*/_pureRef<typeof Object.defineProperties>(ObjClass as any, \"defineProperties\"));\r\n\r\n/**\r\n * Try to define a get object property accessor for the target object, if a function is past as the value this will\r\n * be assumed to be a getter function and NOT the value.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineGet} or {@link objDefineAccessors}\r\n * as it provides a deterministic way for identifying whether the value is a value or a function rather than wrapping any\r\n * function value in another function.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param value - The value or a function that returns the value\r\n * @param configurable - Can the value be changed, defaults to true.\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineGet<T, V = any>(target: T, key: PropertyKey, value: (() => V) | V, configurable?: boolean, enumerable?: boolean): T {\r\n    return objDefineProp(target, key, _createProp({\r\n        e: enumerable,\r\n        c: configurable,\r\n        [isFunction(value) ? \"g\" : \"v\"]: value\r\n    }));\r\n}\r\n\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineAccessors} as this internally creates\r\n * the {@link ObjDefinePropDescriptor} definition based on your provided arguments. And only using a minimum set of functions\r\n * reduces your overall bundle size.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param prop - The name of the property to be defined or modified.\r\n * @param getProp - The getter function to wire against the getter.\r\n * @param setProp - The setter function to wire against the setter.\r\n * @param configurable - Can the value be changed, defaults to true\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineAccessors<T, V = any>(target: T, prop: PropertyKey, getProp?: (() => V) | null, setProp?: ((v: V) => void) | null, configurable?: boolean, enumerable?: boolean): T {\r\n    let desc: ObjDefinePropDescriptor = {\r\n        e: enumerable,\r\n        c: configurable\r\n    };\r\n\r\n    if (getProp) {\r\n        desc.g = getProp;\r\n    }\r\n\r\n    if (setProp) {\r\n        desc.s = setProp;\r\n    }\r\n    \r\n    return objDefineProp(target, prop, _createProp(desc));\r\n}\r\n\r\n/**\r\n * The objDefine() method defines a new or modifies an existing single property accessors for the target object based\r\n * on the configuration defined for the propDesc argument of type {@link ObjDefinePropDescriptor}. This will call\r\n * {@link objDefineProp} after creating the required PropertyDescriptor populating defaults for the propDesc values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProp.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param propDesc - An object which defines the Property Descriptor mappings for the mapping.\r\n * @returns The target object.\r\n */\r\nexport function objDefine<T>(target: T, key: keyof T, propDesc: ObjDefinePropDescriptor): T {\r\n    return objDefineProp(target, key, _createProp(propDesc));\r\n}\r\n\r\n/**\r\n * The objDefineProps() method defines new or modifies existing properties directly for the target object using the keys\r\n * and configuration from the propDescMap argument. This will call {@link objDefineProperties} after creating the required\r\n * PropertyDescriptorMap from the propDescMap values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProperties.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param propDescMap - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns The target object.\r\n */\r\nexport function objDefineProps<T>(target: T, propDescMap: ObjDefinePropDescriptorMap) {\r\n    let props: PropertyDescriptorMap = {};\r\n\r\n    objForEachKey(propDescMap, (key, value: ObjDefinePropDescriptor) => {\r\n        props[key] = _createProp(value);\r\n    });\r\n\r\n    return objDefineProperties(target, props);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { objDefineProp } from \"../object/define\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal constant enum used to identify the mapping values for the _createMap function\r\n */\r\nexport const enum eMapValues {\r\n    Key = 0,\r\n    Value = 1\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to create a key and value mapped representation of the values\r\n * @param values - The source values\r\n * @param keyType - Identifies the value to populate against the key\r\n * @param valueType - Identifies the value to populate against the value\r\n * @param completeFn - The function to call to complete the map (used to freeze the instance)\r\n * @param writable - Flag to indicate if the map should be writable\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createKeyValueMap(values: any, keyType: eMapValues, valueType: eMapValues, completeFn?: <T>(value: T) => T, writable?: boolean) {\r\n    let theMap: any = {};\r\n    objForEachKey(values, (key, value) => {\r\n        _assignMapValue(theMap, key, keyType ? value : key, writable);\r\n        _assignMapValue(theMap, value, valueType ? value : key, writable);\r\n    });\r\n\r\n    return completeFn ? completeFn(theMap) : theMap;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to assign a key and value to the map\r\n * @param theMap - The map to assign the key and value to\r\n * @param key - The key to assign\r\n * @param value - The value to assign\r\n * @param writable - Flag to indicate if the map should be writable\r\n */\r\nexport function _assignMapValue(theMap: any, key: any, value: any, writable?: boolean) {\r\n    objDefineProp(theMap, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        writable: !!writable\r\n    });\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrCls } from \"../internal/constants\";\r\nimport { _pureAssign } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The asString() method returns a string representing the value by\r\n * explicitly using `String(`value`)`.\r\n *\r\n * @since 0.4.3\r\n * @group String\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to get a string representation of\r\n * @example\r\n * ```ts\r\n * const arr = [ 1, 2, 3];\r\n * asString(arr);       // \"1,2,3\"\r\n * asString(null);      // \"null\"\r\n * asString(undefined); // \"undefined\"\r\n * asString(42);        // \"42\"\r\n * asString(Symbol.for(\"Hello\"));   // \"Symbol(Hello)\"\r\n * ```\r\n */\r\nexport const asString: (value: any) => string = (/* #__PURE__ */_pureAssign(StrCls));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, EMPTY, NULL_VALUE, ObjProto, TO_STRING, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\n\r\nconst ERROR_TYPE = \"[object Error]\";\r\n\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n * @group Error\r\n * @group Diagnostic\r\n * @param object - The object to be converted to a diagnostic string value\r\n * @param format - Identifies whether the JSON value should be formated\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format\r\n * @returns A string representation of the object suitable for diagnostics logging\r\n * @example\r\n * ```ts\r\n * let obj = { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } };\r\n *\r\n * let objStr = dumpObj(obj);\r\n * // objStr === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt = dumpObj(obj, true);\r\n * // objStrFmt === \"[object Object]: {\\n    a: 1,\\n    b: \"Hello\",\\n    c: {\\n        d: 2,\\n        e: \"Darkness\"\\n    }\\n}\"\r\n *\r\n * let objStrFmt2 = dumpObj(obj, 2);\r\n * // objStrFmt2 === \"[object Object]: {\\n  a: 1,\\n  b: \"Hello\",\\n  c: {\\n    d: 2,\\n    e: \"Darkness\"\\n  }\\n}\"\r\n *\r\n * let objStrFmt3 = dumpObj(obj, 0);\r\n * // objStrFmt3 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt4 = dumpObj(obj, false);\r\n * // objStrFmt4 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt5 = dumpObj(obj, null);\r\n * // objStrFmt5 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt6 = dumpObj(obj, undefined);\r\n * // objStrFmt6 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt7 = dumpObj(obj, \"\");\r\n * // objStrFmt7 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let err = new Error(\"Hello Darkness\");\r\n * let errStr = dumpObj(err);\r\n * // errStr === \"[object Error]: { stack: 'Error: Hello Darkness\\n    at <anonymous>:1:13', message: 'Hello Darkness', name: 'Error'\"\r\n *\r\n * let errStrFmt = dumpObj(err, true);\r\n * // errStrFmt === \"[object Error]: {\\n    stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\",\\n    message: \"Hello Darkness\",\\n    name: \"Error\"\\n}\"\r\n *\r\n * let errStrFmt2 = dumpObj(err, 2);\r\n * // errStrFmt2 === \"[object Error]: {\\n  stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\",\\n  message: \"Hello Darkness\",\\n  name: \"Error\"\\n}\"\r\n *\r\n * let errStrFmt3 = dumpObj(err, 0);\r\n * // errStrFmt3 === \"[object Error]: { stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\", message: \"Hello Darkness\", name: \"Error\" }\"\r\n *\r\n * ```\r\n * @see {@link dumpObj}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function dumpObj(object: any, format?: boolean | number): string {\r\n    let propertyValueDump = EMPTY;\r\n    const objType = ObjProto[TO_STRING][CALL](object);\r\n    if (objType === ERROR_TYPE) {\r\n        object = { stack: asString(object.stack), message: asString(object.message), name: asString(object.name) };\r\n    }\r\n\r\n    try {\r\n        propertyValueDump = JSON.stringify(object, NULL_VALUE, format ? (((typeof format as unknown) === \"number\") ? format as number : 4) : UNDEF_VALUE);\r\n        propertyValueDump = (propertyValueDump ? propertyValueDump.replace(/\"(\\w+)\"\\s*:\\s{0,1}/g, \"$1: \") : NULL_VALUE) || asString(object);\r\n    } catch(e) {\r\n        // Unable to convert object (probably circular)\r\n        propertyValueDump = \" - \" + dumpObj(e, format);\r\n    }\r\n\r\n    return objType + \": \" + propertyValueDump;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Throw an error exception with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwError(message?: string): never {\r\n    throw new Error(message);\r\n}\r\n\r\n/**\r\n * Throw a type error with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwTypeError(message?: string): never {\r\n    throw new TypeError(message);\r\n}\r\n\r\n/**\r\n * Throw a RangeError with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwRangeError(message?: string): never {\r\n    throw new RangeError(message);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { isArray, isObject } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { polyObjEntries, polyObjValues } from \"../polyfills/object\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\nconst _objFreeze = (/* #__PURE__ */_pureRef<typeof Object.freeze>(ObjClass, \"freeze\"));\r\n\r\nfunction _doNothing<T>(value: T) {\r\n    return  value;\r\n}\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _getProto(value: any) {\r\n    return value[__PROTO__] || NULL_VALUE;\r\n}\r\n\r\n/**\r\n * The `objAssign()` method copies all enumerable own properties from one or more source objects\r\n * to a target object. It returns the modified target object.\r\n *\r\n * Properties in the target object are overwritten by properties in the sources if they have the\r\n * same key. Later sources' properties overwrite earlier ones.\r\n *\r\n * The objAssign() method only copies enumerable and own properties from a source object to a\r\n * target object. It uses `Get` on the source and `Set` on the target, so it will invoke\r\n * [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and\r\n * [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).\r\n * Therefore it assigns properties, versus copying or defining new properties. This may make it\r\n * unsuitable for merging new properties into a prototype if the merge sources contain getters.\r\n *\r\n * For copying property definitions (including their enumerability) into prototypes, use\r\n * {@link objGetOwnPropertyDescriptor} and {@link objDefineProp} instead.\r\n *\r\n * Both String and Symbol properties are copied.\r\n *\r\n * In case of an error, for example if a property is non-writable, a TypeError is raised, and\r\n * the target object is changed if any properties are added before the error is raised.\r\n * @group Object\r\n * @example\r\n * ```ts\r\n * const obj = { a: 1 };\r\n * const copy = objAssign({}, obj);\r\n * console.log(copy); // { a: 1 }\r\n *\r\n * const o1 = { a: 1 };\r\n * const o2 = { b: 2 };\r\n * const o3 = { c: 3 };\r\n *\r\n * const obj = objAssign(o1, o2, o3);\r\n * console.log(obj); // { a: 1, b: 2, c: 3 }\r\n * console.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\r\n * ```\r\n */\r\nexport const objAssign = (/*#__PURE__*/_pureRef<typeof Object.assign>(ObjClass, \"assign\"));\r\n\r\n/**\r\n * The `objKeys()` method returns an array of a given object's own enumerable property names, iterated in\r\n * the same order that a normal loop would.\r\n *\r\n * objKeys() returns an array whose elements are strings corresponding to the enumerable properties found\r\n * directly upon object. The ordering of the properties is the same as that given by looping over the\r\n * properties of the object manually.\r\n * @group Object\r\n * @param value - The object to obtain a copy of the keys from\r\n * @returns An array of the properties names for the value object.\r\n * @example\r\n * ```ts\r\n * // simple array\r\n * const arr = ['a', 'b', 'c'];\r\n * console.log(objKeys(arr)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object\r\n * const obj = { 0: 'a', 1: 'b', 2: 'c' };\r\n * console.log(objKeys(obj)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object with random key ordering\r\n * const anObj = { 100: 'a', 2: 'b', 7: 'c' };\r\n * console.log(objKeys(anObj)); // console: ['2', '7', '100']\r\n *\r\n * // getFoo is a property which isn't enumerable\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(objKeys(myObj)); // console: ['foo']\r\n * ```\r\n */\r\nexport const objKeys: (value: any) => string[] = (/*#__PURE__*/_pureRef<typeof Object.keys>(ObjClass, \"keys\"));\r\n\r\n/**\r\n * Perform a deep freeze on the object and all of it's contained values / properties by recursively calling\r\n * `objFreeze()` on all enumerable properties of the object and on each property returned.\r\n * @group Object\r\n * @param value - the object to be completly frozen.\r\n * @returns The originally passed in object.\r\n */\r\nexport function objDeepFreeze<T>(value: T): T {\r\n    if (_objFreeze) {\r\n        objForEachKey(value, (key, value) => {\r\n            if (isArray(value) || isObject(value)) {\r\n                objDeepFreeze(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    return objFreeze(value);\r\n}\r\n\r\n/**\r\n * The `objFreeze()` method freezes an object. A frozen object can no longer be changed; freezing an object\r\n * prevents new properties from being added to it, existing properties from being removed, prevents changing the\r\n * enumerability, configurability, or writability of existing properties, and prevents the values of existing\r\n * properties from being changed. In addition, freezing an object also prevents its prototype from being changed.\r\n * `objFreeze()` returns the same object that was passed in.\r\n *\r\n * Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail,\r\n * either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\r\n *\r\n * For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are\r\n * set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are\r\n * changing the value). Note that values that are objects can still be modified, unless they are also frozen. As\r\n * an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added\r\n * to or removed from the array.\r\n *\r\n * `objFreeze()` returns the same object that was passed into the function. It does not create a frozen copy.\r\n * @group Object\r\n * @param value - The object to freeze.\r\n * @returns The object that was passed to the function.\r\n */\r\nexport const objFreeze: <T>(value: T) => T = (/* #__PURE__*/_pureAssign(_objFreeze, _doNothing));\r\n\r\n/**\r\n * The `objSeal()` method seals an object, preventing new properties from being added to it and marking all\r\n * existing properties as non-configurable. Values of present properties can still be changed as long as they\r\n * are writable.\r\n * @group Object\r\n * @param value - The object which should be sealed.\r\n * @returns The object being sealed.\r\n */\r\nexport const objSeal: <T>(value: T) => T = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.seal>(ObjClass, \"seal\")), _doNothing));\r\n\r\n/**\r\n * The objGetPrototypeOf() method returns the prototype (i.e. the value of the internal `Prototype` property)\r\n * of the specified value.\r\n * @since 0.4.4\r\n * @group Object\r\n * @param value - The object whose prototype is to be returned, which may be null.\r\n */\r\nexport const objGetPrototypeOf: (value: any) => any = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.getPrototypeOf>(ObjClass, \"getPrototypeOf\")), _getProto));\r\n\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * objEntries({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ [ \"Hello\", \"Darkness\" ], [ \"my\", \"old\"], [ \"friend\", \".\" ] ]\r\n *\r\n * // Array-like object\r\n * objEntries({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\r\n *\r\n * // Array-like object with random key ordering\r\n * objEntries({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]*\r\n * ```\r\n */\r\nexport const objEntries: <T = any>(value: {} | { [s: string]: T } | ArrayLike<T>) => [string, T][] = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.entries>(ObjClass, \"entries\")), polyObjEntries));\r\n\r\n/**\r\n * The objValues() returns an array whose elements are values of enumerable string-keyed properties found\r\n * directly upon object. This is the same as iterating with a for...in loop, except that a for...in loop\r\n * enumerates properties in the prototype chain as well. The order of the array returned by objValues()\r\n * is the same as that provided by a for...in loop.\r\n *\r\n * If you need the property keys, use objKeys() instead. If you need both the property keys and values, use objEntries() instead.\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - The object that contains the properties and methods.\r\n * @returns An array containing the given object's own enumerable string-keyed property values.\r\n * @example\r\n * ```ts\r\n * objValues({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ \"Darkness\", \"old\", \".\" ]\r\n *\r\n * // Array-like object\r\n * objValues({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ 'a', 'b', 'c']\r\n *\r\n * // Array-like object with random key ordering\r\n * objValues({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ 'b', 'c', 'a']\r\n * ```\r\n */\r\nexport const objValues: <T = any>(value: {} | { [s: string]: T } | ArrayLike<T>) => T[] = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.values>(ObjClass, \"values\")), polyObjValues));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { eMapValues, _createKeyValueMap, _assignMapValue } from \"../internal/map\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\nimport { objFreeze } from \"../object/object\";\r\n\r\n/**\r\n * A type that identifies an enum class generated from a constant enum.\r\n * @group Enum\r\n * @typeParam E - The constant enum type\r\n *\r\n * Returned from {@link createEnum}\r\n */\r\nexport declare type EnumCls<E = any> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? E[key] : key\r\n} & { readonly [key in keyof E]: E[key] };\r\n\r\n/**\r\n * A type that identifies an object whose property values are generally mapped to the key of the source type.\r\n * @group Enum\r\n * @typeParam E - The source constant enum type which identifies the keys and values\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createEnumKeyMap}\r\n */\r\nexport declare type EnumNameMap<E = any, T = { readonly [key in keyof E]: key extends string ? key : keyof E }> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? key : keyof E\r\n} & T;\r\n\r\n/**\r\n * A type that identifies an object whose property values are mapped to the resulting values of the source objects keys.\r\n * @group Enum\r\n * @typeParam E - The source type which identifies the keys.\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createEnumValueMap}\r\n */\r\nexport declare type EnumValueMap<E = any, T = { readonly [key in keyof E]: E[keyof E] }> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? E[key] : E[key]\r\n} & T;\r\n\r\n/**\r\n * A type that maps the keys of E to the type of V.\r\n * @group Enum\r\n * @typeParam E - The type of object that defines the Key (typically a constant enum)\r\n * @typeParam V - The value type, typically `string`, `number` but may also be a complex type.\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createSimpleMap}\r\n */\r\nexport declare type EnumTypeMap<E, V, T = { readonly [key in keyof E]: V }> = {\r\n    readonly [key in keyof E extends string ? keyof E : never]: V\r\n} & T;\r\n\r\n/**\r\n * Create a TypeScript style enum class which is a mapping that maps from the key -\\> value and the value -\\> key.\r\n * This is effectively the same as defining a non-constant enum, but this only repeats the \"Name\" of the enum value once.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const Animals = createEnum<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * Animals.Dog === 0;           // true\r\n * Animals[0] === \"Dog\";        // true\r\n * Animals[\"Dog\"] === 0;        // true\r\n * Animals.Cat === 1;           // true\r\n * Animals[1] === \"Cat\";        // true\r\n * Animals[\"Cat\"] === 1;        // true\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which looks and acts like a TypeScript Enum class.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnum<E>(values: { [key in keyof E]: E[keyof E] }): EnumCls<E> {\r\n    return _createKeyValueMap(values, eMapValues.Value, eMapValues.Key, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the property key and value which both map to the key,\r\n * E[key] =\\> key and E[value] =\\> key.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumKeyMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Dog\";         // true\r\n * animalMap[0] === \"Dog\";          // true\r\n * animalMap[\"Dog\"] === \"Dog\";      // true\r\n * animalMap.Cat === \"Cat\";         // true\r\n * animalMap[1] === \"Cat\";          // true\r\n * animalMap[\"Cat\"] === \"Cat\";      // true\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalType(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnumKeyMap<E>(values: { [key in keyof E]: E[keyof E] }): EnumNameMap<E> {\r\n    return _createKeyValueMap(values, eMapValues.Key, eMapValues.Key, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the resulting value,\r\n * E[key] =\\> value and E[value] =\\> value.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumValueMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === 0;     // true\r\n * animalMap[0] === 0;      // true\r\n * animalMap[\"Dog\"] === 0;  // true\r\n * animalMap.Cat === 1;     // true\r\n * animalMap[1] === 1;      // true\r\n * animalMap[\"Cat\"] === 1;  // true\r\n *\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalValue(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnumValueMap<E>(values: { [key in keyof E]: E[keyof E] }): EnumValueMap<E> {\r\n    return _createKeyValueMap(values, eMapValues.Value, eMapValues.Value, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the requested\r\n * generic mapValue with a type of V, E[key] =\\> mapValue and E[value] =\\> mapValue.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * };\r\n * // Creates a simple mapping to a string value\r\n * const animalFamilyMap = createValueMap<typeof Animal, string>({\r\n *    Dog: [ Animal.Dog, \"Canidae\"],\r\n *    Cat: [ Animal.Cat, \"Felidae\"],\r\n *    Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *    Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is \"string\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"string\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"string\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"string\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"string\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"string\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type (eg. typeof Animal);\r\n * @typeParam V - Identifies the type of the mapping `string`; `number`; etc is not restructed to primitive types.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defiend mapped value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createSimpleMap<E, V>(values: { [key in keyof E]: [ E[keyof E], V] }): EnumTypeMap<E, V> {\r\n    let mapClass: any = {};\r\n    objForEachKey(values, (key, value) => {\r\n        _assignMapValue(mapClass, key, value[1]);\r\n        _assignMapValue(mapClass, value[0], value[1]);\r\n    });\r\n\r\n    return objFreeze(mapClass);\r\n}\r\n\r\n/**\r\n * Create a strongly types map object which contains both the perperty key and value which both map\r\n * to the requested mapValue,\r\n * E[key] =\\> mapValue and E[value] =\\> mapValue.\r\n * - E = the const enum type (typeof Animal);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\",\r\n *     // Defined Named reference\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\",\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n *\r\n * or using an interface to define the direct string mappings\r\n *\r\n * interface IAnimalFamilyMap {\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\"\r\n * }\r\n *\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, IAnimalFamilyMap & {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\"\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n *\r\n * // You also end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the enum type\r\n * @typeParam T - Identifies the return type that is being created via the mapping.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defined mapped value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createTypeMap<E, T>(values: { [key in keyof E]: [ E[keyof E], T[keyof T] ] }): T {\r\n    return createSimpleMap<E, T>(values as any) as unknown as T;\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { createEnumKeyMap } from \"../helpers/enum\";\r\n\r\n/**\r\n * Identifies the Symbol static properties which are symbols themselves as a constant\r\n * enum to aid in minification when fetching them from the global symbol implementation.\r\n *\r\n * See: [Well Known Symbols](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols)\r\n * @group Symbol\r\n */\r\nexport const enum WellKnownSymbols {\r\n    /**\r\n     * The Symbol.asyncIterator symbol is a builtin symbol that is used to access an\r\n     * object's `Symbol.asyncIterator` method. In order for an object to be async iterable,\r\n     * it must have a Symbol.asyncIterator key.\r\n     *\r\n     * See: [Symbol.asyncIterator](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator)\r\n     */\r\n    asyncIterator = 0,\r\n\r\n    /**\r\n     * The `Symbol.hasInstance` well-known symbol is used to determine if a constructor\r\n     * object recognizes an object as its instance. The instanceof operator's behavior\r\n     * can be customized by this symbol.\r\n     *\r\n     * See: [Symbol.hasInstance](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance)\r\n     */\r\n    hasInstance = 1,\r\n\r\n    /**\r\n     * The `Symbol.isConcatSpreadable` symbol (Symbol.isConcatSpreadable) can be defined as an\r\n     * own or inherited property and its value is a boolean. It can control behavior for\r\n     * arrays and array-like objects:\r\n     * - For array objects, the default behavior is to spread (flatten) elements.\r\n     * Symbol.isConcatSpreadable can avoid flattening in these cases.\r\n     * - For array-like objects, the default behavior is no spreading or flattening.\r\n     * Symbol.isConcatSpreadable can force flattening in these cases.\r\n     *\r\n     * See: [Symbol.isConcatSpreadable](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable)\r\n     */\r\n    isConcatSpreadable = 2,\r\n\r\n    /**\r\n     * Whenever an object needs to be iterated (such as at the beginning of a for..of loop),\r\n     * its `Symbol.iterator` method is called with no arguments, and the returned iterator is used\r\n     * to obtain the values to be iterated.\r\n     *\r\n     * See: [Symbol.iterator](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator)\r\n     */\r\n    iterator = 3,\r\n\r\n    /**\r\n     * This function is also used to identify if objects have the behavior of regular expressions.\r\n     * For example, the methods String.prototype.startsWith(), String.prototype.endsWith() and\r\n     * String.prototype.includes(), check if their first argument is a regular expression and\r\n     * will throw a TypeError if they are. Now, if the match symbol is set to false (or a Falsy\r\n     * value), it indicates that the object is not intended to be used as a regular expression object.\r\n     *\r\n     * See: [Symbol.match](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match)\r\n     */\r\n    match = 4,\r\n\r\n    /**\r\n     * The `Symbol.matchAll` well-known symbol returns an iterator, that yields matches of the regular\r\n     * expression against a string. This function is called by the String.prototype.matchAll() method.\r\n     *\r\n     * See: [Symbol.matchAll](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll)\r\n     */\r\n    matchAll = 5,\r\n\r\n    /**\r\n     * The `Symbol.replace` well-known symbol specifies the method that replaces matched substrings\r\n     * of a string. This function is called by the String.prototype.replace() method.\r\n     *\r\n     * For more information, [RegExp.prototype[Symbol.replace]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@replace)()\r\n     * and [String.prototype.replace](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/replace)().\r\n     *\r\n     * See: [Symbol.replace](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace)\r\n     */\r\n    replace = 6,\r\n\r\n    /**\r\n     * The `Symbol.search` well-known symbol specifies the method that returns the index within a\r\n     * string that matches the regular expression. This function is called by the\r\n     * [String.prototype.search()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/search)\r\n     * method.\r\n     *\r\n     * For more information, see [RegExp.prototype[\\@\\@search]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@search)()\r\n     * and [String.prototype.search()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/search).\r\n     *\r\n     * See: [Symbol.species](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)\r\n     */\r\n    search = 7,\r\n\r\n    /**\r\n     * The well-known symbol `Symbol.species` specifies a function-valued property that the constructor\r\n     * function uses to create derived objects.\r\n     * See: [Symbol.species](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)\r\n     */\r\n    species = 8,\r\n\r\n    /**\r\n     * The `Symbol.split` well-known symbol specifies the method that splits a string at the indices\r\n     * that match a regular expression. This function is called by the String.prototype.split() method.\r\n     *\r\n     * For more information, see [RegExp.prototype[\\@\\@split]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@split)()\r\n     * and [String.prototype.split()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/split).\r\n     * See: [Symbol.split](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n     */\r\n    split = 9,\r\n\r\n    /**\r\n     * With the help of the `Symbol.toPrimitive` property (used as a function value), an object can be\r\n     * converted to a primitive value. The function is called with a string argument hint, which\r\n     * specifies the preferred type of the result primitive value. The hint argument can be one of\r\n     * \"number\", \"string\", and \"default\".\r\n     *\r\n     * See: [Symbol.toPrimitive](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)\r\n     */\r\n    toPrimitive = 10,\r\n\r\n    /**\r\n     * The `Symbol.toStringTag` well-known symbol is a string valued property that is used in the\r\n     * creation of the default string description of an object. It is accessed internally by the\r\n     * [Object.prototype.toString](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)()\r\n     * method.\r\n     *\r\n     * See: [Symbol.toStringTag](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag)\r\n     */\r\n    toStringTag = 11,\r\n\r\n    /**\r\n     * The `Symbol.unscopables` well-known symbol is used to specify an object value of whose own\r\n     * and inherited property names are excluded from the with environment bindings of the associated\r\n     * object.\r\n     *\r\n     * See: [Symbol.unscopables](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables)\r\n     */\r\n    unscopables = 12\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport const _wellKnownSymbolMap = /*#__PURE__*/createEnumKeyMap<typeof WellKnownSymbols>({\r\n    asyncIterator: WellKnownSymbols.asyncIterator,\r\n    hasInstance: WellKnownSymbols.hasInstance,\r\n    isConcatSpreadable: WellKnownSymbols.isConcatSpreadable,\r\n    iterator: WellKnownSymbols.iterator,\r\n    match: WellKnownSymbols.match,\r\n    matchAll: WellKnownSymbols.matchAll,\r\n    replace: WellKnownSymbols.replace,\r\n    search: WellKnownSymbols.search,\r\n    species: WellKnownSymbols.species,\r\n    split: WellKnownSymbols.split,\r\n    toPrimitive: WellKnownSymbols.toPrimitive,\r\n    toStringTag: WellKnownSymbols.toStringTag,\r\n    unscopables: WellKnownSymbols.unscopables\r\n});\r\n\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { safe } from \"../helpers/safe\";\r\nimport { UNDEFINED } from \"./constants\";\r\n\r\nconst GLOBAL_CONFIG_KEY = \"__tsUtils$gblCfg\";\r\n\r\ndeclare let globalThis: Window;\r\ndeclare let global: Window;\r\ndeclare let self: any;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for holding the global polyfill symbols\r\n */\r\nexport interface _GlobalPolySymbols {\r\n    k: { [key: string ]: symbol },\r\n    s: { [sym: symbol ]: string },\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for defining global test hooks\r\n */\r\nexport interface _GlobalTestHooks {\r\n    lzy?: boolean;\r\n}\r\n\r\nexport interface TsUtilsGlobalConfig extends _GlobalTestHooks {\r\n    gblSym?: _GlobalPolySymbols,\r\n}\r\n\r\nlet _globalCfg: { [key: string ]: any };\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to get the current global value\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getGlobalValue(): Window {\r\n    var result: Window;\r\n\r\n    if (typeof globalThis !== UNDEFINED) {\r\n        result = globalThis;\r\n    }\r\n\r\n    if (!result && typeof self !== UNDEFINED) {\r\n        result = self;\r\n    }\r\n\r\n    if (!result && typeof window !== UNDEFINED) {\r\n        result = window;\r\n    }\r\n\r\n    if (!result && typeof global !== UNDEFINED) {\r\n        result = global;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Gets/Sets the named value from the global config store, this is used to share configuration across\r\n * multiple modules. Primarily used for poly symbol and test hooks.\r\n * @returns The globally registered value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getGlobalConfig(): TsUtilsGlobalConfig {\r\n    if (!_globalCfg) {\r\n        let gbl = safe(_getGlobalValue).v || {};\r\n        _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};\r\n    }\r\n\r\n    return _globalCfg;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { ArrSlice, CALL, NULL_VALUE } from \"./constants\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to run the named function on the passed first argument, this does not support polyfill\r\n * or prototype fallback, so the function must exist on the provided first argument.\r\n * If the first argument is null, undefined or the function does not exist an exception will be thrown\r\n * by the runtime\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapInstFunction:<R, T>(funcName: keyof T) => <T>(this: T, ..._args:any) => R = (/*__PURE__*/_unwrapFunctionWithPoly);\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunction:<R, T>(funcName: keyof T, clsProto: T) => <T>(this: T, ..._args:any) => R = (/*__PURE__*/_unwrapFunctionWithPoly);\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @param polyFunc - The function to call if not available on the thisArg, act like the polyfill\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _unwrapFunctionWithPoly<T, P extends (...args: any) => any>(funcName: keyof T, clsProto?: T, polyFunc?: P) {\r\n    let clsFn = clsProto ? clsProto[funcName] : NULL_VALUE;\r\n\r\n    return function(thisArg: any): ReturnType<P> {\r\n        let theFunc = (thisArg ? thisArg[funcName] : NULL_VALUE) || clsFn;\r\n        if (theFunc || polyFunc) {\r\n            let theArgs = arguments;\r\n            return ((theFunc || polyFunc) as Function).apply(thisArg, theFunc ? ArrSlice[CALL](theArgs, 1) : theArgs);\r\n        }\r\n\r\n        throwTypeError(\"\\\"\" + asString(funcName) + \"\\\" not defined for \" + dumpObj(thisArg));\r\n    };\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to lookup and return the named property from the first argument (which becomes the this)\r\n *\r\n * @since 0.4.2\r\n * @typeParam T - The type of the object which contains the propName\r\n * @param propName - The property name\r\n * @returns The value of the property\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _unwrapProp<T>(propName: keyof T) {\r\n    return function (thisArg: T) {\r\n        return thisArg[propName];\r\n    };\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The mathMin() function returns the lowest-valued number passed into it, or NaN if any\r\n * parameter isn't a number and can't be converted into one.\r\n *\r\n * If no arguments are given, the result is Infinity.\r\n *\r\n * If at least one of arguments cannot be converted to a number, the result is NaN.\r\n *\r\n * @since 0.4.2\r\n * @group Math\r\n * @param values - Zero or more numbers among which the lowest value will be selected and returned.\r\n * @returns The smallest of the given numbers. If any one or more of the parameters cannot\r\n * be converted into a number, NaN is returned. The result is Infinity if no parameters are provided.\r\n * @example\r\n * ```ts\r\n * const x = 10, y = -20;\r\n * const z = Math.min(x, y); // -20\r\n * ```\r\n */\r\nexport const mathMin: (...values: number[]) => number = (/*#__PURE__*/_pureRef<typeof Math.min>(MathCls, \"min\"));\r\n\r\n/**\r\n * The `mathMax()` function returns the largest of the zero or more numbers given as input\r\n * parameters, or NaN if any parameter isn't a number and can't be converted into one.\r\n *\r\n * If no arguments are given, the result is -Infinity.\r\n *\r\n * If at least one of arguments cannot be converted to a number, the result is NaN.\r\n *\r\n * @since 0.4.2\r\n * @group Math\r\n * @param values - Zero or more numbers among which the largest value will be selected and returned.\r\n * @returns The largest of the given numbers. If any one or more of the parameters cannot be\r\n * converted into a number, NaN is returned. The result is -Infinity if no parameters are provided.\r\n * @example\r\n * ```ts\r\n * mathMax(10, 20);   //  20\r\n * mathMax(-10, -20); // -10\r\n * mathMax(-10, 20);  //  20\r\n * ```\r\n */\r\nexport const mathMax: (...values: number[]) => number = (/*#__PURE__*/_pureRef<typeof Math.min>(MathCls, \"max\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n\r\n/**\r\n * The `strSlice()` method extracts a section of a string and returns it as a new string, without\r\n * modifying the original string.\r\n * `strSlice()` extracts the text from one string and returns a new string. Changes to the text in one\r\n * string do not affect the other string.\r\n * `strSlice()` extracts up to but not including endIndex. str.slice(1, 4) extracts the second character\r\n * through the fourth character (characters indexed 1, 2, and 3).\r\n * As an example, strSlice(2, -1) extracts the third character through the second to last character\r\n * in the string.\r\n * @group String\r\n * @param value - The value to haveextract a number\r\n * @param beginIndex - The zero-based index at which to begin extraction.\r\n * If `beginIndex` is negative, `strSlice()` begins extraction from `value.length + beginIndex`.\r\n * (E.g. `strSlice(\"test\", -2)` returns \"st\")\r\n * If `beginIndex` is omitted, undefined, or cannot be converted to a number (using Number(`beginIndex`)),\r\n * strSlice() begins extraction from the beginning of the string. (E.g. `strSlice(\"test\")` returns \"test\")\r\n * If `beginIndex` is greater than or equal to `value.length`, an empty string is returned.\r\n * (E.g. `strSlice(\"test\", 4)` returns \"\")\r\n * @param endIndex - The index of the first character to exclude from the returned substring.\r\n * If `endIndex` is omitted, undefined, or cannot be converted to a number (using Number(`endIndex`))\r\n * strSlice() extracts to the end of the string. (E.g. `strSlice(\"test\", 2)` returns \"st\")\r\n * If `endIndex` is greater than `value.length`, strSlice() also extracts to the end of the string.\r\n * (E.g. `strSlice(\"test\", 2, 10)` returns \"st\")\r\n * If `endIndex` is negative, `strSlice()` treats it as `value.length + endIndex`. (E.g, if `endIndex`\r\n * is -2, it is treated as `value.length - 2` and `strSlice(\"test\", 1, -2)` returns \"e\") .\r\n * If `endIndex` represents a position that is before the one represented by startIndex, `strSlice()`\r\n * returns \"\". (E.g `strSlice(\"test\", 2, -10)`, `strSlice(\"test\", -1, -2)` or `strSlice(\"test\", 3, 2)`).\r\n * @returns A new string containing the extracted section of the string.\r\n */\r\nexport const strSlice: (value: string, beginIndex: number, endIndex?: number) => string = (/*#__PURE__*/_unwrapFunction(\"slice\", StrProto));\r\n\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isNullOrUndefined, isUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY, LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction, _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { mathMax } from \"../math/min_max\";\r\nimport { strSlice } from \"./slice\";\r\n\r\n/**\r\n * The `strSubstring()` method returns the part of the string between the start and end indexes, or to the end of the string.\r\n *\r\n * `strSubstring()` extracts characters from indexStart up to but not including indexEnd. In particular:\r\n * - If `indexEnd` is omitted, strSubstring() extracts characters to the end of the string.\r\n * - If `indexStart` is equal to indexEnd, strSubstring() returns an empty string.\r\n * - If `indexStart` is greater than indexEnd, then the effect of strSubstring() is as if the two arguments were swapped; see example below.\r\n *\r\n * Any argument value that is less than 0 or greater than `value.length` is treated as if it were 0 and `value.length`, respectively.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param indexStart - The index of the first character to include in the returned substring.\r\n * @param indexEnd - The index of the first character to exclude from the returned substring.\r\n * @return A new string containing the specified part of the given string\r\n * @example\r\n * ```ts\r\n * const anyString = 'Nevware21';\r\n * // Displays 'N'\r\n * console.log(strSubstring(anyString, 0, 1));\r\n * console.log(strSubstring(anyString, 1, 0));\r\n *\r\n * // Displays 'Nevwar'\r\n * console.log(strSubstring(anyString, 0, 6));\r\n *\r\n * // Displays 'are21'\r\n * console.log(strSubstring(anyString, 4));\r\n *\r\n * // Displays 'are'\r\n * console.log(strSubstring(anyString, 4, 7));\r\n *\r\n * // Displays '21'\r\n * console.log(strSubstring(anyString, 7, 4));\r\n *\r\n * // Displays 'Nevware'\r\n * console.log(strSubstring(anyString, 0, 7));\r\n *\r\n * // Displays 'Nevware21'\r\n * console.log(strSubstring(anyString, 0, 10));\r\n * ```\r\n */\r\nexport const strSubstring: (value: string, indexStart: number, indexEnd?: number) => string = (/*#__PURE__*/_unwrapFunction(\"substring\", StrProto));\r\n\r\n/**\r\n * The strSubstr() method returns a portion of the string, starting at the specified index and extending for a given\r\n * number of characters afterwards.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param start - The index of the first character to include in the returned substring.\r\n * @param length - The number of characters to extract.\r\n * @returns A new string containing the specified part of the given string.\r\n */\r\nexport const strSubstr: (value: string, start: number, length?: number) => string = (/*#__PURE__*/_unwrapFunctionWithPoly(\"substr\", StrProto, polyStrSubstr));\r\n\r\n/**\r\n * The polyStrSubstr() method returns a portion of the string, starting at the specified index and extending for a given\r\n * number of characters afterwards.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @group Polyfill\r\n * @param value - The string value to return the substring from.\r\n * @param start - The index of the first character to include in the returned substring.\r\n * @param length - The number of characters to extract.\r\n * @returns A new string containing the specified part of the given string.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrSubstr(value: string, start: number, length?: number): string {\r\n    if (isNullOrUndefined(value)) {\r\n        throwTypeError(\"Invalid \" + dumpObj(value));\r\n    }\r\n\r\n    if (length < 0) {\r\n        return EMPTY;\r\n    }\r\n\r\n    // If start is omitted or undefined, its treated as zero\r\n    start = start || 0;\r\n\r\n    if (start < 0) {\r\n        start = mathMax(start + value[LENGTH], 0);\r\n    }\r\n\r\n    if (isUndefined(length)) {\r\n        return strSlice(value, start);\r\n    }\r\n\r\n    return strSlice(value, start, start + length);\r\n}\r\n\r\n/**\r\n * Returns a substring of the string starting from the left.\r\n *\r\n * `strLeft()` extracts the number of characters from left of the string up to the count. In particular:\r\n * - If `count` is less than zero, strLeft() returns an empty string.\r\n * - If `count` is less than `value.length`, strLeft() returns a new string with the `count` number of characters from the left of the string.\r\n * - If `count` is greater than `value.length`, then the value original value is returned.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param count - The number of characters to extract\r\n * @returns The substring based on the count number of characters from the right\r\n * @example\r\n * ```ts\r\n * strLeft(\"Nevware21\", -1); // \"\"\r\n * strLeft(\"Nevware21\", 0); // \"\"\r\n * strLeft(\"Nevware21\", 1); // \"N\"\r\n * strLeft(\"Nevware21\", 3); // \"Nev\"\r\n * strLeft(\"Nevware21\", 21); // \"Nevware21\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function strLeft(value: string, count: number): string {\r\n    return strSubstring(value, 0, count);\r\n}\r\n\r\n/**\r\n * Returns a substring of the string starting from the right.\r\n *\r\n * `strRight()` extracts the number of characters from right of the string up to the count. In particular:\r\n * - If `count` is less than zero, strRight() returns an empty string.\r\n * - If `count` is less than `value.length`, strRight() returns a new string with the `count` number of characters from the right of the string.\r\n * - If `count` is greater than `value.length`, then the value original value is returned.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param count - The number of characters to extract\r\n * @returns The substring based on the count number of characters from the right\r\n * @example\r\n * ```ts\r\n * strRight(\"Nevware21\", -1); // \"\"\r\n * strRight(\"Nevware21\", 0); // \"\"\r\n * strRight(\"Nevware21\", 1); // \"1\"\r\n * strRight(\"Nevware21\", 3); // \"e21\"\r\n * strRight(\"Nevware21\", 21); // \"Nevware21\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function strRight(value: string, count: number): string {\r\n    return count <= 0 ? EMPTY : (value[LENGTH] > count ? strSlice(value, -count) : value);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { WellKnownSymbols, _wellKnownSymbolMap } from \"../symbol/well_known\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { POLYFILL_TAG, SYMBOL, TO_STRING } from \"../internal/constants\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { _GlobalPolySymbols, _getGlobalConfig } from \"../internal/global\";\r\nimport { strSubstring } from \"../string/substring\";\r\nimport { objKeys } from \"../object/object\";\r\n\r\nconst UNIQUE_REGISTRY_ID = \"_urid\";\r\nlet _polySymbols: _GlobalPolySymbols;\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _globalSymbolRegistry(): _GlobalPolySymbols {\r\n    if (!_polySymbols) {\r\n        let gblCfg = _getGlobalConfig();\r\n        _polySymbols = gblCfg.gblSym = gblCfg.gblSym || { k: {}, s:{} };\r\n    }\r\n\r\n    return _polySymbols;\r\n}\r\n\r\nlet _wellKnownSymbolCache: { [key in keyof typeof WellKnownSymbols ]: symbol };\r\n\r\n/**\r\n * Returns a new (polyfill) Symbol object for the provided description that's guaranteed to be unique.\r\n * Symbols are often used to add unique property keys to an object that won't collide with keys any\r\n * other code might add to the object, and which are hidden from any mechanisms other code will\r\n * typically use to access the object. That enables a form of weak encapsulation, or a weak form of\r\n * information hiding.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param description - The description of the symbol\r\n * @returns A new polyfill version of a Symbol object\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyNewSymbol(description?: string | number): symbol {\r\n    let theSymbol: symbol = {\r\n        description: asString(description),\r\n        toString: () => SYMBOL + \"(\" + description + \")\"\r\n    } as symbol;\r\n    \r\n    // Tag the symbol so we know it a polyfill\r\n    theSymbol[POLYFILL_TAG] = true;\r\n\r\n    return theSymbol;\r\n}\r\n\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param key - key to search for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polySymbolFor(key: string): symbol {\r\n    let registry = _globalSymbolRegistry();\r\n    if (!objHasOwn(registry.k, key)) {\r\n        let newSymbol = polyNewSymbol(key);\r\n        let regId = objKeys(registry.s).length;\r\n        newSymbol[UNIQUE_REGISTRY_ID] = () => regId + \"_\" + newSymbol[TO_STRING]();\r\n        registry.k[key] = newSymbol;\r\n        registry.s[newSymbol[UNIQUE_REGISTRY_ID]()] = asString(key);\r\n    }\r\n\r\n    return registry.k[key];\r\n}\r\n\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param sym - Symbol to find the key for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polySymbolKeyFor(sym: symbol): string | undefined {\r\n    if (!sym || !sym[TO_STRING] || strSubstring(sym[TO_STRING](), 0, 6) != SYMBOL) {\r\n        throwTypeError((sym as any) + \" is not a symbol\");\r\n    }\r\n\r\n    const regId = sym[POLYFILL_TAG] && sym[UNIQUE_REGISTRY_ID] && sym[UNIQUE_REGISTRY_ID]();\r\n\r\n    return regId ? _globalSymbolRegistry().s[regId] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the polyfill version of a well-known global symbol, this will only return\r\n * known values.\r\n * @example\r\n * ```ts\r\n * // Always returns the polyfill version, even if Symbols are supported in the runtime\r\n * polyGetKnownSymbol(\"toStringTag\") === polyGetKnownSymbol(\"toStringTag\");                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) === polyGetKnownSymbol(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== Symbol.toStringTag;                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== Symbol.toStringTag; // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polySymbolFor(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polySymbolFor(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polyNewSymbol(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polyNewSymbol(\"toStringTag\"); // true\r\n * ```\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @returns The value of the property if present\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyGetKnownSymbol(name: string | WellKnownSymbols): symbol {\r\n    !_wellKnownSymbolCache && (_wellKnownSymbolCache = {} as any);\r\n    let result: symbol;\r\n    let knownName: WellKnownSymbols = _wellKnownSymbolMap[name];\r\n    if (knownName) {\r\n        result = _wellKnownSymbolCache[knownName] = _wellKnownSymbolCache[knownName] || polyNewSymbol(SYMBOL + \".\" + knownName);\r\n    }\r\n\r\n    return result\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { _GlobalTestHooks, _getGlobalConfig } from \"../internal/global\";\r\nimport { objDefineProp } from \"../object/define\";\r\nimport { ICachedValue } from \"./cache\";\r\n\r\n/**\r\n * @internal\r\n * Internal flag which is set by the public {@link setBypassLazyCache}, should not be externally exported\r\n */\r\nexport let _globalLazyTestHooks: _GlobalTestHooks;\r\n\r\nexport function _initTestHooks() {\r\n    _globalLazyTestHooks = _getGlobalConfig();\r\n}\r\n\r\n/**\r\n * Interface of the object returned by the {@link getLazy} instance\r\n * @since 0.4.5\r\n * @group Lazy\r\n */\r\nexport interface ILazyValue<T> extends ICachedValue<T> {\r\n    /**\r\n     * Returns the current cached value from the lazy lookup, if the callback function has not yet occurred\r\n     * accessing the value will cause the lazy evaluation to occur and the result will be returned.\r\n     */\r\n    v: T,\r\n\r\n    /**\r\n     * Identifies if this instance is bypassing the internal caching mechanism which is used for testing\r\n     */\r\n    b?: boolean\r\n}\r\n\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * @since 0.4.5\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getLazy<T>(cb: () => T): ILazyValue<T> {\r\n    let lazyValue = { } as ILazyValue<T>;\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                objDefineProp(lazyValue, \"v\", {\r\n                    value: result\r\n                });\r\n            }\r\n\r\n            lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return lazyValue;\r\n}\r\n\r\n/**\r\n * Test Hook function used to cause the internal caching of objects to be bypassed, this should never\r\n * be enabled for production as it has additional performance impact caused by the repetitive creation\r\n * of the lazy wrappers.\r\n * @group Lazy\r\n * @since 0.5.0\r\n * @param newValue - When `true` will cause all new lazy implementations to bypass the cached lookup.\r\n */\r\nexport function setBypassLazyCache(newValue: boolean) {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    _globalLazyTestHooks.lzy = newValue;\r\n}\r\n\r\n/**\r\n * Create and return a writable {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally. The\r\n * value may be set as many times as required, if the callback has not been called when you set the value\r\n * it will never get called.\r\n * @since 0.11.7\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new writable {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * // Setting the value\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue = \"new Value\";\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will set the value to be set explicitly and the callback\r\n *     // will now never occur and the result will be cached\r\n *     cachedValue.v = theValue;\r\n * }\r\n *\r\n * // Accessing the value again will cause the previously set value to be returned.\r\n * theValue === cachedValue.v;  // true\r\n * ```\r\n */\r\nexport function getWritableLazy<T>(cb: () => T): ILazyValue<T> {\r\n    let lazyValue = { } as ILazyValue<T>;\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n    let _setValue = (newValue: T) => {\r\n        // Just replace the value\r\n        objDefineProp(lazyValue, \"v\", {\r\n            value: newValue,\r\n            writable: true\r\n        });\r\n\r\n        if (lazyValue.b) {\r\n            delete lazyValue.b;\r\n        }\r\n    };\r\n\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                _setValue(result);\r\n            }\r\n            \r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n\r\n            return result;\r\n        },\r\n        set: _setValue\r\n    });\r\n\r\n    return lazyValue;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2024 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\n\r\n/**\r\n * A generic interface for holding a cached value\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam T - The type of the value to be cached\r\n * @example\r\n * ```ts\r\n * let cachedValue: ICachedValue<string> = {\r\n *    v: \"some value\"\r\n * };\r\n * ```\r\n */\r\nexport interface ICachedValue<T> {\r\n    /**\r\n     * Returns the current cached value\r\n     */\r\n    v: T,\r\n\r\n    /**\r\n     * Returns the current cached value\r\n     */\r\n    toJSON(): T;\r\n}\r\n\r\n/**\r\n * Create and return a readonly {@link ICachedValue} instance that is populated with the provided value.\r\n * This is useful when you want to cache a previously fetched value and return it without having to re-fetch\r\n * it again.\r\n * This is a lightweight version of {@link getLazy} which does not support any expiration or invalidation,\r\n * it also will not honor the {@link setBypassLazyCache} setting and will always return the provided value.\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam T - The type of the value to be cached\r\n * @param value - The value to cache\r\n * @returns A new {@link ICachedValue} instance which wraps the provided value\r\n * @example\r\n * ```ts\r\n * let cachedValue = createCachedValue(\"some value\");\r\n * // cachedValue.v === \"some value\"\r\n *\r\n * JSON.stringify(cachedValue) === '{\"v\":\"some value\"}';\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createCachedValue<T>(value: T): ICachedValue<T> {\r\n    return objDefineProp({\r\n        toJSON: () => value\r\n    }, \"v\", { value }) as ICachedValue<T>;\r\n}\r\n\r\n/**\r\n * Create and return a readonly {@link ICachedValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * will not cause re-execution of the callback as the result from the first call is cached internally.\r\n * This is a lightweight version of {@link getLazy} which does not support any expiration or invalidation,\r\n * it also will not honor the {@link setBypassLazyCache} setting and will always return the provided value.\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam T - The type of the value to be cached\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createDeferredCachedValue<T>(cb: () => T): ICachedValue<T> {\r\n    let theValue: any = {\r\n        toJSON: () => theValue.v\r\n    };\r\n\r\n    return objDefineProp(theValue as ICachedValue<T>, \"v\", {\r\n        get: () => {\r\n            let result = cb();\r\n            cb = NULL_VALUE;\r\n            objDefineProp(theValue, \"v\", { value: result });\r\n            return result;\r\n        },\r\n        configurable: true\r\n    });\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalValue } from \"../internal/global\";\r\nimport { ILazyValue, _globalLazyTestHooks, _initTestHooks, getLazy } from \"./lazy\";\r\nimport { ICachedValue, createCachedValue } from \"./cache\";\r\nimport { safe } from \"./safe\";\r\n\r\nconst WINDOW = \"window\";\r\n\r\ndeclare let WorkerGlobalScope: any;\r\ndeclare let self: any;\r\n\r\nlet _cachedGlobal: ICachedValue<Window>;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Returns a function which will return the named global object if available, will return `null` if the object is not available.\r\n * @param getFn - The function to use to get the global object\r\n * @param instName - The name of the global object to get, may be any valid PropertyKey (string, number or symbol)\r\n * @returns A function which will return the named global object if available, the funcion will return `null` if the object is not available.\r\n */\r\nexport function _getGlobalInstFn<T>(getFn: (...args: unknown[]) => T, theArgs?: unknown[]): () => T | null | undefined {\r\n    let cachedValue: ICachedValue<T>;\r\n    return function() {\r\n        !_globalLazyTestHooks && _initTestHooks();\r\n        if (!cachedValue || _globalLazyTestHooks.lzy) {\r\n            cachedValue = createCachedValue(safe(getFn, theArgs).v);\r\n        }\r\n        \r\n        return cachedValue.v;\r\n    }\r\n}\r\n\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the named global\r\n * value if available, will return `null` if the named global object is not available or if the runtime\r\n * throws an exception when attempting to access the global object.\r\n * Unlike {@link getInst} the value is cached after the first access, so if the global value changes after\r\n * the initial fetch the original cached value is still returned.\r\n * @since 0.9.5\r\n * @group Environment\r\n * @group Lazy\r\n * @group Safe\r\n * @param name - The name of the global object to get, may be any valid PropertyKey (string, number or symbol)\r\n * @returns A new readonly {@link ILazyValue} instance which will lazily attempt to return the globally\r\n * available named instance.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = lazySafeGetInst(\"myGlobal\");\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * let promiseCls = lazySafeGetInst(\"Promise\");\r\n * // null if Promise is not supported in the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function lazySafeGetInst<T>(name: string | number | symbol) : ILazyValue<T> {\r\n    return getLazy(() => safe(getInst<T>, [name]).v || UNDEF_VALUE);\r\n}\r\n\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions. And this caches the lookup of the global as in some environments\r\n * this can be an expensive operation.\r\n * @group Environment\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n */\r\nexport function getGlobal(useCached?: boolean): Window {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    if (!_cachedGlobal || useCached === false || _globalLazyTestHooks.lzy) {\r\n        _cachedGlobal = createCachedValue(safe(_getGlobalValue).v || NULL_VALUE);\r\n    }\r\n\r\n    return _cachedGlobal.v;\r\n}\r\n\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @group Environment\r\n * @param name - The globally named object, may be any valid property key (string, number or symbol)\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = getInst(\"myGlobal\");\r\n * // cachedValue === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // getInst(\"myGlobal\") === \"Darkness\"\r\n *\r\n * let promiseCls = getInst(\"Promise\");\r\n * // May throw if the global is not supported by the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getInst<T>(name: string | number | symbol, useCached?: boolean): T | null {\r\n    let gbl: any;\r\n    if (!_cachedGlobal || useCached === false) {\r\n        gbl = getGlobal(useCached);\r\n    } else {\r\n        gbl = _cachedGlobal.v;\r\n    }\r\n\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name] as T;\r\n    }\r\n\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === WINDOW) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        try {\r\n            return window as T;\r\n        } catch (e) {\r\n            // Ignore\r\n        }\r\n    }\r\n\r\n    return NULL_VALUE;\r\n}\r\n\r\n/**\r\n * Identify whether the runtime contains a `document` object\r\n * @group Environment\r\n * @returns - True if a `document` exists\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasDocument(): boolean {\r\n    return !!( /*#__PURE__*/getDocument());\r\n}\r\n\r\n/**\r\n * Return the global `document` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getDocument = (/*#__PURE__*/_getGlobalInstFn<Document>(getInst, [\"document\"]));\r\n\r\n/**\r\n * Identify whether the runtime contains a `window` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasWindow(): boolean {\r\n    return !!( /*#__PURE__*/getWindow());\r\n}\r\n\r\n/**\r\n * Return the global `window` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getWindow = (/*#__PURE__*/_getGlobalInstFn<Window>(getInst, [WINDOW]));\r\n\r\n/**\r\n * Identify whether the runtimne contains a `navigator` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasNavigator(): boolean {\r\n    return !!( /*#__PURE__*/getNavigator());\r\n}\r\n\r\n/**\r\n * Returns the global `navigator` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getNavigator = (/*#__PURE__*/_getGlobalInstFn<Navigator>(getInst, [\"navigator\"]));\r\n\r\n/**\r\n * Identifies whether the runtime contains a `history` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasHistory(): boolean {\r\n    return !!( /*#__PURE__*/getHistory());\r\n}\r\n\r\n/**\r\n * Returns the global `history` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getHistory = (/*#__PURE__*/_getGlobalInstFn<History>(getInst, [\"history\"]));\r\n\r\n/**\r\n * Simple method to determine if we are running in a node environment\r\n * @group Environment\r\n * @returns True if you are\r\n */\r\nexport const isNode = (/*#__PURE__*/_getGlobalInstFn<boolean>(() => {\r\n    return !!( /*#__PURE__*/safe(() => (process && (process.versions||{}).node)).v);\r\n}));\r\n\r\n/**\r\n * Helper to identify if you are running as a Dedicated, Shared or Service worker\r\n * @group Environment\r\n * @returns True if the environment you are in looks like a Web Worker\r\n */\r\nexport const isWebWorker = (/*#__PURE__*/_getGlobalInstFn<boolean>(() => {\r\n    return !!( /*#__PURE__*/safe(() => self && self instanceof WorkerGlobalScope).v);\r\n}));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, SYMBOL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { polyGetKnownSymbol, polyNewSymbol, polySymbolFor, polySymbolKeyFor } from \"../polyfills/symbol\";\r\nimport { WellKnownSymbols, _wellKnownSymbolMap } from \"./well_known\";\r\nimport { _createIs } from \"../helpers/base\";\r\nimport { _globalLazyTestHooks, _initTestHooks } from \"../helpers/lazy\";\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { safe } from \"../helpers/safe\";\r\nimport { getInst } from \"../helpers/environment\";\r\n\r\nlet _symbol: ICachedValue<Symbol>;\r\nlet _symbolFor: ICachedValue<(key: string) => symbol>;\r\nlet _symbolKeyFor: ICachedValue<(sym: symbol) => string | undefined>;\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _initSymbol() {\r\n    _symbol = (/*#__PURE__*/createCachedValue(safe(getInst<Symbol>, [SYMBOL]).v));\r\n\r\n    return _symbol;\r\n}\r\n\r\nfunction _getSymbolKey<R>(key: string) {\r\n    let gblSym = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n\r\n    return (gblSym.v ? gblSym.v[key] : UNDEF_VALUE) as R;\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a symbol.\r\n * @group Symbol\r\n * @param value - Value to be checked.\r\n * @return True if the value is a symbol, false otherwise.\r\n */\r\nexport const isSymbol: (value: any) => value is symbol = (/*#__PURE__*/_createIs<symbol>(\"symbol\"));\r\n\r\n/**\r\n * Helper to identify whether the runtime support the Symbols either via native or an installed polyfill\r\n * @group Symbol\r\n * @returns true if Symbol's are support otherwise false\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasSymbol(): boolean {\r\n    return !!( /*#__PURE__*/getSymbol());\r\n}\r\n\r\n/**\r\n * If Symbols are supported then attempt to return the named Symbol\r\n * @group Symbol\r\n * @returns The value of the named Symbol (if available)\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getSymbol(): Symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    \r\n    // Get the current lazy symbol or cause it to get initialized\r\n    return ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol()).v;\r\n}\r\n\r\n/**\r\n * If Symbols are supported then get the property of the global Symbol, if Symbol's are\r\n * not supported and noPoly is true it returns null. Used to access the well known symbols.\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @param noPoly - Flag indicating whether to return a polyfill if symbols are not supported.\r\n * @returns The value of the property if present\r\n * @example\r\n * ```ts\r\n * // If Symbol is supported in the runtime\r\n * getKnownSymbol(\"toStringTag\") === Symbol.toStringTag;                // true\r\n * getKnownSymbol(WellKnownSymbols.toStringTag) === Symbol.toStringTag; // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getKnownSymbol<T = symbol>(name: string | WellKnownSymbols, noPoly?: boolean): T {\r\n    let knownName = _wellKnownSymbolMap[name];\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Get the current lazy symbol or cause it to get initialized\r\n    let sym = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n    \r\n    return sym.v ? sym.v[knownName || name] : (!noPoly ? polyGetKnownSymbol(name) : UNDEF_VALUE);\r\n}\r\n\r\n/**\r\n * Returns a new unique Symbol value. If noPoly is true and symbols are not supported\r\n * then this will return null.\r\n * @group Symbol\r\n * @param description - Description of the new Symbol object.\r\n * @param noPoly - Flag indicating whether to return a polyfil if symbols are not supported.\r\n * @returns The new symbol\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function newSymbol(description?: string | number, noPoly?: boolean): symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Get the current lazy symbol or cause it to get initialized\r\n    let sym = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n\r\n    return sym.v ? (sym.v as any)(description) : (!noPoly ? polyNewSymbol(description) : NULL_VALUE);\r\n}\r\n\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key. This will always return a polyfill if symbols\r\n * are not supported.\r\n * @group Symbol\r\n * @param key - key to search for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function symbolFor(key: string): symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Cause lazy symbol to get initialized\r\n    _symbolFor = ((!_globalLazyTestHooks.lzy ? _symbolFor : 0) || (/*#__PURE__*/createCachedValue(safe(_getSymbolKey<typeof Symbol.for>, [\"for\"]).v)));\r\n\r\n    return (_symbolFor.v || polySymbolFor)(key);\r\n}\r\n\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined. This will always attempt to lookup the polyfill\r\n * implementation if symbols are not supported\r\n * @group Symbol\r\n * @param sym - Symbol to find the key for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function symbolKeyFor(sym: symbol): string | undefined {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Cause lazy symbol to get initialized\r\n    _symbolKeyFor = ((!_globalLazyTestHooks.lzy ? _symbolKeyFor : 0) || (/*#__PURE__*/createCachedValue(safe(_getSymbolKey<typeof Symbol.keyFor>, [\"keyFor\"]).v)));\r\n\r\n    return (_symbolKeyFor.v || polySymbolKeyFor)(sym);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { CALL, NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\nimport { isIterator } from \"./iterator\";\r\n\r\nlet _iterSymbol: ICachedValue<symbol>;\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in the iterator or iterator returned by\r\n * the iterable and processed in the same order as returned by the iterator. As with the {@link arrForEach}\r\n * you CAN stop / break the iteration by returning -1 from the`callbackFn` function.\r\n *\r\n * The order of processing is not reset if you add or remove elements to the iterator, the actual behavior\r\n * will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @remarks\r\n * If Symbols are NOT supported then the iterable MUST be using the same polyFill for the well know symbols,\r\n * if you are targetting a mixed environment you SHOULD either\r\n * - only use the polyfill Symbol's provided by this library\r\n * - ensure that you add any symbol polyfills BEFORE these utilities\r\n * iterForOf expects a `synchronous` function.\r\n * iterForOf does not wait for promises. Make sure you are aware of the implications while using\r\n * promises (or async functions) as forEach callback.\r\n *\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the iterator\r\n * @param callbackfn - A `synchronous` function that accepts up to three arguments. iterForOf calls the\r\n * callbackfn function one time for each element returned by the iterator.\r\n * @param thisArg - An object to which the this keyword can refer in the callbackfn function. If thisArg is\r\n * omitted, null or undefined the iterator will be used as the this value.\r\n * @throws Any exception thrown while processing the iterator\r\n * @example\r\n * ```ts\r\n * const items = {\r\n *     'item1': 'value1',\r\n *     'item2': 'value2',\r\n *     'item3': 'value3\r\n * };\r\n * const copyItems = [];\r\n *\r\n * iterForOf(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n * ```\r\n */\r\nexport function iterForOf<T>(iter: Iterator<T> | Iterable<T>, callbackfn: (value: T, count?: number, iter?: Iterator<T>) => void | number, thisArg?: any): void {\r\n    if (iter) {\r\n        if (!isIterator(iter)) {\r\n            !_iterSymbol && (_iterSymbol = createCachedValue(getKnownSymbol(WellKnownSymbols.iterator)));\r\n            iter = iter[_iterSymbol.v] ? iter[_iterSymbol.v]() : NULL_VALUE;\r\n        }\r\n        \r\n        if (isIterator(iter)) {\r\n            let err: { e: any } = UNDEF_VALUE;\r\n            let iterResult: IteratorResult<T> = UNDEF_VALUE;\r\n            try {\r\n                let count = 0;\r\n                while(!(iterResult = iter.next()).done) {\r\n                    if (callbackfn[CALL](thisArg || iter, iterResult.value, count, iter) === -1) {\r\n                        break;\r\n                    }\r\n        \r\n                    count++;\r\n                }\r\n            } catch (failed) {\r\n                err = { e: failed };\r\n                if (iter.throw) {\r\n                    iterResult = NULL_VALUE;\r\n                    iter.throw(err);\r\n                }\r\n            } finally {\r\n                try {\r\n                    if (iterResult && !iterResult.done) {\r\n                        iter.return && iter.return(iterResult);\r\n                    }\r\n                } finally {\r\n                    if (err) {\r\n                        // eslint-disable-next-line no-unsafe-finally\r\n                        throw err.e;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\nimport { isFunction, isStrictNullOrUndefined } from \"../helpers/base\";\r\n\r\n/**\r\n * Checks if the type of value looks like an iterator instance (contains a next function).\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator defaults to any\r\n * @param value - The value to be checked\r\n * @returns True if the value is an Iterator, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterator(null);        // false\r\n * isIterator(undefined);   // false\r\n * isIterator(\"null\");      // false (Strings are iterable but not iterators)\r\n * isIterator([]);          // false (Arrays are iterable but not iterators)\r\n * isIterator({\r\n *     next: function() { return true }\r\n * });                      // true, iterators must contain a \"next\" function\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isIterator<T = any>(value: any): value is Iterator<T> {\r\n    return !!value && isFunction(value.next);\r\n}\r\n\r\n/**\r\n * Checks if the value looks like it is iterable, contains a [symbol.iterator].\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator\r\n * @param value - The value to be checked\r\n * @returns True if the value is an Iterable, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterable(null);        // false\r\n * isIterable(undefined);   // false\r\n * isIterable(\"null\");      // true (Strings are iterable)\r\n * isIterable([]);          // true (Arrays are iterable)\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isIterable<T = any>(value: any): value is Iterable<T> {\r\n    return !isStrictNullOrUndefined(value) && isFunction(value[getKnownSymbol(WellKnownSymbols.iterator)]);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrSlice, CALL } from \"../internal/constants\";\r\n\r\n/**\r\n * The `fnApply` function calls the specified `fn` function with the given `thisArg` as the `this` value,\r\n * and the optional `argArray` arguments provided as an array (or an Array-Like Object).\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnApply()`, you can assign an arbitrary value as this when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * You can also use any kind of object which is ArrayLike as the second parameter. In practice, this means\r\n * that it needs to have a length property, and integer (\"index\") properties in the range (0..length - 1).\r\n * For example, you could use a NodeList, or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`.\r\n * You can also use `arguments`.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param argArray - An array-like object, specifying the arguments with which `fn` should be called, or `null` or\r\n * `undefined` if no arguments should be provided to the function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnApply(Math.max, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 168\r\n *\r\n * let min = fnApply(Math.min, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnApply(module1.getX, module2); // 42\r\n * fnApply(module1.log, module2, [ \"friend\" ]); // my friend : 42\r\n * ```\r\n */\r\nexport function fnApply<F extends (...args: any) => any, T>(fn: F, thisArg: T, argArray?: ArrayLike<any>): ReturnType<F> {\r\n    return fn.apply(thisArg, argArray);\r\n}\r\n\r\n/**\r\n * The `fnCall` function calls the function with the given `thisArg` as the `this` value and with\r\n * al of the `_args` provided as it's `arguments`.\r\n *\r\n * Note: This is almost identical to `fnApply`, except that the function arguments are passed to `fnCall`\r\n * individually as a list, while with `fnApply` that are combined into a single array argument.\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnCall()`, you can pass an arbitrary value as the `this` when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param _args - The zero or more arguments to be passed to the `fn` function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnCall(Math.max, null, 21, 42, 84, 168, 7, 3);\r\n * // 168\r\n *\r\n * let min = fnCall(Math.min, null, 21, 42, 84, 168, 7, 3);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnCall(module1.getX, module2); // 42\r\n * fnCall(module1.log, module2, \"friend\"); // my friend : 42\r\n * ```\r\n */\r\nexport function fnCall<F extends (...args: any) => any, T>(fn: F, thisArg: T, ...argArray: any[]): ReturnType<F>;\r\n\r\n/**\r\n * The `fnCall` function calls the function with the given `thisArg` as the `this` value and with\r\n * al of the `_args` provided as it's `arguments.\r\n *\r\n * > This is almost identical to `fnApply`, except that the function arguments are passed to `fnCall`\r\n * individually as a list, while with `fnApply` that are combined into a single array argument.\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnCall()`, you can pass an arbitrary value as the `this` when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param _args - The zero or more arguments to be passed to the `fn` function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnCall(module1.getX, module2); // 42\r\n * fnCall(module1.log, module2, \"friend\"); // my friend : 42\r\n * ```\r\n */\r\nexport function fnCall<F extends (...args: any) => any, T>(fn: F, thisArg: T): ReturnType<F> {\r\n    return fn.apply(thisArg, ArrSlice[CALL](arguments, 2));\r\n}\r\n\r\n/**\r\n * Creates a new function that when called will set the value of `thisArg` as the `this` keyword\r\n * value whrn calling the provided `fn` instance, and all of the arguments passed to the new\r\n * function will be passed along to the original provided instance.\r\n * @param fn - The function instance to be called\r\n * @param thisArg - The value to be used as the `this` when calling the `fn`\r\n * @returns The value returned by the original `fn` after executing with the provided `thisArg`.\r\n * @since 0.9.8\r\n * @group Function\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * console.log(module1.getX()); // 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     x: 42\r\n * };\r\n *\r\n * module2.getX = fnBind(module1.getX, module2);\r\n * module2.getX(); // 42\r\n *\r\n * // It can also be used to proxy to the original function from the new one\r\n * module2.getX = fnBind(module1.getX, module1);\r\n * module2.getX(); // 21\r\n * ```\r\n */\r\nexport function fnBind<F extends Function, T>(fn: F, thisArg: T, ...argArray: any[]): F;\r\n\r\n/**\r\n * Creates a new function that when called will set the value of `thisArg` as the `this` keyword\r\n * value whrn calling the provided `fn` instance, and all of the arguments passed to the new\r\n * function will be passed along to the original provided instance.\r\n * @param fn - The function instance to be called\r\n * @param thisArg - The value to be used as the `this` when calling the `fn`\r\n * @returns The value returned by the original `fn` after executing with the provided `thisArg`.\r\n * @since 0.9.8\r\n * @group Function\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * console.log(module1.getX()); // 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     x: 42\r\n * };\r\n *\r\n * module2.getX = fnBind(module1.getX, module2);\r\n * module2.getX(); // 42\r\n *\r\n * // It can also be used to proxy to the original function from the new one\r\n * module2.getX = fnBind(module1.getX, module1);\r\n * module2.getX(); // 21\r\n * ```\r\n */\r\nexport function fnBind<F extends Function, T>(fn: F, thisArg: T): F {\r\n    return fn.bind.apply(fn, ArrSlice[CALL](arguments, 1));\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isArray, isUndefined } from \"../helpers/base\";\r\nimport { isIterable, isIterator } from \"../iterator/iterator\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\nimport { fnApply } from \"../funcs/funcs\";\r\n\r\n/**\r\n * Appends the `elms` to the `target` where the elms may be an array, a single object\r\n * or an iterator object\r\n * @group Array\r\n * @group Iterator\r\n * @example\r\n * ```ts\r\n * let theArray = arrAppend([], 1);\r\n * arrAppend(theArray, [ 2, 3, 4 ]);\r\n * arrAppend(theArray, [ \"a\", \"b\", \"c\" ]);\r\n * // theArray is now [ 1, 2, 3, 4, \"a\", \"b\", \"c\" ]\r\n * ```\r\n * @param target - The target array\r\n * @param elms - The item, array of items an iterable or iterator object of items to add to the target\r\n * @returns The passed in target array\r\n * @example\r\n * ```ts\r\n * // Adding a single value\r\n * arrAppend([], undefined);            // []\r\n * arrAppend([], 0);                    // [ 0 ]\r\n * arrAppend([1], undefined);           // [ 1 ]\r\n * arrAppend([1], 2);                   // [ 1, 2 ]\r\n *\r\n * // Adding an array\r\n * arrAppend([], [] as number[]);       // []\r\n * arrAppend([], [0]);                  // [ 0 ]\r\n * arrAppend([1], []);                  // [ 1 ]\r\n * arrAppend([1], [2]);                 // [ 1, 2 ]\r\n *\r\n * // Adding with an iterator\r\n * arrAppend([], ([] as number[]).values());    // []\r\n * arrAppend([], [0].values());         // [ 0 ]\r\n * arrAppend([1], [].keys());           // [ 1 ]\r\n * arrAppend([1], [2].values());        // [ 1, 2 ]\r\n * arrAppend([1], [2].keys());          // [ 1, 0 ] - 0 is from the index from the first element\r\n * ```\r\n */\r\nexport function arrAppend<T>(target: T[], elms: T | T[] | Iterator<T>): T[] {\r\n    if (!isUndefined(elms) && target) {\r\n        if (isArray(elms)) {\r\n            // This is not just \"target.push(elms)\" but becomes effectively \"target.push(elms[0], elms[1], ...)\"\r\n            fnApply(target.push, target, elms);\r\n        } else if (isIterator<T>(elms) || isIterable<T>(elms)) {\r\n            iterForOf(elms, (elm) => {\r\n                target.push(elm);\r\n            });\r\n        } else {\r\n            target.push(elms);\r\n        }\r\n    }\r\n\r\n    return target;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, LENGTH } from \"../internal/constants\";\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in an array in ascending index order. It is not invoked for index properties\r\n * that have been deleted or are uninitialized. And unlike the ES6 forEach() you CAN stop or break the iteration by returning -1 from the\r\n * `callbackFn` function.\r\n *\r\n * The range (number of elements) processed by arrForEach() is set before the first call to the `callbackFn`. Any elements added beyond the range\r\n * or elements which as assigned to indexes already processed will not be visited by the `callbackFn`.\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the element type of the array\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackfn - A `synchronous` function that accepts up to three arguments. arrForEach calls the callbackfn function one time for each element in the array.\r\n * @param thisArg - An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the array will be used as the this value.\r\n * @remarks\r\n * arrForEach expects a `synchronous` function.\r\n * arrForEach does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as forEach callback.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3'];\r\n * const copyItems = [];\r\n *\r\n * // before using for loop\r\n * for (let i = 0; i < items.length; i++) {\r\n *   copyItems.push(items[i]);\r\n * }\r\n *\r\n * // before using forEach()\r\n * items.forEach((item) => {\r\n *   copyItems.push(item);\r\n * });\r\n *\r\n * // after\r\n * arrForEach(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n *\r\n * // Also supports input as an array like object\r\n * const items = { length: 3, 0: 'item1', 1: 'item2', 2: 'item3' };\r\n * ```\r\n */\r\nexport function arrForEach<T = any>(theArray: ArrayLike<T>, callbackfn: (value: T, index: number, array: T[]) => void | number, thisArg?: any): void {\r\n    if (theArray) {\r\n        const len = theArray[LENGTH] >>> 0;\r\n        for (let idx = 0; idx < len; idx++) {\r\n            if (idx in theArray) {\r\n                if (callbackfn[CALL](thisArg || theArray, theArray[idx], idx, theArray) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n\r\n/**\r\n * The arrIndexOf() method returns the first index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator).\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - The index to start the search at. If the index is greater than or equal to\r\n * the array's length, -1 is returned, which means the array will not be searched. If the provided\r\n * index value is a negative number, it is taken as the offset from the end of the array.\r\n * Note: if the provided index is negative, the array is still searched from front to back. If the\r\n * provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const array = [2, 9, 9];\r\n * arrIndexOf(array, 2);     // 0\r\n * arrIndexOf(array, 7);     // -1\r\n * arrIndexOf(array, 9, 2);  // 2\r\n * arrIndexOf(array, 2, -1); // -1\r\n * arrIndexOf(array, 2, -3); // 0\r\n *\r\n * let indices: number[] = [];\r\n * const array = ['a', 'b', 'a', 'c', 'a', 'd'];\r\n * const element = 'a';\r\n * let idx = arrIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrIndexOf(array, element, idx + 1);\r\n * }\r\n * console.log(indices);\r\n * // [0, 2, 4]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrIndexOf(arrayLike, \"potato\"); // 0\r\n * arrIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrIndexOf(arrayLike, \"chillies\"); 2\r\n * arrIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrIndexOf: <T>(theArray: ArrayLike<T>, searchElement: T, fromIndex?: number) => number = (/*#__PURE__*/_unwrapFunction(\"indexOf\", ArrProto));\r\n\r\n/**\r\n * The arrLastIndexOf() method returns the last index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrLastIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator). [NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\r\n * values are never compared as equal, so arrLastIndexOf() always returns -1 when searchElement is NaN.\r\n *\r\n * The arrLastIndexOf() method skips empty slots in sparse arrays.\r\n *\r\n * The arrLastIndexOf() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n *\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - Zero-based index at which to start searching backwards, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex \\< 0, fromIndex + array.length is used.\r\n * - If fromIndex \\< -array.length, the array is not searched and -1 is returned. You can think of it conceptually\r\n * as starting at a nonexistent position before the beginning of the array and going backwards from there. There\r\n * are no array elements on the way, so searchElement is never found.\r\n * - If fromIndex \\>= array.length or fromIndex is omitted, array.length - 1 is used, causing the entire array to\r\n * be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const numbers = [2, 5, 9, 2];\r\n * arrLastIndexOf(numbers, 2); // 3\r\n * arrLastIndexOf(numbers, 7); // -1\r\n * arrLastIndexOf(numbers, 2, 3); // 3\r\n * arrLastIndexOf(numbers, 2, 2); // 0\r\n * arrLastIndexOf(numbers, 2, -2); // 0\r\n * arrLastIndexOf(numbers, 2, -1); // 3\r\n *\r\n * let indices: number[] = [];\r\n * const array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\r\n * const element = \"a\";\r\n * let idx = arrLastIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrLastIndexOf(array, element, idx ? idx - 1 : -(array.length + 1));\r\n * }\r\n * console.log(indices);\r\n * // [4, 2, 0]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrLastIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrLastIndexOf(arrayLike, \"potato\"); // 0\r\n * arrLastIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrLastIndexOf(arrayLike, \"chillies\"); 2\r\n * arrLastIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrLastIndexOf: <T>(theArray: ArrayLike<T>, searchElement: T, fromIndex?: number) => number = (/*#__PURE__*/_unwrapFunction(\"lastIndexOf\", ArrProto));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\n\r\nlet _isProtoArray: ICachedValue<boolean>;\r\n\r\n/**\r\n * The objSetPrototypeOf() method sets the prototype (i.e., the internal [Prototype] property) of a specified\r\n * object to another object or null.\r\n * @group Object\r\n * @param obj - The object which is to have it's prototype set.\r\n * @param proto - The object's new prototype (an object or null)\r\n * @returns The specified object.\r\n */\r\nexport function objSetPrototypeOf(obj: any, proto: object) {\r\n    let fn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d: any, b: any) {\r\n            !_isProtoArray && (_isProtoArray = createCachedValue({ [__PROTO__]: [] } instanceof Array));\r\n            _isProtoArray.v ? d[__PROTO__] = b : objForEachKey(b, (key: any, value: any) => d[key] = value );\r\n        };\r\n\r\n    return fn(obj, proto);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\nimport { ArrMapCallbackFn } from \"./callbacks\";\r\n\r\n/**\r\n * The arrMap() method creates a new array populated with the results of calling a provided function on every\r\n * element in the calling array.\r\n *\r\n * `arrMap` calls a provided callbackFn function once for each element in an array, in order, and constructs\r\n * a new array from the results. callbackFn is invoked only for indexes of the array which have assigned\r\n * values (including undefined).\r\n *\r\n * It is not called for missing elements of the array; that is:\r\n * - indexes that have never been set;\r\n * - indexes which have been deleted.\r\n *\r\n * @since 0.3.3\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of the array elements\r\n * @typeParam R - Identifies the type of the elements returned by the callback function, defaults to T.\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn - The function that is called for evetn element of `theArray`.\r\n * @param thisArg - The value to use as the `this` when executing the `callbackFn`.\r\n * @example\r\n * ```ts\r\n * const numbers = [1, 4, 9];\r\n * const roots = arrMap(numbers, (num) => Math.sqrt(num));\r\n *\r\n * // roots is now     [1, 2, 3]\r\n * // numbers is still [1, 4, 9]\r\n *\r\n * const kvArray = [{ key: 1, value: 10 },\r\n *                  { key: 2, value: 20 },\r\n *                  { key: 3, value: 30 }];\r\n *\r\n * const reformattedArray = arrMap(kvArray, ({ key, value}) => ({ [key]: value }));\r\n *\r\n * // reformattedArray is now [{1: 10}, {2: 20}, {3: 30}],\r\n *\r\n * // kvArray is still:\r\n * // [{key: 1, value: 10},\r\n * //  {key: 2, value: 20},\r\n * //  {key: 3, value: 30}]\r\n *\r\n * // Also supports Array Like objects with same output\r\n * const kvArray = {\r\n *   length: 3,\r\n *   0: { key: 1, value: 10 },\r\n *   1: { key: 2, value: 20 },\r\n *   2: { key: 3, value: 30 }\r\n * };\r\n * ```\r\n */\r\nexport const arrMap: <T, R = T>(theArray: ArrayLike<T>, callbackFn: ArrMapCallbackFn<T, R>, thisArg?: any) => R[] = (/*#__PURE__*/_unwrapFunction(\"map\", ArrProto));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { FUNCTION, ObjClass, OBJECT, PROTOTYPE } from \"../internal/constants\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Object\r\n * @param obj - Object to use as a prototype. May be null\r\n */\r\nexport const objCreate: (obj: any) => any = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.create>(ObjClass as any, \"create\")), polyObjCreate));\r\n\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Polyfill\r\n * @group Object\r\n * @param obj - Object to use as a prototype. May be null\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyObjCreate(obj: any): any {\r\n    if (!obj) {\r\n        return {};\r\n    }\r\n\r\n    let type = typeof obj;\r\n    if (type !== OBJECT && type !== FUNCTION) {\r\n        throwTypeError(\"Prototype must be an Object or function: \" + dumpObj(obj));\r\n    }\r\n\r\n    function tempFunc() {}\r\n    tempFunc[PROTOTYPE] = obj;\r\n\r\n    return new (tempFunc as any)();\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { ArrSlice, CALL, CONSTRUCTOR, NAME, NULL_VALUE, PROTOTYPE } from \"../internal/constants\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { objGetPrototypeOf } from \"../object/object\";\r\nimport { objSetPrototypeOf } from \"../object/set_proto\";\r\nimport { safe } from \"./safe\";\r\n\r\n/**\r\n * Defines the definition of the custom error constructor\r\n * Used by: {@link createCustomError}\r\n * @group Error\r\n */\r\nexport interface CustomErrorConstructor<T extends Error = Error> extends ErrorConstructor {\r\n    new(message?: string): T;\r\n    (message?: string): T;\r\n    readonly prototype: T;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createCustomError<T>(name: string, d: any, b: any): T {\r\n    safe(objDefine, [ d, NAME, { v: name, c: true, e: false }]);\r\n    d = objSetPrototypeOf(d, b);\r\n    function __() {\r\n        this[CONSTRUCTOR] = d;\r\n        safe(objDefine, [this, NAME, { v: name, c: true, e: false }]);\r\n    }\r\n\r\n    d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : ((__ as any)[PROTOTYPE] = b[PROTOTYPE], new (__ as any)());\r\n\r\n    return d;\r\n}\r\n\r\nfunction  _setName(baseClass: any, name: string) {\r\n    name && (baseClass[NAME] = name);\r\n    //name && (baseClass[PROTOTYPE][NAME] = name);\r\n}\r\n\r\n/**\r\n * Create a Custom Error class which may be used to throw custom errors.\r\n * @group Error\r\n * @param name - The name of the Custom Error\r\n * @param constructCb - [Optional] An optional callback function to call when a\r\n * new Customer Error instance is being created.\r\n * @param errorBase - [Optional] (since v0.9.6) The error class to extend for this class, defaults to Error.\r\n * @returns A new Error `class`\r\n * @example\r\n * ```ts\r\n * import { createCustomError, isError } from \"@nevware21/ts-utils\";\r\n *\r\n * // For an error that just contains a message\r\n * let myCustomErrorError = createCustomError(\"MessageError\");\r\n *\r\n * try {\r\n *     throw new myCustomErrorError(\"Error Message!\");\r\n * } catch(e) {\r\n *      // e.name === MessageError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // Or a more complex error object\r\n * interface MyCriticalErrorConstructor extends CustomErrorConstructor {\r\n *     new(message: string, file: string, line: number, col: number): MyCriticalError;\r\n *     (message: string, file: string, line: number, col: number): MyCriticalError;\r\n * }\r\n *\r\n * interface MyCriticalError extends Error {\r\n *     readonly errorId: number;\r\n *     readonly args: any[];        // Holds all of the arguments passed during construction\r\n * }\r\n *\r\n * let _totalErrors = 0;\r\n * let myCustomError = createCustomError<MyCriticalErrorConstructor>(\"CriticalError\", (self, args) => {\r\n *     _totalErrors++;\r\n *     self.errorId = _totalErrors;\r\n *     self.args = args;\r\n * });\r\n *\r\n * try {\r\n *     throw new myCustomError(\"Not Again!\");\r\n * } catch(e) {\r\n *      // e.name === CriticalError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // ----------------------------------------------------------\r\n * // Extending another custom error class\r\n * // ----------------------------------------------------------\r\n *\r\n * let AppError = createCustomError(\"ApplicationError\");\r\n * let theAppError = new appError();\r\n *\r\n * isError(theAppError);                    // true\r\n * theAppError instanceof Error;            // true\r\n * theAppError instanceof AppError;         // true\r\n *\r\n * let StartupError = createCustomError(\"StartupError\", null, AppError);\r\n * let theStartupError = new StartupError();\r\n *\r\n * isError(theStartupError);                // true\r\n * theStartupError instanceof Error;        // true\r\n * theStartupError instanceof AppError;     // true\r\n * theStartupError instanceof StartupError; // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createCustomError<T extends ErrorConstructor = CustomErrorConstructor, B extends ErrorConstructor = ErrorConstructor>(\r\n    name: string,\r\n    constructCb?: ((self: any, args: IArguments) => void) | null,\r\n    errorBase?: B): T {\r\n\r\n    let theBaseClass = errorBase || Error;\r\n    let orgName = theBaseClass[PROTOTYPE][NAME];\r\n    let captureFn = Error.captureStackTrace;\r\n    return _createCustomError<T>(name, function (this: any) {\r\n        let _this = this;\r\n        let theArgs = arguments;\r\n        try {\r\n            safe(_setName, [theBaseClass, name]);\r\n            let _self = fnApply(theBaseClass, _this, ArrSlice[CALL](theArgs)) || _this;\r\n            if (_self !== _this) {\r\n                // Looks like runtime error constructor reset the prototype chain, so restore it\r\n                let orgProto = objGetPrototypeOf(_this);\r\n                if (orgProto !== objGetPrototypeOf(_self)) {\r\n                    objSetPrototypeOf(_self, orgProto);\r\n                }\r\n            }\r\n\r\n            // Make sure we only capture our stack details\r\n            captureFn && captureFn(_self, _this[CONSTRUCTOR]);\r\n    \r\n            // Run the provided construction function\r\n            constructCb && constructCb(_self, theArgs);\r\n    \r\n            return _self;\r\n        } finally {\r\n            safe(_setName, [theBaseClass, orgName]);\r\n        }\r\n    }, theBaseClass);\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nlet _unsupportedError: CustomErrorConstructor;\r\n\r\n/**\r\n * Throw a custom `UnsupportedError` Error instance with the given message.\r\n * @group Error\r\n * @param message - The message to include in the exception\r\n * @example\r\n * ```ts\r\n * import { throwUnsupported } from \"@nevware21/ts-utils\";\r\n *\r\n * if (!window) {\r\n *     throwUnsupported(\"A window is needed for this operation\");\r\n * }\r\n * ```\r\n */\r\nexport function throwUnsupported(message?: string): never {\r\n    if (!_unsupportedError) {\r\n        // Lazily create the class\r\n        _unsupportedError = createCustomError(\"UnsupportedError\");\r\n    }\r\n\r\n    throw new _unsupportedError(message);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of utcNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n * @example\r\n * ```ts\r\n * let now = utcNow();\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function utcNow() {\r\n    return (Date.now || polyUtcNow)();\r\n}\r\n\r\n/**\r\n * Polyfill fallback to return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of utcNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Polyfill\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n  * @example\r\n * ```ts\r\n * let now = polyUtcNow();\r\n * ```\r\n*/\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyUtcNow() {\r\n    return new Date().getTime();\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isNullOrUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY } from \"../internal/constants\";\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createTrimFn(exp: RegExp): (value: string) => string {\r\n    return function _doTrim(value: string): string {\r\n        if (isNullOrUndefined(value)) {\r\n            throwTypeError(\"strTrim called [\" + dumpObj(value) + \"]\")\r\n        }\r\n    \r\n        if (value && value.replace) {\r\n            value = value.replace(exp, EMPTY);\r\n        }\r\n    \r\n        return value;\r\n    }\r\n}\r\n\r\n/**\r\n * The trim() method removes whitespace from both ends of a string and returns a new string,\r\n * without modifying the original string. Whitespace in this context is all the whitespace\r\n * characters (space, tab, no-break space, etc.) and all the line terminator characters\r\n * (LF, CR, etc.).\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The string value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from both its beginning and end.\r\n * If neither the beginning or end of str has any whitespace, a new string is still returned (essentially\r\n * a copy of str), with no exception being thrown.\r\n * To return a new string with whitespace trimmed from just one end, use `strTrimStart()` or `strTrimEnd()`.\r\n */\r\nexport const polyStrTrim = (/*#__PURE__*/_createTrimFn(/^\\s+|(?=\\s)\\s+$/g));\r\n\r\n/**\r\n * The `polyStrTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const polyStrTrimStart = (/*#__PURE__*/_createTrimFn(/^\\s+/g));\r\n \r\n/**\r\n * The `polyStrTrimEnd()` method removes whitespace from the end of a string.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const polyStrTrimEnd = (/*#__PURE__*/_createTrimFn(/(?=\\s)\\s+$/g));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getWindow, hasWindow } from \"../helpers/environment\";\r\nimport { CALL, CONSTRUCTOR, FUNCTION, ObjClass, OBJECT, PROTOTYPE, TO_STRING } from \"../internal/constants\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\nimport { objGetPrototypeOf } from \"./object\";\r\n\r\n// Use to cache the result of Object.cont\r\nlet _fnToString: () => string;\r\nlet _objCtrFnString: string;\r\nlet _gblWindow: Window;\r\n\r\n/**\r\n * Checks to see if the past value is a plain object (not a class/array) value.\r\n * Object are considered to be \"plain\" if they are created with no prototype `Object.create(null)`\r\n * or by using the Object global (native) function, all other \"objects\" ar\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @group Object\r\n * @param value - The value to check\r\n * @returns true if `value` is a normal plain object\r\n * @example\r\n * ```ts\r\n * console.log(isPlainObject({ 0: 'a', 1: 'b', 2: 'c' }));      // true\r\n * console.log(isPlainObject({ 100: 'a', 2: 'b', 7: 'c' }));    // true\r\n * console.log(isPlainObject(objCreate(null)));                 // true\r\n *\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(isPlainObject(myObj));                   // true\r\n *\r\n * console.log(isPlainObject(['a', 'b', 'c']));         // false\r\n * console.log(isPlainObject(new Date()));              // false\r\n * console.log(isPlainObject(new Error(\"An Error\")));   // false\r\n * console.log(isPlainObject(null));                    // false\r\n * console.log(isPlainObject(undefined));               // false\r\n * console.log(isPlainObject(\"null\"));                  // false\r\n * console.log(isPlainObject(\"undefined\"));             // false\r\n * console.log(isPlainObject(\"1\"));                     // false\r\n * console.log(isPlainObject(\"aa\"));                    // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPlainObject(value: any): value is object {\r\n    if (!value || typeof value !== OBJECT) {\r\n        return false;\r\n    }\r\n\r\n    if (!_gblWindow) {\r\n        // Lazily cache the current global window value and default it to \"true\" (so we bypass this check in the future)\r\n        _gblWindow = hasWindow() ? getWindow() : (true as any);\r\n    }\r\n\r\n    let result = false;\r\n    if (value !== _gblWindow) {\r\n\r\n        if (!_objCtrFnString) {\r\n            // Lazily caching what the runtime reports as the object function constructor (as a string)\r\n            // Using an current function lookup to find what this runtime calls a \"native\" function\r\n            _fnToString = Function[PROTOTYPE][TO_STRING];\r\n            _objCtrFnString = _fnToString[CALL](ObjClass);\r\n        }\r\n\r\n        try {\r\n            let proto = objGetPrototypeOf(value);\r\n\r\n            // No prototype so looks like an object created with Object.create(null)\r\n            result = !proto;\r\n            if (!result) {\r\n                if (objHasOwnProperty(proto, CONSTRUCTOR)) {\r\n                    proto = proto[CONSTRUCTOR]\r\n                }\r\n            \r\n                result = !!(proto && typeof proto === FUNCTION && _fnToString[CALL](proto) === _objCtrFnString);\r\n            }\r\n        } catch (ex) {\r\n            // Something went wrong, so it's not an object we are playing with\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ICachedValue, createCachedValue } from \"./cache\";\r\nimport { utcNow } from \"./date\";\r\nimport { getInst } from \"./environment\";\r\nimport { _globalLazyTestHooks, _initTestHooks } from \"./lazy\";\r\nimport { safe } from \"./safe\";\r\n\r\nlet _perf: ICachedValue<Performance>\r\n\r\n/**\r\n * Identify whether the runtimne contains a `performance` object\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasPerformance(): boolean {\r\n    return !!getPerformance();\r\n}\r\n\r\n/**\r\n * Returns the global `performance` Object if available, which can be used to\r\n * gather performance information about the current document. It serves as the\r\n * point of exposure for the Performance Timeline API, the High Resolution Time\r\n * API, the Navigation Timing API, the User Timing API, and the Resource Timing API.\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns The global performance object if available.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getPerformance(): Performance {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    if (!_perf || _globalLazyTestHooks.lzy) {\r\n        _perf = createCachedValue(safe(getInst<Performance>, [\"performance\"]).v);\r\n    }\r\n    \r\n    return _perf.v;\r\n}\r\n\r\n/**\r\n * Returns the number of milliseconds that has elapsed since the time origin, if\r\n * the runtime does not support the `performance` API it will fallback to return\r\n * the number of milliseconds since the unix epoch.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns The number of milliseconds as a `DOMHighResTimeStamp` double value or\r\n * an integer depending on the runtime.\r\n * @example\r\n * ```ts\r\n * let now = perfNow();\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function perfNow(): number {\r\n    let perf = getPerformance();\r\n    if (perf && perf.now) {\r\n        return perf.now();\r\n    }\r\n\r\n    return utcNow();\r\n}\r\n\r\n/**\r\n * Return the number of milliseconds that have elapsed since the provided `startTime`\r\n * the `startTime` MUST be obtained from {@link perfNow} to ensure the correct elapsed\r\n * value is returned.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param startTime - The startTime obtained from `perfNow`\r\n * @returns The number of milliseconds that have elapsed since the startTime.\r\n * @example\r\n * ```ts\r\n * let start = perfNow();\r\n * // Do some work\r\n * let totalTime = elapsedTime(start);\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function elapsedTime(startTime: number): number {\r\n    return perfNow() - startTime;\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _pureAssign } from \"../internal/treeshake_helpers\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyStrTrim, polyStrTrimEnd, polyStrTrimStart } from \"../polyfills/trim\";\r\n\r\n/**\r\n * The trim() method removes whitespace from both ends of a string and returns a new string,\r\n * without modifying the original string. Whitespace in this context is all the whitespace\r\n * characters (space, tab, no-break space, etc.) and all the line terminator characters\r\n * (LF, CR, etc.).\r\n * @group String\r\n * @param value - The string value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from both its beginning and end.\r\n * If neither the beginning or end of str has any whitespace, a new string is still returned (essentially\r\n * a copy of str), with no exception being thrown.\r\n * To return a new string with whitespace trimmed from just one end, use `strTrimStart()` or `strTrimEnd()`.\r\n */\r\nexport const strTrim: (value: string) => string = (/*#__PURE__*/_unwrapFunctionWithPoly(\"trim\", StrProto, polyStrTrim));\r\n\r\n/**\r\n * The `strTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimStart: (value: string) => string = (/*#__PURE__*/_unwrapFunctionWithPoly(\"trimStart\", StrProto, polyStrTrimStart));\r\n\r\n/**\r\n * Alias for `strTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimLeft = (/*#__PURE__*/_pureAssign(strTrimStart));\r\n\r\n/**\r\n * The `strTrimEnd()` method removes whitespace from the end of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimEnd: (value: string) => string = (/*#__PURE__*/_unwrapFunctionWithPoly(\"trimEnd\", StrProto, polyStrTrimEnd));\r\n\r\n/**\r\n * Alias for `strTrimEnd()` method removes whitespace from the end of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimRight = (/*#__PURE__*/_pureAssign(strTrimEnd));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The `mathFloor()` function returns the largest integer less than or equal to a given number.\r\n * @group Math\r\n * @param x - A number\r\n * @returns A number representing the largest integer less than or equal to the specified number.\r\n */\r\nexport const mathFloor = (/*#__PURE__*/_pureRef<typeof Math.floor>(MathCls, \"floor\"));\r\n\r\n/**\r\n * The `mathCeil()` function always rounds a number up to the next largest integer.\r\n * @group Math\r\n * @param x - A number\r\n * @returns The smallest integer greater than or equal to the given number.\r\n */\r\nexport const mathCeil = (/*#__PURE__*/_pureRef<typeof Math.ceil>(MathCls, \"ceil\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The `mathRound()` function returns the value of a number rounded to the nearest integer.\r\n *\r\n * If the fractional portion of the argument is greater than 0.5, the argument is rounded to the\r\n * integer with the next higher absolute value. If it is less than 0.5, the argument is rounded\r\n * to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the\r\n * argument is rounded to the next integer in the direction of +∞.\r\n *\r\n * > Note: This differs from many languages' round() functions, which often round half-increments\r\n * > away from zero, giving a different result in the case of negative numbers with a fractional part of exactly 0.5.\r\n *\r\n * `mathRound(x)` is not exactly the same as `mathFloor(x + 0.5)`. When `x` is -0, or -0.5 ≤ x < 0, `mathRound(x)`\r\n * returns -0, while `mathFloor(x + 0.5)` returns 0. However, neglecting that difference and potential precision errors,\r\n * `mathRound(x)` and `mathFloor(x + 0.5)` are generally equivalent.\r\n * @group Math\r\n * @since 0.11.8\r\n * @param x - A number\r\n * @returns A value of `x` rounded to the nearest integer.\r\n * @example\r\n * ```ts\r\n * mathRound(0.9); // 1\r\n * mathRound(5.95); // 6\r\n * mathRound(5.5); // 6\r\n * mathRound(5.05); // 5\r\n * mathRound(-5.05); // -5\r\n * mathRound(-5.5); // -5\r\n * mathRound(-5.95); // -6\r\n * mathRound(-0.9); // -1\r\n * ```\r\n */\r\nexport const mathRound = (/*#__PURE__*/_pureRef<typeof Math.floor>(MathCls, \"round\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isString, isUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { asString } from \"./as_string\";\r\nimport { strSubstring } from \"./substring\";\r\n\r\n/**\r\n * This method lets you determine whether or not a string ends with another string. This method is case-sensitive.\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the end of `value` string.\r\n * @param length - If provided, it is used as the length of `value`. Defaults to value.length.\r\n */\r\nexport const strEndsWith: (value: string, searchString: string, length?: number) => boolean = (/*#__PURE__*/_unwrapFunctionWithPoly(\"endsWith\", StrProto, polyStrEndsWith));\r\n\r\n/**\r\n * This method lets you determine whether or not a string ends with another string. This method is case-sensitive.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the end of `value` string.\r\n * @param length - If provided, it is used as the length of `value`. Defaults to value.length.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrEndsWith(value: string, searchString: string, length?: number): boolean {\r\n    if (!isString(value)) {\r\n        throwTypeError(\"'\" + dumpObj(value) + \"' is not a string\");\r\n    }\r\n\r\n    let searchValue = isString(searchString) ? searchString : asString(searchString);\r\n    let end = (!isUndefined(length) && length < value[LENGTH]) ? length : value[LENGTH];\r\n\r\n    return strSubstring(value, end - searchValue[LENGTH], end) === searchValue;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n\r\n/**\r\n * The `strIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the first occurrence of the specified substring.\r\n * Given a thrid argument: a number, the method returns the first occurrence of the specified substring\r\n * at an index greater than or equal to the specified number.\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strIndexOf('hello world', '') // returns 0\r\n * strIndexOf('hello world', '', 0) // returns 0\r\n * strIndexOf('hello world', '', 3) // returns 3\r\n * strIndexOf('hello world', '', 8) // returns 8\r\n *\r\n * // However, if the thrid argument is greater than the length of the string\r\n * strIndexOf('hello world', '', 11) // returns 11\r\n * strIndexOf('hello world', '', 13) // returns 11\r\n * strIndexOf('hello world', '', 22) // returns 11\r\n *\r\n * strIndexOf('Blue Whale', 'Blue')      // returns  0\r\n * strIndexOf('Blue Whale', 'Blute')     // returns -1\r\n * strIndexOf('Blue Whale', 'Whale', 0)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 5)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 7)  // returns -1\r\n * strIndexOf('Blue Whale', '')          // returns  0\r\n * strIndexOf('Blue Whale', '', 9)       // returns  9\r\n * strIndexOf('Blue Whale', '', 10)      // returns 10\r\n * strIndexOf('Blue Whale', '', 11)      // returns 10\r\n * ```\r\n */\r\nexport const strIndexOf: (value: string, searchString: string, position?: number) => number = (/*#__PURE__*/_unwrapFunction(\"indexOf\", StrProto));\r\n\r\n/**\r\n * The `strLastIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the last occurrence of the specified substring.\r\n * Given a third argument: a number, the method returns the last occurrence of the specified substring\r\n * at an index less than or equal to the specified number.\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strLastIndexOf('canal', 'a');     // returns 3\r\n * strLastIndexOf('canal', 'a', 2);  // returns 1\r\n * strLastIndexOf('canal', 'a', 0);  // returns -1\r\n * strLastIndexOf('canal', 'x');     // returns -1\r\n * strLastIndexOf('canal', 'c', -5); // returns 0\r\n * strLastIndexOf('canal', 'c', 0);  // returns 0\r\n * strLastIndexOf('canal', '');      // returns 5\r\n * strLastIndexOf('canal', '', 2);   // returns 2\r\n * ```\r\n */\r\nexport const strLastIndexOf: (value: string, searchString: string, position?: number) => number = (/*#__PURE__*/_unwrapFunction(\"lastIndexOf\", StrProto));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\n\r\nconst REF = \"ref\";\r\nconst UNREF = \"unref\";\r\nconst HAS_REF = \"hasRef\";\r\nconst ENABLED = \"enabled\";\r\n\r\n/**\r\n * A Timer handler which is returned from {@link scheduleTimeout} which contains functions to\r\n * cancel or restart (refresh) the timeout function.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n */\r\nexport interface ITimerHandler {\r\n    /**\r\n     * Cancels a timeout that was previously scheduled, after calling this function any previously\r\n     * scheduled timer will not execute.\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = scheduleTimeout(...);\r\n     * theTimer.cancel();\r\n     * ```\r\n     */\r\n    cancel(): void;\r\n\r\n    /**\r\n     * Reschedules the timer to call its callback at the previously specified duration\r\n     * adjusted to the current time. This is useful for refreshing a timer without allocating\r\n     * a new JavaScript object.\r\n     *\r\n     * Using this on a timer that has already called its callback will reactivate the timer.\r\n     * Calling on a timer that has not yet executed will just reschedule the current timer.\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = scheduleTimeout(...);\r\n     * // The timer will be restarted (if already executed) or rescheduled (if it has not yet executed)\r\n     * theTimer.refresh();\r\n     * ```\r\n     */\r\n    refresh(): ITimerHandler;\r\n\r\n    /**\r\n     * When called, requests that the event loop not exit so long when the ITimerHandler is active.\r\n     * Calling timer.ref() multiple times will have no effect. By default, all ITimerHandler objects\r\n     * will create \"ref'ed\" instances, making it normally unnecessary to call timer.ref() unless\r\n     * timer.unref() had been called previously.\r\n     * @since 0.7.0\r\n     * @returns the ITimerHandler instance\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Make sure the timer is referenced (the default) so that the runtime (Node) does not terminate\r\n     * // if there is a waiting referenced timer.\r\n     * theTimer.ref();\r\n     * ```\r\n     */\r\n    ref(): this;\r\n\r\n    /**\r\n     * When called, the any active ITimerHandler instance will not require the event loop to remain\r\n     * active (Node.js). If there is no other activity keeping the event loop running, the process may\r\n     * exit before the ITimerHandler instance callback is invoked. Calling timer.unref() multiple times\r\n     * will have no effect.\r\n     * @since 0.7.0\r\n     * @returns the ITimerHandler instance\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Unreference the timer so that the runtime (Node) may terminate if nothing else is running.\r\n     * theTimer.unref();\r\n     * ```\r\n     */\r\n    unref(): this;\r\n\r\n    /**\r\n     * If true, any running referenced `ITimerHandler` instance will keep the Node.js event loop active.\r\n     * @since 0.7.0\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Unreference the timer so that the runtime (Node) may terminate if nothing else is running.\r\n     * theTimer.unref();\r\n     * let hasRef = theTimer.hasRef(); // false\r\n     *\r\n     * theTimer.ref();\r\n     * hasRef = theTimer.hasRef(); // true\r\n     * ```\r\n     */\r\n    hasRef(): boolean;\r\n\r\n    /**\r\n     * Gets or Sets a flag indicating if the underlying timer is currently enabled and running.\r\n     * Setting the enabled flag to the same as it's current value has no effect, setting to `true`\r\n     * when already `true` will not {@link ITimerHandler.refresh | refresh}() the timer.\r\n     * And setting to `false` will {@link ITimerHandler.cancel | cancel}() the timer.\r\n     * @since 0.8.1\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Check if enabled\r\n     * theTimer.enabled; // false\r\n     *\r\n     * // Start the timer\r\n     * theTimer.enabled = true;     // Same as calling refresh()\r\n     * theTimer.enabled; //true\r\n     *\r\n     * // Has no effect as it's already running\r\n     * theTimer.enabled = true;\r\n     *\r\n     * // Will refresh / restart the time\r\n     * theTimer.refresh()\r\n     *\r\n     * let theTimer = scheduleTimeout(...);\r\n     *\r\n     * // Check if enabled\r\n     * theTimer.enabled; // true\r\n     * ```\r\n     */\r\n    enabled: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport interface _TimerHandler {\r\n    /**\r\n     * The public handler to return to the caller\r\n     */\r\n    h: ITimerHandler,\r\n\r\n    /**\r\n     * The callback function that should be called when the timer operation\r\n     * has completed and will not automatically rescheduled\r\n     * @returns\r\n     */\r\n    dn: () => void\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Internal function to create and manage an ITimerHandler implementation, the object returned from this function\r\n * it directly used / returned by the pulic functions used to create timers (idle, interval and timeout)\r\n * @param startTimer - Should the timer be started as part of creating the handler\r\n * @param refreshFn - The function used to create/start or refresh the timer\r\n * @param cancelFn - The function used to cancel the timer.\r\n * @returns The new ITimerHandler instance\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createTimerHandler<T>(startTimer: boolean, refreshFn: (timerId: T) => T, cancelFn: (timerId: T) => void): _TimerHandler {\r\n    let ref = true;\r\n    let timerId: T = startTimer ? refreshFn(NULL_VALUE) : NULL_VALUE;\r\n    let theTimerHandler: ITimerHandler;\r\n\r\n    function _unref() {\r\n        ref = false;\r\n        timerId && timerId[UNREF] && timerId[UNREF]();\r\n        return theTimerHandler;\r\n    }\r\n\r\n    function _cancel() {\r\n        timerId && cancelFn(timerId);\r\n        timerId = NULL_VALUE;\r\n    }\r\n\r\n    function _refresh() {\r\n        timerId = refreshFn(timerId);\r\n        if (!ref) {\r\n            _unref();\r\n        }\r\n\r\n        return theTimerHandler;\r\n    }\r\n\r\n    function _setEnabled(value: boolean) {\r\n        !value && timerId && _cancel();\r\n        value && !timerId && _refresh();\r\n    }\r\n\r\n    theTimerHandler = {\r\n        cancel: _cancel,\r\n        refresh: _refresh\r\n    } as any;\r\n\r\n    theTimerHandler[HAS_REF] = () => {\r\n        if (timerId && timerId[HAS_REF]) {\r\n            return timerId[HAS_REF]();\r\n        }\r\n\r\n        return ref;\r\n    };\r\n\r\n    theTimerHandler[REF] = () => {\r\n        ref = true;\r\n        timerId && timerId[REF] && timerId[REF]();\r\n        return theTimerHandler;\r\n    };\r\n\r\n    theTimerHandler[UNREF] = _unref;\r\n\r\n    theTimerHandler = objDefineProp(theTimerHandler, ENABLED, {\r\n        get: () => !!timerId,\r\n        set: _setEnabled\r\n    });\r\n\r\n    return {\r\n        h: theTimerHandler,\r\n        dn: () => {\r\n            timerId = NULL_VALUE;\r\n        }\r\n    };\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { isArray } from \"../helpers/base\";\r\nimport { ArrSlice, CALL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { ITimerHandler, _createTimerHandler } from \"./handler\";\r\n\r\nfunction _createTimeoutWith(startTimer: boolean, overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, theArgs: any[]): ITimerHandler {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    let setFn: TimeoutOverrideFn = (len > 0 ? overrideFn[0] : (!isArr ? overrideFn : UNDEF_VALUE)) || setTimeout;\r\n    let clearFn: ClearTimeoutOverrideFn = (len > 1 ? overrideFn[1] : UNDEF_VALUE) || clearTimeout;\r\n\r\n    let timerFn = theArgs[0];\r\n    theArgs[0] = function () {\r\n        handler.dn();\r\n        fnApply(timerFn, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n    };\r\n    \r\n    let handler = _createTimerHandler(startTimer, (timerId?: any) => {\r\n        if (timerId) {\r\n            if (timerId.refresh) {\r\n                timerId.refresh();\r\n                return timerId;\r\n            }\r\n\r\n            fnApply(clearFn, UNDEF_VALUE, [ timerId ]);\r\n        }\r\n\r\n        return fnApply(setFn, UNDEF_VALUE, theArgs);\r\n    }, function (timerId: any) {\r\n        fnApply(clearFn, UNDEF_VALUE, [ timerId ]);\r\n    });\r\n\r\n    return handler.h;\r\n}\r\n\r\n/**\r\n * The signature of the override timeout function used to create a new timeout instance, it follows the same signature as\r\n * the native `setTimeout` API.\r\n * @since 0.4.4\r\n * @group Timer\r\n * @param callback - A function to be executed after the timer expires.\r\n * @param ms - The time, in milliseconds that the timer should wait before the specified function or code is executed.\r\n * If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by callback.\r\n * @return The returned timeoutID is a positive integer value which identifies the timer created by the call to setTimeout().\r\n * This value can be passed to clearTimeout() to cancel the timeout.\r\n */\r\nexport type TimeoutOverrideFn = <TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs) => number | any;\r\n\r\n/**\r\n * The signatire of the function to override clearing a previous timeout created with the {@link TimeoutOverrideFn}, it will be passed\r\n * the result returned from the {@link TimeoutOverrideFn} call.\r\n * @since 0.4.5\r\n * @group Timer\r\n * @param timeoutId - The value returned from the previous {@link TimeoutOverrideFn}.\r\n */\r\nexport type ClearTimeoutOverrideFn = (timeoutId: number | any) => void;\r\n\r\n/**\r\n * Defines the array signature used to pass the override set and clean functions for creating a timeout.\r\n * The first index [0] is the set function to be used and the second index [1] is the clear function to be used.\r\n * @since 0.4.5\r\n * @group Timer\r\n */\r\nexport type TimeoutOverrideFuncs = [ TimeoutOverrideFn | null, ClearTimeoutOverrideFn | null ];\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires, this is simular\r\n * to using `setTimeout` but provides a return object for cancelling and restarting (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = scheduleTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires, this is simular\r\n * to using `setTimeout` but provides a return object for cancelling and restarting (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = scheduleTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(true, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n}\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires. The overrideFn will be\r\n * used to create the timer, this is simular to using `setTimeout` but provides a return object for cancelling and restarting\r\n * (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer, internally this will call the newClearTimeoutFn\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires. The overrideFn will be\r\n * used to create the timer, this is simular to using `setTimeout` but provides a return object for cancelling and restarting\r\n * (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer, internally this will call the newClearTimeoutFn\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(true, overrideFn, ArrSlice[CALL](arguments, 1));\r\n}\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled and the timer expires,\r\n * this is simular to using `scheduleTimeout` but the timer is not enabled (running) and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = createTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled and the timer expires,\r\n * this is simular to using `scheduleTimeout` but the timer is not enabled (running) and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = createTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(false, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n}\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled once the timer expires.\r\n * The overrideFn will be used to create the timer, this is simular to using `scheduleTimeoutWith` but the timer is not enabled (running)\r\n * and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled once the timer expires.\r\n * The overrideFn will be used to create the timer, this is simular to using `scheduleTimeoutWith` but the timer is not enabled (running)\r\n * and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(false, overrideFn, ArrSlice[CALL](arguments, 1));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objAssign, objCreate, objDefineProp, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\r\nimport {\r\n    ObjClass, ObjProto,\r\n    strDefault, strShimFunction, strShimPrototype\r\n} from \"./Constants\";\r\n\r\n// Most of these functions have been directly shamelessly \"lifted\" from the https://github.com/@microsoft/tslib and\r\n// modified to be ES5 compatible and applying several minification and tree-shaking techniques so that Application Insights\r\n// can successfully use TypeScript \"importHelpers\" which imports tslib during compilation but it will use these at runtime\r\n// Which is also why all of the functions have not been included as Application Insights currently doesn't use or require\r\n// them.\r\n\r\nexport const SymbolObj = (getGlobal()||{})[\"Symbol\"];\r\nexport const ReflectObj = (getGlobal()||{})[\"Reflect\"];\r\nexport const __hasReflect = !!ReflectObj;\r\n\r\nconst strDecorate = \"decorate\";\r\nconst strMetadata = \"metadata\";\r\nconst strGetOwnPropertySymbols = \"getOwnPropertySymbols\";\r\nconst strIterator = \"iterator\";\r\nconst strHasOwnProperty = \"hasOwnProperty\";\r\n\r\nexport declare type ObjAssignFunc = (t: any, ...sources:any[]) => any;\r\n\r\nexport var __objAssignFnImpl: ObjAssignFunc = function(t: any): any {\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) {\r\n            if (ObjProto[strHasOwnProperty].call(s, p)) {\r\n                (t as any)[p] = s[p];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\n\r\nexport var __assignFn: ObjAssignFunc = objAssign || __objAssignFnImpl;\r\n\r\n// tslint:disable-next-line: only-arrow-functions\r\nvar extendStaticsFn = function(d: any, b: any): any {\r\n    extendStaticsFn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        ({ __proto__: [] } instanceof Array && function (d: any, b: any) {\r\n            d.__proto__ = b;\r\n        }) ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d: any, b: any) {\r\n            for (var p in b) {\r\n                if (b[strHasOwnProperty](p)) {\r\n                    d[p] = b[p];\r\n                }\r\n            }\r\n        };\r\n    return extendStaticsFn(d, b);\r\n};\r\n\r\nexport function __extendsFn(d: any, b: any) {\r\n    if (typeof b !== strShimFunction && b !== null) {\r\n        throwTypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    }\r\n    extendStaticsFn(d, b);\r\n    function __(this: any) {\r\n        this.constructor = d;\r\n    }\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    d[strShimPrototype] = b === null ? objCreate(b) : (__[strShimPrototype] = b[strShimPrototype], new (__ as any)());\r\n}\r\n\r\nexport function __restFn(s: any, e: any) {\r\n    var t = {};\r\n    for (var k in s) {\r\n        if (objHasOwnProperty(s, k) && e.indexOf(k) < 0) {\r\n            t[k] = s[k];\r\n        }\r\n    }\r\n    if (s != null && typeof ObjClass[strGetOwnPropertySymbols] === strShimFunction) {\r\n        for (var i = 0, p = ObjClass[strGetOwnPropertySymbols](s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && ObjProto[\"propertyIsEnumerable\"].call(s, p[i])) {\r\n                t[p[i]] = s[p[i]];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __decorateFn(decorators: any, target: any, key: any, desc: any) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = ObjClass[\"getOwnPropertyDescriptor\"](target, key) : desc, d;\r\n    if (__hasReflect && typeof ReflectObj[strDecorate] === strShimFunction) {\r\n        r = ReflectObj[strDecorate](decorators, target, key, desc);\r\n    } else {\r\n        for (var i = decorators.length - 1; i >= 0; i--) {\r\n            // eslint-disable-next-line no-cond-assign\r\n            if (d = decorators[i]) {\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n            }\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-comma-operator\r\n    return c > 3 && r && objDefineProp(target, key, r), r;\r\n}\r\n\r\nexport function __paramFn(paramIndex: number, decorator: Function) {\r\n    return function (target: any, key: any) {\r\n        decorator(target, key, paramIndex);\r\n    }\r\n}\r\n\r\nexport function __metadataFn(metadataKey: any, metadataValue: any) {\r\n    if (__hasReflect && ReflectObj[strMetadata] === strShimFunction) {\r\n        return ReflectObj[strMetadata](metadataKey, metadataValue);\r\n    }\r\n}\r\n\r\nexport function __exportStarFn(m: any, o: any) {\r\n    for (var p in m) {\r\n        if (p !== strDefault && !objHasOwnProperty(o, p)) {\r\n            __createBindingFn(o, m, p);\r\n        }\r\n    }\r\n}\r\n\r\nexport function __createBindingFn(o: any, m: any, k: any, k2?: any) {\r\n    if (k2 === undefined) {\r\n        k2 = k;\r\n    }\r\n    \r\n    if (!!objDefineProp) {\r\n        objDefineProp(o, k2, {\r\n            enumerable: true,\r\n            get() {\r\n                return m[k];\r\n            }\r\n        });\r\n    } else {\r\n        o[k2] = m[k];\r\n    }\r\n}\r\n\r\nexport function __valuesFn(o: any) {\r\n    var s = typeof SymbolObj === strShimFunction && SymbolObj[strIterator], m = s && o[s], i = 0;\r\n    if (m) {\r\n        return m.call(o);\r\n    }\r\n\r\n    if (o && typeof o.length === \"number\") {\r\n        return {\r\n            next () {\r\n                if (o && i >= o.length) {\r\n                    o = void 0;\r\n                }\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    throwTypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __readFn(o: any, n: any) {\r\n    var m = typeof SymbolObj === strShimFunction && o[SymbolObj[strIterator]];\r\n    if (!m) {\r\n        return o;\r\n    }\r\n\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\r\n            ar.push(r.value);\r\n        }\r\n    } catch (error) {\r\n        e = {\r\n            error\r\n        };\r\n    } finally {\r\n        try {\r\n            // tslint:disable-next-line:no-conditional-assignment\r\n            if (r && !r.done && (m = i[\"return\"])) {\r\n                m.call(i);\r\n            }\r\n        } finally {\r\n            if (e) {\r\n                // eslint-disable-next-line no-unsafe-finally\r\n                throw e.error;\r\n            }\r\n        }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArraysFn() {\r\n    var theArgs = arguments;\r\n    // Calculate new total size\r\n    for (var s = 0, i = 0, il = theArgs.length; i < il; i++) {\r\n        s += theArgs[i].length;\r\n    }\r\n\r\n    // Create new full array\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) {\r\n        for (var a = theArgs[i], j = 0, jl = a.length; j < jl; j++, k++) {\r\n            r[k] = a[j];\r\n        }\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport function __spreadArrayFn(to: any, from: any) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\r\n        to[j] = from[i];\r\n    }\r\n\r\n    return to;\r\n}\r\n\r\nexport function __makeTemplateObjectFn(cooked: any, raw: any) {\r\n    if (objDefineProp) {\r\n        objDefineProp(cooked, \"raw\", { value: raw });\r\n    } else {\r\n        cooked.raw = raw;\r\n    }\r\n\r\n    return cooked;\r\n}\r\n\r\nexport function __importStarFn(mod: any) {\r\n    if (mod && mod.__esModule) {\r\n        return mod;\r\n    }\r\n\r\n    var result = {};\r\n    if (mod != null) {\r\n        for (var k in mod) {\r\n            if (k !== strDefault && Object.prototype.hasOwnProperty.call(mod, k)) {\r\n                __createBindingFn(result, mod, k);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set default module\r\n    if (!!objDefineProp) {\r\n        objDefineProp( result, strDefault, { enumerable: true, value: mod });\r\n    } else {\r\n        result[strDefault] = mod;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function __importDefaultFn(mod:any) {\r\n    return (mod && mod.__esModule) ? mod : { strDefault: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objCreate, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\r\n\r\ninterface DynamicGlobalSettings {\r\n    /**\r\n     * Stores the global options which will also be exposed on the runtime global\r\n     */\r\n    o: IDynamicProtoOpts,\r\n\r\n    /**\r\n     * Internal Global used to generate a unique dynamic class name, every new class will increase this value\r\n     * @ignore\r\n     */ \r\n    n: number\r\n};\r\n\r\nconst UNDEFINED = \"undefined\";\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Constructor = 'constructor';\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Prototype = 'prototype';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strFunction = 'function';\r\n\r\n/**\r\n * Used to define the name of the instance function lookup table\r\n * @ignore\r\n */ \r\nconst DynInstFuncTable = '_dynInstFuncs';\r\n \r\n/**\r\n * Name used to tag the dynamic prototype function\r\n * @ignore\r\n */ \r\nconst DynProxyTag = '_isDynProxy';\r\n \r\n/**\r\n * Name added to a prototype to define the dynamic prototype \"class\" name used to lookup the function table\r\n * @ignore\r\n */ \r\nconst DynClassName = '_dynClass';\r\n \r\n/**\r\n * Prefix added to the classname to avoid any name clashes with other instance level properties\r\n * @ignore\r\n */ \r\nconst DynClassNamePrefix = '_dynCls$';\r\n \r\n/**\r\n * A tag which is used to check if we have already to attempted to set the instance function if one is not present\r\n * @ignore\r\n */\r\nconst DynInstChkTag = '_dynInstChk';\r\n \r\n/**\r\n * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same \r\n * tag name as the function level but a different const name for readability only.\r\n */\r\nconst DynAllowInstChkTag = DynInstChkTag;\r\n \r\n/**\r\n * The global (imported) instances where the global performance options are stored\r\n */\r\nconst DynProtoDefaultOptions = '_dfOpts';\r\n \r\n/**\r\n * Value used as the name of a class when it cannot be determined\r\n * @ignore\r\n */ \r\nconst UnknownValue = '_unknown_';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst str__Proto = \"__proto__\";\r\n \r\n/**\r\n * The polyfill version of __proto__ so that it doesn't cause issues for anyone not expecting it to exist\r\n */\r\nconst DynProtoBaseProto = \"_dyn\" + str__Proto;\r\n\r\n/**\r\n * Runtime Global holder for dynamicProto settings\r\n */\r\nconst DynProtoGlobalSettings = \"__dynProto$Gbl\";\r\n\r\n/**\r\n * Track the current prototype for IE8 as you can't look back to get the prototype\r\n */\r\nconst DynProtoCurrent = \"_dynInstProto\";\r\n  \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strUseBaseInst = 'useBaseInst';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strSetInstFuncs = 'setInstFuncs';\r\n \r\nconst Obj = Object;\r\n\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nlet _objGetPrototypeOf = Obj[\"getPrototypeOf\"];\r\n\r\n/**\r\n * Pre-lookup to check for the existence of this function\r\n */\r\nlet _objGetOwnProps = Obj[\"getOwnPropertyNames\"];\r\n\r\n// Since 1.1.7 moving these to the runtime global to work around mixed version and module issues\r\n// See Issue https://github.com/microsoft/DynamicProto-JS/issues/57 for details\r\nlet _gbl = getGlobal();\r\nlet _gblInst: DynamicGlobalSettings = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {\r\n    o: {\r\n        [strSetInstFuncs]: true,\r\n        [strUseBaseInst]: true\r\n    },\r\n    n: 1000                // Start new global index @ 1000 so we \"fix\" some cases when mixed with 1.1.6 or earlier\r\n});\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype or Array prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectOrArrayPrototype(target:any) {\r\n    return target && (target === Obj[Prototype] || target === Array[Prototype]);\r\n}\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectArrayOrFunctionPrototype(target:any) {\r\n    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];\r\n}\r\n\r\n/**\r\n * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n * @ignore\r\n */ \r\nfunction _getObjProto(target:any) {\r\n    let newProto;\r\n\r\n    if (target) {\r\n        // This method doesn't exist in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n\r\n        let curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);\r\n\r\n        // Using the pre-calculated value as IE8 doesn't support looking up the prototype of a prototype and thus fails for more than 1 base class\r\n        newProto = target[DynProtoBaseProto] || curProto;\r\n        if (!objHasOwnProperty(target, DynProtoBaseProto)) {\r\n            // As this prototype doesn't have this property then this is from an inherited class so newProto is the base to return so save it\r\n            // so we can look it up value (which for a multiple hierarchy dynamicProto will be the base class)\r\n            delete target[DynProtoCurrent];     // Delete any current value allocated to this instance so we pick up the value from prototype hierarchy\r\n            newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];\r\n            target[DynProtoCurrent] = curProto;\r\n        }\r\n    }\r\n\r\n    return newProto;\r\n}\r\n\r\n/**\r\n * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6\r\n * are not enumerable.\r\n * @param target \r\n */\r\nfunction _forEachProp(target: any, func: (name: string) => void) {\r\n    let props: string[] = [];\r\n    if (_objGetOwnProps) {\r\n        props = _objGetOwnProps(target);\r\n    } else {\r\n        for (let name in target) {\r\n            if (typeof name === \"string\" && objHasOwnProperty(target, name)) {\r\n                props.push(name);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (props && props.length > 0) {\r\n        for (let lp = 0; lp < props.length; lp++) {\r\n            func(props[lp]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to check whether the provided function name is a potential candidate for dynamic\r\n * callback and prototype generation.\r\n * @param target The target object, may be a prototype or class object\r\n * @param funcName The function name\r\n * @param skipOwn Skips the check for own property\r\n * @ignore\r\n */\r\nfunction _isDynamicCandidate(target:any, funcName:string, skipOwn:boolean) {\r\n    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || objHasOwnProperty(target, funcName)) && funcName !== str__Proto && funcName !== Prototype);\r\n}\r\n\r\n/**\r\n * Helper to throw a TypeError exception\r\n * @param message the message\r\n * @ignore\r\n */\r\nfunction _throwTypeError(message:string) {\r\n    throwTypeError(\"DynamicProto: \" + message);\r\n}\r\n\r\n/**\r\n * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does \r\n * not return any inherited functions\r\n * @param thisTarget The object to get the instance functions from\r\n * @ignore\r\n */\r\nfunction _getInstanceFuncs(thisTarget:any): any {\r\n    // Get the base proto\r\n    var instFuncs = objCreate(null);\r\n\r\n    // Save any existing instance functions\r\n    _forEachProp(thisTarget, (name) => {\r\n        // Don't include any dynamic prototype instances - as we only want the real functions\r\n        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {\r\n            // Create an instance callback for passing the base function to the caller\r\n            instFuncs[name] = thisTarget[name];\r\n        }\r\n    });\r\n\r\n    return instFuncs;\r\n}\r\n\r\n/**\r\n * Returns whether the value is included in the array\r\n * @param values The array of values\r\n * @param value  The value\r\n */\r\nfunction _hasVisited(values:any[], value:any) {\r\n    for (let lp = values.length - 1; lp >= 0; lp--) {\r\n        if (values[lp] === value) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Returns an object that contains callback functions for all \"base/super\" functions, this is used to \"save\"\r\n * enabling calling super.xxx() functions without requiring that the base \"class\" has defined a prototype references\r\n * @param target The current instance\r\n * @ignore\r\n */\r\nfunction _getBaseFuncs(classProto:any, thisTarget:any, instFuncs:any, useBaseInst:boolean): any {\r\n    function _instFuncProxy(target:any, funcHost: any,  funcName: string) {\r\n        let theFunc = funcHost[funcName];\r\n        if (theFunc[DynProxyTag] && useBaseInst) {\r\n            // grab and reuse the hosted looking function (if available) otherwise the original passed function\r\n            let instFuncTable = target[DynInstFuncTable] || {};\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;\r\n            }\r\n        }\r\n\r\n        return function() {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return theFunc.apply(target, arguments);\r\n        };\r\n    }\r\n\r\n    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)\r\n    var baseFuncs = objCreate(null);\r\n    _forEachProp(instFuncs, (name) => {\r\n        // Create an instance callback for passing the base function to the caller\r\n        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);\r\n    });\r\n    \r\n    // Get the base prototype functions\r\n    var baseProto = _getObjProto(classProto);\r\n    let visited:any[] = [];\r\n\r\n    // Don't include base object functions for Object, Array or Function\r\n    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {\r\n        // look for prototype functions\r\n        _forEachProp(baseProto, (name) => {\r\n            // Don't include any dynamic prototype instances - as we only want the real functions\r\n            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the \r\n            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return\r\n            // the Object prototype methods while bypassing the check\r\n            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {\r\n                // Create an instance callback for passing the base function to the caller\r\n                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);\r\n            }\r\n        });\r\n\r\n        // We need to find all possible functions that might be overloaded by walking the entire prototype chain\r\n        // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n        visited.push(baseProto);\r\n        baseProto = _getObjProto(baseProto);\r\n    }\r\n\r\n    return baseFuncs;\r\n}\r\n\r\nfunction _getInstFunc(target: any, funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let instFunc = null;\r\n\r\n    // We need to check whether the class name is defined directly on this prototype otherwise\r\n    // it will walk the proto chain and return any parent proto classname.\r\n    if (target && objHasOwnProperty(proto, DynClassName)) {\r\n\r\n        let instFuncTable = target[DynInstFuncTable] || objCreate(null);\r\n        instFunc = (instFuncTable[proto[DynClassName]] || objCreate(null))[funcName];\r\n\r\n        if (!instFunc) {\r\n            // Avoid stack overflow from recursive calling the same function\r\n            _throwTypeError(\"Missing [\" + funcName + \"] \" + strFunction);\r\n        }\r\n\r\n        // We have the instance function, lets check it we can speed up further calls\r\n        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)\r\n        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {\r\n            // If the instance already has an instance function we can't replace it\r\n            let canAddInst = !objHasOwnProperty(target, funcName);\r\n\r\n            // Get current prototype\r\n            let objProto = _getObjProto(target);\r\n            let visited:any[] = [];\r\n\r\n            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function\r\n            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut\r\n            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {\r\n                let protoFunc = objProto[funcName];\r\n                if (protoFunc) {\r\n                    canAddInst = (protoFunc === currentDynProtoProxy);\r\n                    break;\r\n                }\r\n\r\n                // We need to find all possible initial functions to ensure that we don't bypass a valid override function\r\n                visited.push(objProto);\r\n                objProto = _getObjProto(objProto);\r\n            }\r\n\r\n            try {\r\n                if (canAddInst) {\r\n                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version\r\n                    // so it's safe to directly assign for any subsequent calls (for better performance)\r\n                    target[funcName] = instFunc;\r\n                }\r\n\r\n                // Block further attempts to set the instance function for any\r\n                instFunc[DynInstChkTag] = 1;\r\n            } catch (e) {\r\n                // Don't crash if the object is readonly or the runtime doesn't allow changing this\r\n                // And set a flag so we don't try again for any function\r\n                instFuncTable[DynAllowInstChkTag] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return instFunc;\r\n}\r\n\r\nfunction _getProtoFunc(funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let protoFunc = proto[funcName];\r\n\r\n    // Check that the prototype function is not a self reference -- try to avoid stack overflow!\r\n    if (protoFunc === currentDynProtoProxy) {\r\n        // It is so lookup the base prototype\r\n        protoFunc = _getObjProto(proto)[funcName];\r\n    }\r\n\r\n    if (typeof protoFunc !== strFunction) {\r\n        _throwTypeError(\"[\" + funcName + \"] is not a \" + strFunction);\r\n    }\r\n\r\n    return protoFunc;\r\n}\r\n\r\n/**\r\n * Add the required dynamic prototype methods to the the class prototype\r\n * @param proto - The class prototype\r\n * @param className - The instance classname \r\n * @param target - The target instance\r\n * @param baseInstFuncs - The base instance functions\r\n * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist\r\n * @ignore\r\n */\r\nfunction _populatePrototype(proto:any, className:string, target:any, baseInstFuncs:any, setInstanceFunc:boolean) {\r\n    function _createDynamicPrototype(proto:any, funcName:string) {\r\n        let dynProtoProxy = function() {\r\n            // Use the instance or prototype function\r\n            let instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return instFunc.apply(this, arguments);\r\n        };\r\n        \r\n        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing\r\n        // via which can dynamically replace the prototype function reference)\r\n        (dynProtoProxy as any)[DynProxyTag] = 1;\r\n        return dynProtoProxy;\r\n    }\r\n    \r\n    if (!_isObjectOrArrayPrototype(proto)) {\r\n        let instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || objCreate(null);\r\n        if (!_isObjectOrArrayPrototype(instFuncTable)) {\r\n            let instFuncs = instFuncTable[className] = (instFuncTable[className] || objCreate(null)); // fetch and assign if as it may not exist yet\r\n\r\n            // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;\r\n            }\r\n\r\n            if (!_isObjectOrArrayPrototype(instFuncs)) {\r\n                _forEachProp(target, (name) => {\r\n                    // Only add overridden functions\r\n                    if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name] ) {\r\n                        // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function\r\n                        instFuncs[name] = target[name];\r\n                        delete target[name];\r\n                        \r\n                        // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one\r\n                        if (!objHasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {\r\n                            proto[name] = _createDynamicPrototype(proto, name);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance\r\n * @param classProto The class prototype instance\r\n * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy\r\n * @ignore\r\n */\r\nfunction _checkPrototype(classProto:any, thisTarget:any) {\r\n    // This method doesn't existing in older browsers (e.g. IE8)\r\n    if (_objGetPrototypeOf) {\r\n        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower\r\n        let visited:any[] = [];\r\n        let thisProto = _getObjProto(thisTarget);\r\n        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {\r\n            if (thisProto === classProto) {\r\n                return true;\r\n            }\r\n\r\n            // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n            visited.push(thisProto);\r\n            thisProto = _getObjProto(thisProto);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // If objGetPrototypeOf doesn't exist then just assume everything is ok.\r\n    return true;\r\n}\r\n\r\n/**\r\n * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.\r\n * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.\r\n * @param target \r\n * @param unknownValue \r\n * @ignore\r\n */\r\nfunction _getObjName(target:any, unknownValue?:string) {\r\n    if (objHasOwnProperty(target, Prototype)) {\r\n        // Look like a prototype\r\n        return target.name || unknownValue || UnknownValue\r\n    }\r\n\r\n    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;\r\n}\r\n\r\n/**\r\n * Interface to define additional configuration options to control how the dynamic prototype functions operate.\r\n */\r\nexport interface IDynamicProtoOpts {\r\n\r\n    /**\r\n     * Should the dynamic prototype attempt to set an instance function for instances that do not already have an\r\n     * function of the same name or have been extended by a class with a (non-dynamic proto) prototype function.\r\n     */\r\n    setInstFuncs: boolean,\r\n\r\n    /**\r\n     * When looking for base (super) functions if it finds a dynamic proto instances can it use the instance functions\r\n     * and bypass the prototype lookups. Defaults to true.\r\n     */\r\n    useBaseInst?: boolean\r\n}\r\n\r\n/**\r\n * The delegate signature for the function used as the callback for dynamicProto() \r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid for the proxy instance, even \r\n * though it is only a proxy that only contains the functions \r\n * @param theTarget This is the real \"this\" of the current target object\r\n * @param baseFuncProxy The is a proxy object which ONLY contains this function that existed on the \"this\" instance before\r\n * calling dynamicProto, it does NOT contain properties of this. This is basically equivalent to using the \"super\" keyword.\r\n */\r\nexport type DynamicProtoDelegate<DPType> = (theTarget:DPType, baseFuncProxy?:DPType) => void;\r\n\r\n/**\r\n * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-\r\n * - Saves references to all defined base class functions\r\n * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all \"super\" functions.\r\n * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.\r\n * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is \r\n * passed both the target \"this\" and an object that can be used to call any base (super) functions, using this based object in place of\r\n * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct \"this\"\r\n * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions\r\n * defined in the constructor or some other function (rather than declared as complete typescript functions).\r\n * ### Usage\r\n * ```typescript\r\n * import dynamicProto from \"@microsoft/dynamicproto-js\";\r\n * class ExampleClass extends BaseClass {\r\n *     constructor() {\r\n *         dynamicProto(ExampleClass, this, (_self, base) => {\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.newFunc = () => {\r\n *                 // Access any \"this\" instance property  \r\n *                 if (_self.someProperty) {\r\n *                     ...\r\n *                 }\r\n *             }\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.myFunction = () => {\r\n *                 // Access any \"this\" instance property\r\n *                 if (_self.someProperty) {\r\n *                     // Call the base version of the function that we are overriding\r\n *                     base.myFunction();\r\n *                 }\r\n *                 ...\r\n *             }\r\n *             _self.initialize = () => {\r\n *                 ...\r\n *             }\r\n *             // Warnings: While the following will work as _self is simply a reference to\r\n *             // this, if anyone overrides myFunction() the overridden will be called first\r\n *             // as the normal JavaScript method resolution will occur and the defined\r\n *             // _self.initialize() function is actually gets removed from the instance and\r\n *             // a proxy prototype version is created to reference the created method.\r\n *             _self.initialize();\r\n *         });\r\n *     }\r\n * }\r\n * ```\r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid\r\n * @typeparam DPCls The type that contains the prototype of the current class\r\n * @param theClass - This is the current class instance which contains the prototype for the current class\r\n * @param target - The current \"this\" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.\r\n * @param delegateFunc - The callback function (closure) that will create the dynamic function\r\n * @param options - Additional options to configure how the dynamic prototype operates\r\n */\r\nexport default function dynamicProto<DPType, DPCls>(theClass:DPCls, target:DPType, delegateFunc: DynamicProtoDelegate<DPType>, options?:IDynamicProtoOpts): void {\r\n    // Make sure that the passed theClass argument looks correct\r\n    if (!objHasOwnProperty(theClass, Prototype)) {\r\n        _throwTypeError(\"theClass is an invalid class definition.\");\r\n    }\r\n\r\n    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)\r\n    let classProto = theClass[Prototype];\r\n    if (!_checkPrototype(classProto, target)) {\r\n        _throwTypeError(\"[\" + _getObjName(theClass) + \"] not in hierarchy of [\" + _getObjName(target) + \"]\");\r\n    }\r\n\r\n    let className = null;\r\n    if (objHasOwnProperty(classProto, DynClassName)) {\r\n        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)\r\n        className = classProto[DynClassName];\r\n    } else {\r\n        // As not all browser support name on the prototype creating a unique dynamic one if we have not already\r\n        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance\r\n        // function table lookup.\r\n        className = DynClassNamePrefix + _getObjName(theClass, \"_\") + \"$\" + _gblInst.n ;\r\n        _gblInst.n++;\r\n        classProto[DynClassName] = className;\r\n    }\r\n\r\n    let perfOptions = dynamicProto[DynProtoDefaultOptions];\r\n    let useBaseInst = !!perfOptions[strUseBaseInst];\r\n    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {\r\n        useBaseInst = !!options[strUseBaseInst];\r\n    }\r\n\r\n    // Get the current instance functions\r\n    let instFuncs = _getInstanceFuncs(target);\r\n\r\n    // Get all of the functions for any base instance (before they are potentially overridden)\r\n    let baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);\r\n\r\n    // Execute the delegate passing in both the current target \"this\" and \"base\" function references\r\n    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support\r\n    delegateFunc(target, baseFuncs as DPType);\r\n\r\n    // Don't allow setting instance functions for older IE instances\r\n    let setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];\r\n    if (setInstanceFunc && options) {\r\n        setInstanceFunc = !!options[strSetInstFuncs];\r\n    }\r\n\r\n    // Populate the Prototype for any overridden instance functions\r\n    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);\r\n}\r\n\r\n/**\r\n * Exposes the default global options to allow global configuration, if the global values are disabled these will override\r\n * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose\r\n * their internal usage of dynamic proto.\r\n */\r\ndynamicProto[DynProtoDefaultOptions] = _gblInst.o;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { createEnum, createTypeMap } from \"@nevware21/ts-utils\";\r\n/**\r\n * Create an enum style object which has both the key \\=\\> value and value \\=\\> key mappings\r\n * @param values - The values to populate on the new object\r\n * @returns\r\n */\r\nexport var createEnumStyle = createEnum;\r\n/**\r\n * Create a 2 index map that maps an enum's key and value to the defined map value, X[\"key\"] \\=\\> mapValue and X[0] \\=\\> mapValue.\r\n * Generic values\r\n * - E = the const enum type (typeof eRequestHeaders);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @param values - The values to populate on the new object\r\n * @returns\r\n */\r\nexport var createValueMap = createTypeMap;\r\n//# sourceMappingURL=EnumHelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, createCustomError, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nvar aggregationErrorType;\r\n/**\r\n * Throws an Aggregation Error which includes all of the errors that led to this error occurring\r\n * @param message - The message describing the aggregation error (the sourceError details are added to this)\r\n * @param sourceErrors - An array of the errors that caused this situation\r\n */\r\nexport function throwAggregationError(message, sourceErrors) {\r\n    if (!aggregationErrorType) {\r\n        aggregationErrorType = createCustomError(\"AggregationError\", function (self, args) {\r\n            if (args[_DYN_LENGTH /* @min:%2elength */] > 1) {\r\n                // Save the provided errors\r\n                self.errors = args[1];\r\n            }\r\n        });\r\n    }\r\n    var theMessage = message || \"One or more errors occurred.\";\r\n    arrForEach(sourceErrors, function (srcError, idx) {\r\n        theMessage += \"\\n\".concat(idx, \" > \").concat(dumpObj(srcError));\r\n    });\r\n    throw new aggregationErrorType(theMessage, sourceErrors || []);\r\n}\r\n//# sourceMappingURL=AggregationError.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES5 which can result in a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_TO_LOWER_CASE = \"toLowerCase\"; // Count: 11\r\nexport var _DYN_LENGTH = \"length\"; // Count: 55\r\nexport var _DYN_WARN_TO_CONSOLE = \"warnToConsole\"; // Count: 4\r\nexport var _DYN_THROW_INTERNAL = \"throwInternal\"; // Count: 5\r\nexport var _DYN_WATCH = \"watch\"; // Count: 7\r\nexport var _DYN_APPLY = \"apply\"; // Count: 7\r\nexport var _DYN_PUSH = \"push\"; // Count: 35\r\nexport var _DYN_SPLICE = \"splice\"; // Count: 8\r\nexport var _DYN_LOGGER = \"logger\"; // Count: 20\r\nexport var _DYN_CANCEL = \"cancel\"; // Count: 6\r\nexport var _DYN_INITIALIZE = \"initialize\"; // Count: 5\r\nexport var _DYN_IDENTIFIER = \"identifier\"; // Count: 8\r\nexport var _DYN_REMOVE_NOTIFICATION_0 = \"removeNotificationListener\"; // Count: 4\r\nexport var _DYN_ADD_NOTIFICATION_LIS1 = \"addNotificationListener\"; // Count: 4\r\nexport var _DYN_IS_INITIALIZED = \"isInitialized\"; // Count: 10\r\nexport var _DYN_VALUE = \"value\"; // Count: 5\r\nexport var _DYN_GET_NOTIFY_MGR = \"getNotifyMgr\"; // Count: 5\r\nexport var _DYN_GET_PLUGIN = \"getPlugin\"; // Count: 5\r\nexport var _DYN_NAME = \"name\"; // Count: 9\r\nexport var _DYN_PROCESS_NEXT = \"processNext\"; // Count: 15\r\nexport var _DYN_GET_PROCESS_TEL_CONT2 = \"getProcessTelContext\"; // Count: 2\r\nexport var _DYN_ENABLED = \"enabled\"; // Count: 6\r\nexport var _DYN_STOP_POLLING_INTERNA3 = \"stopPollingInternalLogs\"; // Count: 2\r\nexport var _DYN_UNLOAD = \"unload\"; // Count: 7\r\nexport var _DYN_ON_COMPLETE = \"onComplete\"; // Count: 4\r\nexport var _DYN_VERSION = \"version\"; // Count: 4\r\nexport var _DYN_LOGGING_LEVEL_CONSOL4 = \"loggingLevelConsole\"; // Count: 2\r\nexport var _DYN_CREATE_NEW = \"createNew\"; // Count: 7\r\nexport var _DYN_TEARDOWN = \"teardown\"; // Count: 9\r\nexport var _DYN_MESSAGE_ID = \"messageId\"; // Count: 4\r\nexport var _DYN_MESSAGE = \"message\"; // Count: 7\r\nexport var _DYN_DIAG_LOG = \"diagLog\"; // Count: 9\r\nexport var _DYN__DO_TEARDOWN = \"_doTeardown\"; // Count: 5\r\nexport var _DYN_UPDATE = \"update\"; // Count: 5\r\nexport var _DYN_GET_NEXT = \"getNext\"; // Count: 10\r\nexport var _DYN_SET_NEXT_PLUGIN = \"setNextPlugin\"; // Count: 5\r\nexport var _DYN_USER_AGENT = \"userAgent\"; // Count: 5\r\nexport var _DYN_SPLIT = \"split\"; // Count: 7\r\nexport var _DYN_REPLACE = \"replace\"; // Count: 9\r\nexport var _DYN_TYPE = \"type\"; // Count: 13\r\nexport var _DYN_EVT_NAME = \"evtName\"; // Count: 4\r\nexport var _DYN_STATUS = \"status\"; // Count: 5\r\nexport var _DYN_GET_ALL_RESPONSE_HEA5 = \"getAllResponseHeaders\"; // Count: 2\r\nexport var _DYN_IS_CHILD_EVT = \"isChildEvt\"; // Count: 3\r\nexport var _DYN_DATA = \"data\"; // Count: 6\r\nexport var _DYN_GET_CTX = \"getCtx\"; // Count: 6\r\nexport var _DYN_SET_CTX = \"setCtx\"; // Count: 10\r\nexport var _DYN_ITEMS_RECEIVED = \"itemsReceived\"; // Count: 3\r\nexport var _DYN_URL_STRING = \"urlString\"; // Count: 5\r\nexport var _DYN_HEADERS = \"headers\"; // Count: 5\r\nexport var _DYN_TIMEOUT = \"timeout\"; // Count: 6\r\nexport var _DYN_TRACE_FLAGS = \"traceFlags\"; // Count: 5\r\nexport var _DYN_GET_ATTRIBUTE = \"getAttribute\"; // Count: 3\r\n//# sourceMappingURL=__DynamicConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// ###################################################################################################################################################\r\n// Note: DON'T Export these const from the package as we are still targeting IE/ES5 this will export a mutable variables that someone could change ###\r\n// ###################################################################################################################################################\r\nexport var UNDEFINED_VALUE = undefined;\r\nexport var STR_EMPTY = \"\";\r\nexport var STR_CHANNELS = \"channels\";\r\nexport var STR_CORE = \"core\";\r\nexport var STR_CREATE_PERF_MGR = \"createPerfMgr\";\r\nexport var STR_DISABLED = \"disabled\";\r\nexport var STR_EXTENSION_CONFIG = \"extensionConfig\";\r\nexport var STR_EXTENSIONS = \"extensions\";\r\nexport var STR_PROCESS_TELEMETRY = \"processTelemetry\";\r\nexport var STR_PRIORITY = \"priority\";\r\nexport var STR_EVENTS_SENT = \"eventsSent\";\r\nexport var STR_EVENTS_DISCARDED = \"eventsDiscarded\";\r\nexport var STR_EVENTS_SEND_REQUEST = \"eventsSendRequest\";\r\nexport var STR_PERF_EVENT = \"perfEvent\";\r\nexport var STR_OFFLINE_STORE = \"offlineEventsStored\";\r\nexport var STR_OFFLINE_SENT = \"offlineBatchSent\";\r\nexport var STR_OFFLINE_DROP = \"offlineBatchDrop\";\r\nexport var STR_GET_PERF_MGR = \"getPerfMgr\";\r\nexport var STR_DOMAIN = \"domain\";\r\nexport var STR_PATH = \"path\";\r\nexport var STR_NOT_DYNAMIC_ERROR = \"Not dynamic - \";\r\n//# sourceMappingURL=InternalConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ObjAssign, ObjClass } from \"@microsoft/applicationinsights-shims\";\r\nimport { arrForEach, asString as asString21, isArray, isBoolean, isError, isFunction, isNullOrUndefined, isNumber, isObject, isPlainObject, isString, isUndefined, objDeepFreeze, objDefine, objForEachKey, objHasOwn, strIndexOf, strTrim } from \"@nevware21/ts-utils\";\r\nimport { _DYN_APPLY, _DYN_GET_ALL_RESPONSE_HEA5, _DYN_LENGTH, _DYN_NAME, _DYN_REPLACE, _DYN_SPLIT, _DYN_STATUS, _DYN_TO_LOWER_CASE } from \"../__DynamicConstants\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly\r\n// Added to help with minification\r\nvar strGetPrototypeOf = \"getPrototypeOf\";\r\nvar rCamelCase = /-([a-z])/g;\r\nvar rNormalizeInvalid = /([^\\w\\d_$])/g;\r\nvar rLeadingNumeric = /^(\\d+[\\w\\d_$])/;\r\nexport var _getObjProto = Object[strGetPrototypeOf];\r\nexport function isNotUndefined(value) {\r\n    return !isUndefined(value);\r\n}\r\nexport function isNotNullOrUndefined(value) {\r\n    return !isNullOrUndefined(value);\r\n}\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * This is a simplified version\r\n * @param name - The name to validate\r\n */\r\nexport function normalizeJsName(name) {\r\n    var value = name;\r\n    if (value && isString(value)) {\r\n        // CamelCase everything after the \"-\" and remove the dash\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rCamelCase, function (_all, letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rNormalizeInvalid, \"_\");\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rLeadingNumeric, function (_all, match) {\r\n            return \"_\" + match;\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * A simple wrapper (for minification support) to check if the value contains the search string.\r\n * @param value - The string value to check for the existence of the search value\r\n * @param search - The value search within the value\r\n */\r\nexport function strContains(value, search) {\r\n    if (value && search) {\r\n        return strIndexOf(value, search) !== -1;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function toISOString(date) {\r\n    return date && date.toISOString() || \"\";\r\n}\r\nexport var deepFreeze = objDeepFreeze;\r\n/**\r\n * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n */\r\nexport function getExceptionName(object) {\r\n    if (isError(object)) {\r\n        return object[_DYN_NAME /* @min:%2ename */];\r\n    }\r\n    return STR_EMPTY;\r\n}\r\n/**\r\n * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk\r\n * function will only be called if the new value is no equal to the original value.\r\n * @param target - The target object\r\n * @param field - The key of the target\r\n * @param value - The value to set\r\n * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set\r\n * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)\r\n * @returns The existing or new value, depending what was set\r\n */\r\nexport function setValue(target, field, value, valChk, srcChk) {\r\n    var theValue = value;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {\r\n            theValue = value;\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it\r\n * @param target - The target object to return or set the default value\r\n * @param field - The key for the field to set on the target\r\n * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added\r\n */\r\nexport function getSetValue(target, field, defValue) {\r\n    var theValue;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (!theValue && isNullOrUndefined(theValue)) {\r\n            // Supports having the default as null\r\n            theValue = !isUndefined(defValue) ? defValue : {};\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    else {\r\n        // Expanded for performance so we only check defValue if required\r\n        theValue = !isUndefined(defValue) ? defValue : {};\r\n    }\r\n    return theValue;\r\n}\r\nfunction _createProxyFunction(source, funcName) {\r\n    var srcFunc = null;\r\n    var src = null;\r\n    if (isFunction(source)) {\r\n        srcFunc = source;\r\n    }\r\n    else {\r\n        src = source;\r\n    }\r\n    return function () {\r\n        // Capture the original arguments passed to the method\r\n        var originalArguments = arguments;\r\n        if (srcFunc) {\r\n            src = srcFunc();\r\n        }\r\n        if (src) {\r\n            return src[funcName][_DYN_APPLY /* @min:%2eapply */](src, originalArguments);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from\r\n * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential\r\n * implementation issues by assigning prototype functions as instance ones\r\n *\r\n * This method is the primary method used to \"update\" the snippet proxy with the ultimate implementations.\r\n *\r\n * Special ES3 Notes:\r\n * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the\r\n * properties of \"referenced\" object will work (target.context.newValue = 10 =\\> will be reflected in the source.context as it's the\r\n * same object). ES3 Failures: assigning target.myProp = 3 -\\> Won't change source.myProp = 3, likewise the reverse would also fail.\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param chkSet - An optional callback to determine whether a specific property/function should be proxied\r\n */\r\nexport function proxyAssign(target, source, chkSet) {\r\n    if (target && source && isObject(target) && isObject(source)) {\r\n        var _loop_1 = function (field) {\r\n            if (isString(field)) {\r\n                var value = source[field];\r\n                if (isFunction(value)) {\r\n                    if (!chkSet || chkSet(field, true, source, target)) {\r\n                        // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function\r\n                        target[field] = _createProxyFunction(source, field);\r\n                    }\r\n                }\r\n                else if (!chkSet || chkSet(field, false, source, target)) {\r\n                    if (objHasOwn(target, field)) {\r\n                        // Remove any previous instance property\r\n                        delete target[field];\r\n                    }\r\n                    objDefine(target, field, {\r\n                        g: function () {\r\n                            return source[field];\r\n                        },\r\n                        s: function (theValue) {\r\n                            source[field] = theValue;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        // effectively apply/proxy full source to the target instance\r\n        for (var field in source) {\r\n            _loop_1(field);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Creates a proxy function on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param name - The function name that will be added on the target\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param theFunc - The function name on the source that will be proxied on the target\r\n * @param overwriteTarget - If `false` this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {\r\n    if (target && name && source) {\r\n        if (overwriteTarget !== false || isUndefined(target[name])) {\r\n            target[name] = _createProxyFunction(source, theFunc);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param functionsToProxy - An array of function names that will be proxied on the target\r\n * @param overwriteTarget - If false this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {\r\n    if (target && source && isObject(target) && isArray(functionsToProxy)) {\r\n        arrForEach(functionsToProxy, function (theFuncName) {\r\n            if (isString(theFuncName)) {\r\n                proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.\r\n * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance\r\n * @param defaults - Simple helper\r\n */\r\nexport function createClassFromInterface(defaults) {\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            var _this = this;\r\n            if (defaults) {\r\n                objForEachKey(defaults, function (field, value) {\r\n                    _this[field] = value;\r\n                });\r\n            }\r\n        }\r\n        return class_1;\r\n    }());\r\n}\r\n/**\r\n * A helper function to assist with JIT performance for objects that have properties added / removed dynamically\r\n * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this\r\n * function after you have finished \"updating\" the object, calling this within loops reduces or defeats the benefits.\r\n * This helps when iterating using for..in, objKeys() and objForEach()\r\n * @param theObject - The object to be optimized if possible\r\n */\r\nexport function optimizeObject(theObject) {\r\n    // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties\r\n    // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent\r\n    if (theObject && ObjAssign) {\r\n        theObject = ObjClass(ObjAssign({}, theObject));\r\n    }\r\n    return theObject;\r\n}\r\nexport function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    // Variables\r\n    var theArgs = arguments;\r\n    var extended = theArgs[0] || {};\r\n    var argLen = theArgs[_DYN_LENGTH /* @min:%2elength */];\r\n    var deep = false;\r\n    var idx = 1;\r\n    // Check for \"Deep\" flag\r\n    if (argLen > 0 && isBoolean(extended)) {\r\n        deep = extended;\r\n        extended = theArgs[idx] || {};\r\n        idx++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (!isObject(extended)) {\r\n        extended = {};\r\n    }\r\n    // Loop through each remaining object and conduct a merge\r\n    for (; idx < argLen; idx++) {\r\n        var arg = theArgs[idx];\r\n        var isArgArray = isArray(arg);\r\n        var isArgObj = isObject(arg);\r\n        for (var prop in arg) {\r\n            var propOk = (isArgArray && (prop in arg)) || (isArgObj && objHasOwn(arg, prop));\r\n            if (!propOk) {\r\n                continue;\r\n            }\r\n            var newValue = arg[prop];\r\n            var isNewArray = void 0;\r\n            // If deep merge and property is an object, merge properties\r\n            if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {\r\n                // Grab the current value of the extended object\r\n                var clone = extended[prop];\r\n                if (isNewArray) {\r\n                    if (!isArray(clone)) {\r\n                        // We can't \"merge\" an array with a non-array so overwrite the original\r\n                        clone = [];\r\n                    }\r\n                }\r\n                else if (!isPlainObject(clone)) {\r\n                    // We can't \"merge\" an object with a non-object\r\n                    clone = {};\r\n                }\r\n                // Never move the original objects always clone them\r\n                newValue = objExtend(deep, clone, newValue);\r\n            }\r\n            // Assign the new (or previous) value (unless undefined)\r\n            if (newValue !== undefined) {\r\n                extended[prop] = newValue;\r\n            }\r\n        }\r\n    }\r\n    return extended;\r\n}\r\nexport var asString = asString21;\r\nexport function isFeatureEnabled(feature, cfg) {\r\n    var rlt = false;\r\n    var ft = cfg && cfg.featureOptIn && cfg.featureOptIn[feature];\r\n    if (feature && ft) {\r\n        var mode = ft.mode;\r\n        // NOTE: None will be considered as true\r\n        rlt = (mode == 3 /* FeatureOptInMode.enable */) || (mode == 1 /* FeatureOptInMode.none */);\r\n    }\r\n    return rlt;\r\n}\r\nexport function getResponseText(xhr) {\r\n    try {\r\n        return xhr.responseText;\r\n    }\r\n    catch (e) {\r\n        // Best effort, as XHR may throw while XDR wont so just ignore\r\n    }\r\n    return null;\r\n}\r\nexport function formatErrorMessageXdr(xdr, message) {\r\n    if (xdr) {\r\n        return \"XDomainRequest,Response:\" + getResponseText(xdr) || \"\";\r\n    }\r\n    return message;\r\n}\r\nexport function formatErrorMessageXhr(xhr, message) {\r\n    if (xhr) {\r\n        return \"XMLHttpRequest,Status:\" + xhr[_DYN_STATUS /* @min:%2estatus */] + \",Response:\" + getResponseText(xhr) || xhr.response || \"\";\r\n    }\r\n    return message;\r\n}\r\nexport function prependTransports(theTransports, newTransports) {\r\n    if (newTransports) {\r\n        if (isNumber(newTransports)) {\r\n            theTransports = [newTransports].concat(theTransports);\r\n        }\r\n        else if (isArray(newTransports)) {\r\n            theTransports = newTransports.concat(theTransports);\r\n        }\r\n    }\r\n    return theTransports;\r\n}\r\nvar strDisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nvar strWithCredentials = \"withCredentials\";\r\nvar strTimeout = \"timeout\";\r\n/**\r\n * Create and open an XMLHttpRequest object\r\n * @param method - The request method\r\n * @param urlString - The url\r\n * @param withCredentials - Option flag indicating that credentials should be sent\r\n * @param disabled - Optional flag indicating that the XHR object should be marked as disabled and not tracked (default is false)\r\n * @param isSync - Optional flag indicating if the instance should be a synchronous request (defaults to false)\r\n * @param timeout - Optional value identifying the timeout value that should be assigned to the XHR request\r\n * @returns A new opened XHR request\r\n */\r\nexport function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {\r\n    if (disabled === void 0) { disabled = false; }\r\n    if (isSync === void 0) { isSync = false; }\r\n    function _wrapSetXhrProp(xhr, prop, value) {\r\n        try {\r\n            xhr[prop] = value;\r\n        }\r\n        catch (e) {\r\n            // - Wrapping as depending on the environment setting the property may fail (non-terminally)\r\n        }\r\n    }\r\n    var xhr = new XMLHttpRequest();\r\n    if (disabled) {\r\n        // Tag the instance so it's not tracked (trackDependency)\r\n        // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would\r\n        // cause the request to fail and we no telemetry would be sent\r\n        _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);\r\n    }\r\n    if (withCredentials) {\r\n        // Some libraries require that the withCredentials flag is set \"before\" open and\r\n        // - Wrapping as IE 10 has started throwing when setting before open\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    xhr.open(method, urlString, !isSync);\r\n    if (withCredentials) {\r\n        // withCredentials should be set AFTER open (https://xhr.spec.whatwg.org/#the-withcredentials-attribute)\r\n        // And older firefox instances from 11+ will throw for sync events (current versions don't) which happens during unload processing\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    // Only set the timeout for asynchronous requests as\r\n    // \"Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception.\"\"\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\r\n    if (!isSync && timeout) {\r\n        _wrapSetXhrProp(xhr, strTimeout, timeout);\r\n    }\r\n    return xhr;\r\n}\r\n/**\r\n* Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n* @internal\r\n*/\r\n// tslint:disable-next-line: align\r\nexport function convertAllHeadersToMap(headersString) {\r\n    var headers = {};\r\n    if (isString(headersString)) {\r\n        var headersArray = strTrim(headersString)[_DYN_SPLIT /* @min:%2esplit */](/[\\r\\n]+/);\r\n        arrForEach(headersArray, function (headerEntry) {\r\n            if (headerEntry) {\r\n                var idx = headerEntry.indexOf(\": \");\r\n                if (idx !== -1) {\r\n                    // The new spec has the headers returning all as lowercase -- but not all browsers do this yet\r\n                    var header = strTrim(headerEntry.substring(0, idx))[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                    var value = strTrim(headerEntry.substring(idx + 1));\r\n                    headers[header] = value;\r\n                }\r\n                else {\r\n                    headers[strTrim(headerEntry)] = 1;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return headers;\r\n}\r\n/**\r\n* append the XHR headers.\r\n* @internal\r\n*/\r\nexport function _appendHeader(theHeaders, xhr, name) {\r\n    if (!theHeaders[name] && xhr && xhr.getResponseHeader) {\r\n        var value = xhr.getResponseHeader(name);\r\n        if (value) {\r\n            theHeaders[name] = strTrim(value);\r\n        }\r\n    }\r\n    return theHeaders;\r\n}\r\nvar STR_KILL_DURATION_HEADER = \"kill-duration\";\r\nvar STR_KILL_DURATION_SECONDS_HEADER = \"kill-duration-seconds\";\r\nvar STR_TIME_DELTA_HEADER = \"time-delta-millis\";\r\n/**\r\n* get the XHR getAllResponseHeaders.\r\n* @internal\r\n*/\r\nexport function _getAllResponseHeaders(xhr, isOneDs) {\r\n    var theHeaders = {};\r\n    if (!xhr[_DYN_GET_ALL_RESPONSE_HEA5 /* @min:%2egetAllResponseHeaders */]) {\r\n        // Firefox 2-63 doesn't have getAllResponseHeaders function but it does have getResponseHeader\r\n        // Only call these if getAllResponseHeaders doesn't exist, otherwise we can get invalid response errors\r\n        // as collector is not currently returning the correct header to allow JS to access these headers\r\n        if (!!isOneDs) {\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_TIME_DELTA_HEADER);\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_HEADER);\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_SECONDS_HEADER);\r\n        }\r\n    }\r\n    else {\r\n        theHeaders = convertAllHeadersToMap(xhr[_DYN_GET_ALL_RESPONSE_HEA5 /* @min:%2egetAllResponseHeaders */]());\r\n    }\r\n    return theHeaders;\r\n}\r\n//# sourceMappingURL=HelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { getDocument, getInst, getNavigator, getPerformance, hasNavigator, isFunction, isString, isUndefined, mathMax, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { strContains } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\r\nvar strDocumentMode = \"documentMode\";\r\nvar strLocation = \"location\";\r\nvar strConsole = \"console\";\r\nvar strJSON = \"JSON\";\r\nvar strCrypto = \"crypto\";\r\nvar strMsCrypto = \"msCrypto\";\r\nvar strReactNative = \"ReactNative\";\r\nvar strMsie = \"msie\";\r\nvar strTrident = \"trident/\";\r\nvar strXMLHttpRequest = \"XMLHttpRequest\";\r\nvar _isTrident = null;\r\nvar _navUserAgentCheck = null;\r\nvar _enableMocks = false;\r\nvar _useXDomainRequest = null;\r\nvar _beaconsSupported = null;\r\nfunction _hasProperty(theClass, property) {\r\n    var supported = false;\r\n    if (theClass) {\r\n        try {\r\n            supported = property in theClass;\r\n            if (!supported) {\r\n                var proto = theClass[strShimPrototype];\r\n                if (proto) {\r\n                    supported = property in proto;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Do Nothing\r\n        }\r\n        if (!supported) {\r\n            try {\r\n                var tmp = new theClass();\r\n                supported = !isUndefined(tmp[property]);\r\n            }\r\n            catch (e) {\r\n                // Do Nothing\r\n            }\r\n        }\r\n    }\r\n    return supported;\r\n}\r\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled - A flag to enable or disable the mock\r\n */\r\nexport function setEnableEnvMocks(enabled) {\r\n    _enableMocks = enabled;\r\n}\r\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\r\nexport function getLocation(checkForMock) {\r\n    if (checkForMock && _enableMocks) {\r\n        var mockLocation = getInst(\"__mockLocation\");\r\n        if (mockLocation) {\r\n            return mockLocation;\r\n        }\r\n    }\r\n    if (typeof location === strShimObject && location) {\r\n        return location;\r\n    }\r\n    return getInst(strLocation);\r\n}\r\n/**\r\n * Returns the global console object\r\n */\r\nexport function getConsole() {\r\n    if (typeof console !== strShimUndefined) {\r\n        return console;\r\n    }\r\n    return getInst(strConsole);\r\n}\r\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasJSON() {\r\n    return Boolean((typeof JSON === strShimObject && JSON) || getInst(strJSON) !== null);\r\n}\r\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\r\nexport function getJSON() {\r\n    if (hasJSON()) {\r\n        return JSON || getInst(strJSON);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getCrypto() {\r\n    return getInst(strCrypto);\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getMsCrypto() {\r\n    return getInst(strMsCrypto);\r\n}\r\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\r\nexport function isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    var nav = getNavigator();\r\n    if (nav && nav.product) {\r\n        return nav.product === strReactNative;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\r\nexport function isIE() {\r\n    var nav = getNavigator();\r\n    if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\r\n        // Added to support test mocking of the user agent\r\n        _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\r\n        var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n        _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));\r\n    }\r\n    return _isTrident;\r\n}\r\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\r\nexport function getIEVersion(userAgentStr) {\r\n    if (userAgentStr === void 0) { userAgentStr = null; }\r\n    if (!userAgentStr) {\r\n        var navigator_1 = getNavigator() || {};\r\n        userAgentStr = navigator_1 ? (navigator_1.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\r\n    if (strContains(ua, strMsie)) {\r\n        var doc = getDocument() || {};\r\n        return mathMax(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), (doc[strDocumentMode] || 0));\r\n    }\r\n    else if (strContains(ua, strTrident)) {\r\n        var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\r\n        if (tridentVer) {\r\n            return tridentVer + 4;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function isSafari(userAgentStr) {\r\n    if (!userAgentStr || !isString(userAgentStr)) {\r\n        var navigator_2 = getNavigator() || {};\r\n        userAgentStr = navigator_2 ? (navigator_2.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    return (strIndexOf(ua, \"safari\") >= 0);\r\n}\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @returns True if supported, false otherwise.\r\n */\r\nexport function isBeaconsSupported(useCached) {\r\n    if (_beaconsSupported === null || useCached === false) {\r\n        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\r\n    }\r\n    return _beaconsSupported;\r\n}\r\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isFetchSupported(withKeepAlive) {\r\n    var isSupported = false;\r\n    try {\r\n        isSupported = !!getInst(\"fetch\");\r\n        var request = getInst(\"Request\");\r\n        if (isSupported && withKeepAlive && request) {\r\n            isSupported = _hasProperty(request, \"keepalive\");\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nexport function useXDomainRequest() {\r\n    if (_useXDomainRequest === null) {\r\n        _useXDomainRequest = (typeof XDomainRequest !== strShimUndefined);\r\n        if (_useXDomainRequest && isXhrSupported()) {\r\n            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getInst(strXMLHttpRequest), \"withCredentials\");\r\n        }\r\n    }\r\n    return _useXDomainRequest;\r\n}\r\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isXhrSupported() {\r\n    var isSupported = false;\r\n    try {\r\n        var xmlHttpRequest = getInst(strXMLHttpRequest);\r\n        isSupported = !!xmlHttpRequest;\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nfunction _getNamedValue(values, name) {\r\n    if (values) {\r\n        for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            var value = values[i];\r\n            if (value[_DYN_NAME /* @min:%2ename */]) {\r\n                if (value[_DYN_NAME /* @min:%2ename */] === name) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name - The name of the meta-tag to find.\r\n */\r\nexport function findMetaTag(name) {\r\n    var doc = getDocument();\r\n    if (doc && name) {\r\n        // Look for a meta-tag\r\n        return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name - The name of the server timing value to find.\r\n */\r\nexport function findNamedServerTiming(name) {\r\n    var value;\r\n    var perf = getPerformance();\r\n    if (perf) {\r\n        // Try looking for a server-timing header\r\n        var navPerf = perf.getEntriesByType(\"navigation\") || [];\r\n        value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\r\n    }\r\n    return value;\r\n}\r\n// TODO: should reuse this method for analytics plugin\r\nexport function dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function createCustomDomEvent(eventName, details) {\r\n    var event = null;\r\n    var detail = { detail: details || null };\r\n    if (isFunction(CustomEvent)) { // Use CustomEvent constructor when available\r\n        event = new CustomEvent(eventName, detail);\r\n    }\r\n    else { // CustomEvent has no constructor in IE\r\n        var doc = getDocument();\r\n        if (doc && doc.createEvent) {\r\n            event = doc.createEvent(\"CustomEvent\");\r\n            event.initCustomEvent(eventName, true, true, detail);\r\n        }\r\n    }\r\n    return event;\r\n}\r\nexport function sendCustomEvent(evtName, cfg, customDetails) {\r\n    var global = getGlobal();\r\n    if (global && global.CustomEvent) {\r\n        try {\r\n            var details = { cfg: cfg || null, customDetails: customDetails || null };\r\n            return dispatchEvent(global, createCustomDomEvent(evtName, details));\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=EnvUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { mathFloor, utcNow } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { getCrypto, getMsCrypto, isIE } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar UInt32Mask = 0x100000000;\r\nvar MaxUInt32 = 0xffffffff;\r\nvar SEED1 = 123456789;\r\nvar SEED2 = 987654321;\r\n// MWC based Random generator (for IE)\r\nvar _mwcSeeded = false;\r\nvar _mwcW = SEED1;\r\nvar _mwcZ = SEED2;\r\n// Takes any integer\r\nfunction _mwcSeed(seedValue) {\r\n    if (seedValue < 0) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        seedValue >>>= 0;\r\n    }\r\n    _mwcW = (SEED1 + seedValue) & MaxUInt32;\r\n    _mwcZ = (SEED2 - seedValue) & MaxUInt32;\r\n    _mwcSeeded = true;\r\n}\r\nfunction _autoSeedMwc() {\r\n    // Simple initialization using default Math.random() - So we inherit any entropy from the browser\r\n    // and bitwise XOR with the current milliseconds\r\n    try {\r\n        var now = utcNow() & 0x7fffffff;\r\n        _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);\r\n    }\r\n    catch (e) {\r\n        // Don't crash if something goes wrong\r\n    }\r\n}\r\n/**\r\n * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.\r\n * So maxValue(16) will produce a number from 0..16 (range of 17)\r\n * @param maxValue - The max value for the range\r\n */\r\nexport function randomValue(maxValue) {\r\n    if (maxValue > 0) {\r\n        return mathFloor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function random32(signed) {\r\n    var value = 0;\r\n    var c = getCrypto() || getMsCrypto();\r\n    if (c && c.getRandomValues) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;\r\n    }\r\n    if (value === 0 && isIE()) {\r\n        // For IE 6, 7, 8 (especially on XP) Math.random is not very random\r\n        if (!_mwcSeeded) {\r\n            // Set the seed for the Mwc algorithm\r\n            _autoSeedMwc();\r\n        }\r\n        // Don't use Math.random for IE\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mwcRandom32() & MaxUInt32;\r\n    }\r\n    if (value === 0) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mathFloor((UInt32Mask * Math.random()) | 0);\r\n    }\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Seed the MWC random number generator with the specified seed or a random value\r\n * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen\r\n */\r\nexport function mwcRandomSeed(value) {\r\n    if (!value) {\r\n        _autoSeedMwc();\r\n    }\r\n    else {\r\n        _mwcSeed(value);\r\n    }\r\n}\r\n/**\r\n * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)\r\n * instead of Math.random() defaults to un-signed.\r\n * Used as a replacement random generator for IE to avoid issues with older IE instances.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function mwcRandom32(signed) {\r\n    _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;\r\n    _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;\r\n    var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Generate random base64 id string.\r\n * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)\r\n * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22\r\n */\r\nexport function newId(maxLength) {\r\n    if (maxLength === void 0) { maxLength = 22; }\r\n    var base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    // Start with an initial random number, consuming the value in reverse byte order\r\n    var number = random32() >>> 0; // Make sure it's a +ve number\r\n    var chars = 0;\r\n    var result = STR_EMPTY;\r\n    while (result[_DYN_LENGTH /* @min:%2elength */] < maxLength) {\r\n        chars++;\r\n        result += base64chars.charAt(number & 0x3F);\r\n        number >>>= 6; // Zero fill with right shift\r\n        if (chars === 5) {\r\n            // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char\r\n            // So add on another 30 bits and make sure it's +ve\r\n            number = (((random32() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;\r\n            chars = 0; // We need to reset the number every 5 chars (30 bits)\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=RandomHelper.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { normalizeJsName } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nimport { newId } from \"./RandomHelper\";\r\nvar version = '3.3.6';\r\nvar instanceName = \".\" + newId(6);\r\nvar _dataUid = 0;\r\n// Accepts only:\r\n//  - Node\r\n//    - Node.ELEMENT_NODE\r\n//    - Node.DOCUMENT_NODE\r\n//  - Object\r\n//    - Any\r\nfunction _canAcceptData(target) {\r\n    return target.nodeType === 1 || target.nodeType === 9 || !(+target.nodeType);\r\n}\r\nfunction _getCache(data, target) {\r\n    var theCache = target[data.id];\r\n    if (!theCache) {\r\n        theCache = {};\r\n        try {\r\n            if (_canAcceptData(target)) {\r\n                objDefine(target, data.id, {\r\n                    e: false,\r\n                    v: theCache\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Not all environments allow extending all objects, so just ignore the cache in those cases\r\n        }\r\n    }\r\n    return theCache;\r\n}\r\nexport function createUniqueNamespace(name, includeVersion) {\r\n    if (includeVersion === void 0) { includeVersion = false; }\r\n    return normalizeJsName(name + (_dataUid++) + (includeVersion ? \".\" + version : STR_EMPTY) + instanceName);\r\n}\r\nexport function createElmNodeData(name) {\r\n    var data = {\r\n        id: createUniqueNamespace(\"_aiData-\" + (name || STR_EMPTY) + \".\" + version),\r\n        accept: function (target) {\r\n            return _canAcceptData(target);\r\n        },\r\n        get: function (target, name, defValue, addDefault) {\r\n            var theCache = target[data.id];\r\n            if (!theCache) {\r\n                if (addDefault) {\r\n                    // Side effect is adds the cache\r\n                    theCache = _getCache(data, target);\r\n                    theCache[normalizeJsName(name)] = defValue;\r\n                }\r\n                return defValue;\r\n            }\r\n            return theCache[normalizeJsName(name)];\r\n        },\r\n        kill: function (target, name) {\r\n            if (target && target[name]) {\r\n                try {\r\n                    delete target[name];\r\n                }\r\n                catch (e) {\r\n                    // Just cleaning up, so if this fails -- ignore\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return data;\r\n}\r\n//# sourceMappingURL=DataCacheHelper.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { asString, isArray, isDefined, isNullOrUndefined, isObject, isPlainObject, isUndefined, objForEachKey, objHasOwn } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nfunction _isConfigDefaults(value) {\r\n    return (value && isObject(value) && (value.isVal || value.fb || objHasOwn(value, \"v\") || objHasOwn(value, \"mrg\") || objHasOwn(value, \"ref\") || value.set));\r\n}\r\nfunction _getDefault(dynamicHandler, theConfig, cfgDefaults) {\r\n    var defValue;\r\n    var isDefaultValid = cfgDefaults.dfVal || isDefined;\r\n    // There is a fallback config key so try and grab that first\r\n    if (theConfig && cfgDefaults.fb) {\r\n        var fallbacks = cfgDefaults.fb;\r\n        if (!isArray(fallbacks)) {\r\n            fallbacks = [fallbacks];\r\n        }\r\n        for (var lp = 0; lp < fallbacks[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n            var fallback = fallbacks[lp];\r\n            var fbValue = theConfig[fallback];\r\n            if (isDefaultValid(fbValue)) {\r\n                defValue = fbValue;\r\n            }\r\n            else if (dynamicHandler) {\r\n                // Needed to ensure that the fallback value (and potentially) new field is also dynamic even if null/undefined\r\n                fbValue = dynamicHandler.cfg[fallback];\r\n                if (isDefaultValid(fbValue)) {\r\n                    defValue = fbValue;\r\n                }\r\n                // Needed to ensure that the fallback value (and potentially) new field is also dynamic even if null/undefined\r\n                dynamicHandler.set(dynamicHandler.cfg, asString(fallback), fbValue);\r\n            }\r\n            if (isDefaultValid(defValue)) {\r\n                // We have a valid default so break out of the look\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // If the value is still not defined and we have a default value then use that\r\n    if (!isDefaultValid(defValue) && isDefaultValid(cfgDefaults.v)) {\r\n        defValue = cfgDefaults.v;\r\n    }\r\n    return defValue;\r\n}\r\n/**\r\n * Recursively resolve the default value\r\n * @param dynamicHandler\r\n * @param theConfig\r\n * @param cfgDefaults\r\n * @returns\r\n */\r\nfunction _resolveDefaultValue(dynamicHandler, theConfig, cfgDefaults) {\r\n    var theValue = cfgDefaults;\r\n    if (cfgDefaults && _isConfigDefaults(cfgDefaults)) {\r\n        theValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);\r\n    }\r\n    if (theValue) {\r\n        if (_isConfigDefaults(theValue)) {\r\n            theValue = _resolveDefaultValue(dynamicHandler, theConfig, theValue);\r\n        }\r\n        var newValue_1;\r\n        if (isArray(theValue)) {\r\n            newValue_1 = [];\r\n            newValue_1[_DYN_LENGTH /* @min:%2elength */] = theValue[_DYN_LENGTH /* @min:%2elength */];\r\n        }\r\n        else if (isPlainObject(theValue)) {\r\n            newValue_1 = {};\r\n        }\r\n        if (newValue_1) {\r\n            objForEachKey(theValue, function (key, value) {\r\n                if (value && _isConfigDefaults(value)) {\r\n                    value = _resolveDefaultValue(dynamicHandler, theConfig, value);\r\n                }\r\n                newValue_1[key] = value;\r\n            });\r\n            theValue = newValue_1;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Applies the default value on the config property and makes sure that it's dynamic\r\n * @param theConfig\r\n * @param name\r\n * @param defaultValue\r\n */\r\nexport function _applyDefaultValue(dynamicHandler, theConfig, name, defaultValue) {\r\n    // Resolve the initial config value from the provided value or use the defined default\r\n    var isValid;\r\n    var setFn;\r\n    var defValue;\r\n    var cfgDefaults = defaultValue;\r\n    var mergeDf;\r\n    var reference;\r\n    var readOnly;\r\n    var blkDynamicValue;\r\n    if (_isConfigDefaults(cfgDefaults)) {\r\n        // looks like a IConfigDefault\r\n        isValid = cfgDefaults.isVal;\r\n        setFn = cfgDefaults.set;\r\n        readOnly = cfgDefaults.rdOnly;\r\n        blkDynamicValue = cfgDefaults.blkVal;\r\n        mergeDf = cfgDefaults.mrg;\r\n        reference = cfgDefaults.ref;\r\n        if (!reference && isUndefined(reference)) {\r\n            reference = !!mergeDf;\r\n        }\r\n        defValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);\r\n    }\r\n    else {\r\n        defValue = defaultValue;\r\n    }\r\n    if (blkDynamicValue) {\r\n        // Mark the property so that any value assigned will be blocked from conversion, we need to do this\r\n        // before assigning or fetching the value to ensure it's not converted\r\n        dynamicHandler.blkVal(theConfig, name);\r\n    }\r\n    // Set the value to the default value;\r\n    var theValue;\r\n    var usingDefault = true;\r\n    var cfgValue = theConfig[name];\r\n    // try and get and user provided values\r\n    if (cfgValue || !isNullOrUndefined(cfgValue)) {\r\n        // Use the defined theConfig[name] value\r\n        theValue = cfgValue;\r\n        usingDefault = false;\r\n        // The values are different and we have a special default value check, which is used to\r\n        // override config values like empty strings to continue using the default\r\n        if (isValid && theValue !== defValue && !isValid(theValue)) {\r\n            theValue = defValue;\r\n            usingDefault = true;\r\n        }\r\n        if (setFn) {\r\n            theValue = setFn(theValue, defValue, theConfig);\r\n            usingDefault = theValue === defValue;\r\n        }\r\n    }\r\n    if (!usingDefault) {\r\n        if (isPlainObject(theValue) || isArray(defValue)) {\r\n            // we are using the user supplied value and it's an object\r\n            if (mergeDf && defValue && (isPlainObject(defValue) || isArray(defValue))) {\r\n                // Resolve/apply the defaults\r\n                objForEachKey(defValue, function (dfName, dfValue) {\r\n                    // Sets the value and makes it dynamic (if it doesn't already exist)\r\n                    _applyDefaultValue(dynamicHandler, theValue, dfName, dfValue);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    else if (defValue) {\r\n        // Just resolve the default\r\n        theValue = _resolveDefaultValue(dynamicHandler, theConfig, defValue);\r\n    }\r\n    else {\r\n        theValue = defValue;\r\n    }\r\n    // if (theValue && usingDefault && (isPlainObject(theValue) || isArray(theValue))) {\r\n    //     theValue = _cfgDeepCopy(theValue);\r\n    // }\r\n    // Needed to ensure that the (potentially) new field is dynamic even if null/undefined\r\n    dynamicHandler.set(theConfig, name, theValue);\r\n    if (reference) {\r\n        dynamicHandler.ref(theConfig, name);\r\n    }\r\n    if (readOnly) {\r\n        dynamicHandler.rdOnly(theConfig, name);\r\n    }\r\n}\r\n//# sourceMappingURL=ConfigDefaults.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { isArray, isPlainObject, objForEachKey, symbolFor, throwTypeError } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\n// Using Symbol.for so that if the same symbol was already created it would be returned\r\n// To handle multiple instances using potentially different versions we are not using\r\n// createUniqueNamespace()\r\nexport var CFG_HANDLER_LINK = symbolFor(\"[[ai_dynCfg_1]]\");\r\n/**\r\n * @internal\r\n * @ignore\r\n * The symbol to tag objects / arrays with if they should not be converted\r\n */\r\nvar BLOCK_DYNAMIC = symbolFor(\"[[ai_blkDynCfg_1]]\");\r\n/**\r\n * @internal\r\n * @ignore\r\n * The symbol to tag objects to indicate that when included into the configuration that\r\n * they should be converted into a trackable dynamic object.\r\n */\r\nvar FORCE_DYNAMIC = symbolFor(\"[[ai_frcDynCfg_1]]\");\r\nexport function _cfgDeepCopy(source) {\r\n    if (source) {\r\n        var target_1;\r\n        if (isArray(source)) {\r\n            target_1 = [];\r\n            target_1[_DYN_LENGTH /* @min:%2elength */] = source[_DYN_LENGTH /* @min:%2elength */];\r\n        }\r\n        else if (isPlainObject(source)) {\r\n            target_1 = {};\r\n        }\r\n        if (target_1) {\r\n            // Copying index values by property name as the extensionConfig can be an array or object\r\n            objForEachKey(source, function (key, value) {\r\n                // Perform a deep copy of the object\r\n                target_1[key] = _cfgDeepCopy(value);\r\n            });\r\n            return target_1;\r\n        }\r\n    }\r\n    return source;\r\n}\r\n/**\r\n * @internal\r\n * Get the dynamic config handler if the value is already dynamic\r\n * @returns\r\n */\r\nexport function getDynamicConfigHandler(value) {\r\n    if (value) {\r\n        var handler = value[CFG_HANDLER_LINK] || value;\r\n        if (handler.cfg && (handler.cfg === value || handler.cfg[CFG_HANDLER_LINK] === handler)) {\r\n            return handler;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Mark the provided value so that if it's included into the configuration it will NOT have\r\n * its properties converted into a dynamic (reactive) object. If the object is not a plain object\r\n * or an array (ie. a class) this function has not affect as only Objects and Arrays are converted\r\n * into dynamic objects in the dynamic configuration.\r\n *\r\n * When you have tagged a value as both {@link forceDynamicConversion} and blocked force will take precedence.\r\n *\r\n * You should only need to use this function, if you are creating dynamic \"classes\" from objects\r\n * which confirm to the require interface. A common case for this is during unit testing where it's\r\n * easier to create mock extensions.\r\n *\r\n * If `value` is falsy (null / undefined / 0 / empty string etc) it will not be tagged and\r\n * if there is an exception adding the property to the value (because its frozen etc) the\r\n * exception will be swallowed\r\n *\r\n * @example\r\n * ```ts\r\n * // This is a valid \"extension\", but it is technically an object\r\n * // So when included in the config.extensions it WILL be cloned and then\r\n * // converted into a dynamic object, where all of its properties will become\r\n * // get/set object properties and will be tracked. While this WILL still\r\n * // function, when attempt to use a mocking framework on top of this the\r\n * // functions are now technically get accessors which return a function\r\n * // and this can cause some mocking frameworks to fail.\r\n * let mockChannel = {\r\n *      pause: () => { },\r\n*      resume: () => { },\r\n*      teardown: () => { },\r\n*      flush: (async: any, callBack: any) => { },\r\n*      processTelemetry: (env: any) => { },\r\n*      setNextPlugin: (next: any) => { },\r\n*      initialize: (config: any, core: any, extensions: any) => { },\r\n*      identifier: \"testChannel\",\r\n*      priority: 1003\r\n* };\r\n * ```\r\n * @param value - The object that you want to block from being converted into a\r\n * trackable dynamic object\r\n * @returns The original value\r\n */\r\nexport function blockDynamicConversion(value) {\r\n    if (value && (isPlainObject(value) || isArray(value))) {\r\n        try {\r\n            value[BLOCK_DYNAMIC] = true;\r\n        }\r\n        catch (e) {\r\n            // Don't throw for this case as it's an ask only\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * This is the reverse case of {@link blockDynamicConversion} in that this will tag an\r\n * object to indicate that it should always be converted into a dynamic trackable object\r\n * even when not an object or array. So all properties of this object will become\r\n * get / set accessor functions.\r\n *\r\n * When you have tagged a value as both {@link forceDynamicConversion} and blocked force will take precedence.\r\n *\r\n * If `value` is falsy (null / undefined / 0 / empty string etc) it will not be tagged and\r\n * if there is an exception adding the property to the value (because its frozen etc) the\r\n * exception will be swallowed.\r\n * @param value - The object that should be tagged and converted if included into a dynamic\r\n * configuration.\r\n * @returns The original value\r\n */\r\nexport function forceDynamicConversion(value) {\r\n    if (value) {\r\n        try {\r\n            value[FORCE_DYNAMIC] = true;\r\n        }\r\n        catch (e) {\r\n            // Don't throw for this case as it's an ask only\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper function to check whether an object can or should be converted into a dynamic\r\n * object.\r\n * @param value - The object to check whether it should be converted\r\n * @returns `true` if the value should be converted otherwise `false`.\r\n */\r\nexport function _canMakeDynamic(getFunc, state, value) {\r\n    var result = false;\r\n    // Object must exist and be truthy\r\n    if (value && !getFunc[state.blkVal]) {\r\n        // Tagged as always convert\r\n        result = value[FORCE_DYNAMIC];\r\n        // Check that it's not explicitly tagged as blocked\r\n        if (!result && !value[BLOCK_DYNAMIC]) {\r\n            // Only convert plain objects or arrays by default\r\n            result = isPlainObject(value) || isArray(value);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Throws an invalid access exception\r\n * @param message - The message to include in the exception\r\n */\r\nexport function throwInvalidAccess(message) {\r\n    throwTypeError(\"InvalidAccess:\" + message);\r\n}\r\n//# sourceMappingURL=DynamicSupport.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, dumpObj, isArray, objDefine, objDefineProp, objForEachKey, objGetOwnPropertyDescriptor } from \"@nevware21/ts-utils\";\r\nimport { UNDEFINED_VALUE } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_APPLY, _DYN_LOGGER, _DYN_PUSH, _DYN_SPLICE, _DYN_THROW_INTERNAL } from \"../__DynamicConstants\";\r\nimport { CFG_HANDLER_LINK, _canMakeDynamic, blockDynamicConversion, throwInvalidAccess } from \"./DynamicSupport\";\r\nvar arrayMethodsToPatch = [\r\n    \"push\",\r\n    \"pop\",\r\n    \"shift\",\r\n    \"unshift\",\r\n    \"splice\"\r\n];\r\nexport var _throwDynamicError = function (logger, name, desc, e) {\r\n    logger && logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](3 /* eLoggingSeverity.DEBUG */, 108 /* _eInternalMessageId.DynamicConfigException */, \"\".concat(desc, \" [\").concat(name, \"] failed - \") + dumpObj(e));\r\n};\r\nfunction _patchArray(state, target, name) {\r\n    if (isArray(target)) {\r\n        // Monkey Patch the methods that might change the array\r\n        arrForEach(arrayMethodsToPatch, function (method) {\r\n            var orgMethod = target[method];\r\n            target[method] = function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var result = orgMethod[_DYN_APPLY /* @min:%2eapply */](this, args);\r\n                // items may be added, removed or moved so need to make some new dynamic properties\r\n                _makeDynamicObject(state, target, name, \"Patching\");\r\n                return result;\r\n            };\r\n        });\r\n    }\r\n}\r\nfunction _getOwnPropGetter(target, name) {\r\n    var propDesc = objGetOwnPropertyDescriptor(target, name);\r\n    return propDesc && propDesc.get;\r\n}\r\nfunction _createDynamicProperty(state, theConfig, name, value) {\r\n    // Does not appear to be dynamic so lets make it so\r\n    var detail = {\r\n        n: name,\r\n        h: [],\r\n        trk: function (handler) {\r\n            if (handler && handler.fn) {\r\n                if (arrIndexOf(detail.h, handler) === -1) {\r\n                    // Add this handler to the collection that should be notified when the value changes\r\n                    detail.h[_DYN_PUSH /* @min:%2epush */](handler);\r\n                }\r\n                state.trk(handler, detail);\r\n            }\r\n        },\r\n        clr: function (handler) {\r\n            var idx = arrIndexOf(detail.h, handler);\r\n            if (idx !== -1) {\r\n                detail.h[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n            }\r\n        }\r\n    };\r\n    // Flag to optimize lookup response time by avoiding additional function calls\r\n    var checkDynamic = true;\r\n    var isObjectOrArray = false;\r\n    function _getProperty() {\r\n        if (checkDynamic) {\r\n            isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);\r\n            // Make sure that if it's an object that we make it dynamic\r\n            if (value && !value[CFG_HANDLER_LINK] && isObjectOrArray) {\r\n                // It doesn't look like it's already dynamic so lets make sure it's converted the object into a dynamic Config as well\r\n                value = _makeDynamicObject(state, value, name, \"Converting\");\r\n            }\r\n            // If it needed to be converted it now has been\r\n            checkDynamic = false;\r\n        }\r\n        // If there is an active handler then add it to the tracking set of handlers\r\n        var activeHandler = state.act;\r\n        if (activeHandler) {\r\n            detail.trk(activeHandler);\r\n        }\r\n        return value;\r\n    }\r\n    // Tag this getter as our dynamic property and provide shortcut for notifying a change\r\n    _getProperty[state.prop] = {\r\n        chng: function () {\r\n            state.add(detail);\r\n        }\r\n    };\r\n    function _setProperty(newValue) {\r\n        if (value !== newValue) {\r\n            if (!!_getProperty[state.ro] && !state.upd) {\r\n                // field is marked as readonly so return false\r\n                throwInvalidAccess(\"[\" + name + \"] is read-only:\" + dumpObj(theConfig));\r\n            }\r\n            if (checkDynamic) {\r\n                isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);\r\n                checkDynamic = false;\r\n            }\r\n            // The value must be a plain object or an array to enforce the reference (in-place updates)\r\n            var isReferenced = isObjectOrArray && _getProperty[state.rf];\r\n            if (isObjectOrArray) {\r\n                // We are about to replace a plain object or an array\r\n                if (isReferenced) {\r\n                    // Reassign the properties from the current value to the same properties from the newValue\r\n                    // This will set properties not in the newValue to undefined\r\n                    objForEachKey(value, function (key) {\r\n                        value[key] = newValue ? newValue[key] : UNDEFINED_VALUE;\r\n                    });\r\n                    // Now assign / re-assign value with all of the keys from newValue\r\n                    try {\r\n                        objForEachKey(newValue, function (key, theValue) {\r\n                            _setDynamicProperty(state, value, key, theValue);\r\n                        });\r\n                        // Now drop newValue so when we assign value later it keeps the existing reference\r\n                        newValue = value;\r\n                    }\r\n                    catch (e) {\r\n                        // Unable to convert to dynamic property so just leave as non-dynamic\r\n                        _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"Assigning\", e);\r\n                        // Mark as not an object or array so we don't try and do this again\r\n                        isObjectOrArray = false;\r\n                    }\r\n                }\r\n                else if (value && value[CFG_HANDLER_LINK]) {\r\n                    // As we are replacing the value, if it's already dynamic then we need to notify the listeners\r\n                    // for every property it has already\r\n                    objForEachKey(value, function (key) {\r\n                        // Check if the value is dynamic\r\n                        var getter = _getOwnPropGetter(value, key);\r\n                        if (getter) {\r\n                            // And if it is tell it's listeners that the value has changed\r\n                            var valueState = getter[state.prop];\r\n                            valueState && valueState.chng();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (newValue !== value) {\r\n                var newIsObjectOrArray = newValue && _canMakeDynamic(_getProperty, state, newValue);\r\n                if (!isReferenced && newIsObjectOrArray) {\r\n                    // As the newValue is an object/array lets preemptively make it dynamic\r\n                    newValue = _makeDynamicObject(state, newValue, name, \"Converting\");\r\n                }\r\n                // Now assign the internal \"value\" to the newValue\r\n                value = newValue;\r\n                isObjectOrArray = newIsObjectOrArray;\r\n            }\r\n            // Cause any listeners to be scheduled for notification\r\n            state.add(detail);\r\n        }\r\n    }\r\n    objDefine(theConfig, detail.n, { g: _getProperty, s: _setProperty });\r\n}\r\nexport function _setDynamicProperty(state, target, name, value) {\r\n    if (target) {\r\n        // To be a dynamic property it needs to have a get function\r\n        var getter = _getOwnPropGetter(target, name);\r\n        var isDynamic = getter && !!getter[state.prop];\r\n        if (!isDynamic) {\r\n            _createDynamicProperty(state, target, name, value);\r\n        }\r\n        else {\r\n            // Looks like it's already dynamic just assign the new value\r\n            target[name] = value;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexport function _setDynamicPropertyState(state, target, name, flags) {\r\n    if (target) {\r\n        // To be a dynamic property it needs to have a get function\r\n        var getter = _getOwnPropGetter(target, name);\r\n        var isDynamic = getter && !!getter[state.prop];\r\n        var inPlace = flags && flags[0 /* _eSetDynamicPropertyFlags.inPlace */];\r\n        var rdOnly = flags && flags[1 /* _eSetDynamicPropertyFlags.readOnly */];\r\n        var blkProp = flags && flags[2 /* _eSetDynamicPropertyFlags.blockDynamicProperty */];\r\n        if (!isDynamic) {\r\n            if (blkProp) {\r\n                try {\r\n                    // Attempt to mark the target as blocked from conversion\r\n                    blockDynamicConversion(target);\r\n                }\r\n                catch (e) {\r\n                    _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"Blocking\", e);\r\n                }\r\n            }\r\n            try {\r\n                // Make sure it's dynamic so that we can tag the property as per the state\r\n                _setDynamicProperty(state, target, name, target[name]);\r\n                getter = _getOwnPropGetter(target, name);\r\n            }\r\n            catch (e) {\r\n                // Unable to convert to dynamic property so just leave as non-dynamic\r\n                _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"State\", e);\r\n            }\r\n        }\r\n        // Assign the optional flags if true\r\n        if (inPlace) {\r\n            getter[state.rf] = inPlace;\r\n        }\r\n        if (rdOnly) {\r\n            getter[state.ro] = rdOnly;\r\n        }\r\n        if (blkProp) {\r\n            getter[state.blkVal] = true;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexport function _makeDynamicObject(state, target, name, desc) {\r\n    try {\r\n        // Assign target with new value properties (converting into dynamic properties in the process)\r\n        objForEachKey(target, function (key, value) {\r\n            // Assign and/or make the property dynamic\r\n            _setDynamicProperty(state, target, key, value);\r\n        });\r\n        if (!target[CFG_HANDLER_LINK]) {\r\n            // Link the config back to the dynamic config details\r\n            objDefineProp(target, CFG_HANDLER_LINK, {\r\n                get: function () {\r\n                    return state.hdlr;\r\n                }\r\n            });\r\n            _patchArray(state, target, name);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Unable to convert to dynamic property so just leave as non-dynamic\r\n        _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, desc, e);\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=DynamicProperty.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, dumpObj, newSymbol, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { throwAggregationError } from \"../JavaScriptSDK/AggregationError\";\r\nimport { _DYN_CANCEL, _DYN_LENGTH, _DYN_LOGGER, _DYN_PUSH, _DYN_THROW_INTERNAL } from \"../__DynamicConstants\";\r\nvar symPrefix = \"[[ai_\";\r\nvar symPostfix = \"]]\";\r\nexport function _createState(cfgHandler) {\r\n    var dynamicPropertySymbol = newSymbol(symPrefix + \"get\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyReadOnly = newSymbol(symPrefix + \"ro\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyReferenced = newSymbol(symPrefix + \"rf\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyBlockValue = newSymbol(symPrefix + \"blkVal\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyDetail = newSymbol(symPrefix + \"dtl\" + cfgHandler.uid + symPostfix);\r\n    var _waitingHandlers = null;\r\n    var _watcherTimer = null;\r\n    var theState;\r\n    function _useHandler(activeHandler, callback) {\r\n        var prevWatcher = theState.act;\r\n        try {\r\n            theState.act = activeHandler;\r\n            if (activeHandler && activeHandler[dynamicPropertyDetail]) {\r\n                // Clear out the previously tracked details for this handler, so that access are re-evaluated\r\n                arrForEach(activeHandler[dynamicPropertyDetail], function (detail) {\r\n                    detail.clr(activeHandler);\r\n                });\r\n                activeHandler[dynamicPropertyDetail] = [];\r\n            }\r\n            callback({\r\n                cfg: cfgHandler.cfg,\r\n                set: cfgHandler.set.bind(cfgHandler),\r\n                setDf: cfgHandler.setDf.bind(cfgHandler),\r\n                ref: cfgHandler.ref.bind(cfgHandler),\r\n                rdOnly: cfgHandler.rdOnly.bind(cfgHandler)\r\n            });\r\n        }\r\n        catch (e) {\r\n            var logger = cfgHandler[_DYN_LOGGER /* @min:%2elogger */];\r\n            if (logger) {\r\n                // Don't let one individual failure break everyone\r\n                logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](1 /* eLoggingSeverity.CRITICAL */, 107 /* _eInternalMessageId.ConfigWatcherException */, dumpObj(e));\r\n            }\r\n            // Re-throw the exception so that any true \"error\" is reported back to the called\r\n            throw e;\r\n        }\r\n        finally {\r\n            theState.act = prevWatcher || null;\r\n        }\r\n    }\r\n    function _notifyWatchers() {\r\n        if (_waitingHandlers) {\r\n            var notifyHandlers = _waitingHandlers;\r\n            _waitingHandlers = null;\r\n            // Stop any timer as we are running them now anyway\r\n            _watcherTimer && _watcherTimer[_DYN_CANCEL /* @min:%2ecancel */]();\r\n            _watcherTimer = null;\r\n            var watcherFailures_1 = [];\r\n            // Now run the handlers\r\n            arrForEach(notifyHandlers, function (handler) {\r\n                if (handler) {\r\n                    if (handler[dynamicPropertyDetail]) {\r\n                        arrForEach(handler[dynamicPropertyDetail], function (detail) {\r\n                            // Clear out this handler from  previously tracked details, so that access are re-evaluated\r\n                            detail.clr(handler);\r\n                        });\r\n                        handler[dynamicPropertyDetail] = null;\r\n                    }\r\n                    // The handler may have self removed as part of another handler so re-check\r\n                    if (handler.fn) {\r\n                        try {\r\n                            _useHandler(handler, handler.fn);\r\n                        }\r\n                        catch (e) {\r\n                            // Don't let a single failing watcher cause other watches to fail\r\n                            watcherFailures_1[_DYN_PUSH /* @min:%2epush */](e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // During notification we may have had additional updates -- so notify those updates as well\r\n            if (_waitingHandlers) {\r\n                try {\r\n                    _notifyWatchers();\r\n                }\r\n                catch (e) {\r\n                    watcherFailures_1[_DYN_PUSH /* @min:%2epush */](e);\r\n                }\r\n            }\r\n            if (watcherFailures_1[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                throwAggregationError(\"Watcher error(s): \", watcherFailures_1);\r\n            }\r\n        }\r\n    }\r\n    function _addWatcher(detail) {\r\n        if (detail && detail.h[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            if (!_waitingHandlers) {\r\n                _waitingHandlers = [];\r\n            }\r\n            if (!_watcherTimer) {\r\n                _watcherTimer = scheduleTimeout(function () {\r\n                    _watcherTimer = null;\r\n                    _notifyWatchers();\r\n                }, 0);\r\n            }\r\n            // Add all of the handlers for this detail (if not already present) - using normal for-loop for performance\r\n            for (var idx = 0; idx < detail.h[_DYN_LENGTH /* @min:%2elength */]; idx++) {\r\n                var handler = detail.h[idx];\r\n                // Add this handler to the collection of handlers to re-execute\r\n                if (handler && arrIndexOf(_waitingHandlers, handler) === -1) {\r\n                    _waitingHandlers[_DYN_PUSH /* @min:%2epush */](handler);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function _trackHandler(handler, detail) {\r\n        if (handler) {\r\n            var details = handler[dynamicPropertyDetail] = handler[dynamicPropertyDetail] || [];\r\n            if (arrIndexOf(details, detail) === -1) {\r\n                // If this detail is not already listed as tracked then add it so that we re-evaluate it's usage\r\n                details[_DYN_PUSH /* @min:%2epush */](detail);\r\n            }\r\n        }\r\n    }\r\n    theState = {\r\n        prop: dynamicPropertySymbol,\r\n        ro: dynamicPropertyReadOnly,\r\n        rf: dynamicPropertyReferenced,\r\n        blkVal: dynamicPropertyBlockValue,\r\n        hdlr: cfgHandler,\r\n        add: _addWatcher,\r\n        notify: _notifyWatchers,\r\n        use: _useHandler,\r\n        trk: _trackHandler\r\n    };\r\n    return theState;\r\n}\r\n//# sourceMappingURL=DynamicState.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dumpObj, isUndefined, objDefine, objForEachKey } from \"@nevware21/ts-utils\";\r\nimport { createUniqueNamespace } from \"../JavaScriptSDK/DataCacheHelper\";\r\nimport { STR_NOT_DYNAMIC_ERROR } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_THROW_INTERNAL, _DYN_WARN_TO_CONSOLE, _DYN_WATCH } from \"../__DynamicConstants\";\r\nimport { _applyDefaultValue } from \"./ConfigDefaults\";\r\nimport { _makeDynamicObject, _setDynamicProperty, _setDynamicPropertyState, _throwDynamicError } from \"./DynamicProperty\";\r\nimport { _createState } from \"./DynamicState\";\r\nimport { CFG_HANDLER_LINK, _cfgDeepCopy, getDynamicConfigHandler, throwInvalidAccess } from \"./DynamicSupport\";\r\n/**\r\n * Identifies a function which will be re-called whenever any of it's accessed configuration values\r\n * change.\r\n * @param configHandler - The callback that will be called for the initial request and then whenever any\r\n * accessed configuration changes are identified.\r\n */\r\nfunction _createAndUseHandler(state, configHandler) {\r\n    var handler = {\r\n        fn: configHandler,\r\n        rm: function () {\r\n            // Clear all references to the handler so it can be garbage collected\r\n            // This will also cause this handler to never get called and eventually removed\r\n            handler.fn = null;\r\n            state = null;\r\n            configHandler = null;\r\n        }\r\n    };\r\n    objDefine(handler, \"toJSON\", { v: function () { return \"WatcherHandler\" + (handler.fn ? \"\" : \"[X]\"); } });\r\n    state.use(handler, configHandler);\r\n    return handler;\r\n}\r\n/**\r\n * Creates the dynamic config handler and associates with the target config as the root object\r\n * @param target - The config that you want to be root of the dynamic config\r\n * @param inPlace - Should the passed config be converted in-place or a new proxy returned\r\n * @returns The existing dynamic handler or a new instance with the provided config values\r\n */\r\nfunction _createDynamicHandler(logger, target, inPlace) {\r\n    var dynamicHandler = getDynamicConfigHandler(target);\r\n    if (dynamicHandler) {\r\n        // The passed config is already dynamic so return it's tracker\r\n        return dynamicHandler;\r\n    }\r\n    var uid = createUniqueNamespace(\"dyncfg\", true);\r\n    var newTarget = (target && inPlace !== false) ? target : _cfgDeepCopy(target);\r\n    var theState;\r\n    function _notifyWatchers() {\r\n        theState.notify();\r\n    }\r\n    function _setValue(target, name, value) {\r\n        try {\r\n            target = _setDynamicProperty(theState, target, name, value);\r\n        }\r\n        catch (e) {\r\n            // Unable to convert to dynamic property so just leave as non-dynamic\r\n            _throwDynamicError(logger, name, \"Setting value\", e);\r\n        }\r\n        return target[name];\r\n    }\r\n    function _watch(configHandler) {\r\n        return _createAndUseHandler(theState, configHandler);\r\n    }\r\n    function _block(configHandler, allowUpdate) {\r\n        theState.use(null, function (details) {\r\n            var prevUpd = theState.upd;\r\n            try {\r\n                if (!isUndefined(allowUpdate)) {\r\n                    theState.upd = allowUpdate;\r\n                }\r\n                configHandler(details);\r\n            }\r\n            finally {\r\n                theState.upd = prevUpd;\r\n            }\r\n        });\r\n    }\r\n    function _ref(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as referenced with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[0 /* _eSetDynamicPropertyFlags.inPlace */] = true, _a))[name];\r\n    }\r\n    function _rdOnly(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as readonly with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[1 /* _eSetDynamicPropertyFlags.readOnly */] = true, _a))[name];\r\n    }\r\n    function _blkPropValue(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as readonly with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[2 /* _eSetDynamicPropertyFlags.blockDynamicProperty */] = true, _a))[name];\r\n    }\r\n    function _applyDefaults(theConfig, defaultValues) {\r\n        if (defaultValues) {\r\n            // Resolve/apply the defaults\r\n            objForEachKey(defaultValues, function (name, value) {\r\n                // Sets the value and makes it dynamic (if it doesn't already exist)\r\n                _applyDefaultValue(cfgHandler, theConfig, name, value);\r\n            });\r\n        }\r\n        return theConfig;\r\n    }\r\n    var cfgHandler = {\r\n        uid: null,\r\n        cfg: newTarget,\r\n        logger: logger,\r\n        notify: _notifyWatchers,\r\n        set: _setValue,\r\n        setDf: _applyDefaults,\r\n        watch: _watch,\r\n        ref: _ref,\r\n        rdOnly: _rdOnly,\r\n        blkVal: _blkPropValue,\r\n        _block: _block\r\n    };\r\n    objDefine(cfgHandler, \"uid\", {\r\n        c: false,\r\n        e: false,\r\n        w: false,\r\n        v: uid\r\n    });\r\n    theState = _createState(cfgHandler);\r\n    // Setup tracking for all defined default keys\r\n    _makeDynamicObject(theState, newTarget, \"config\", \"Creating\");\r\n    return cfgHandler;\r\n}\r\n/**\r\n * Log an invalid access message to the console\r\n */\r\nfunction _logInvalidAccess(logger, message) {\r\n    if (logger) {\r\n        logger[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](message);\r\n        logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](2 /* eLoggingSeverity.WARNING */, 108 /* _eInternalMessageId.DynamicConfigException */, message);\r\n    }\r\n    else {\r\n        // We don't have a logger so just throw an exception\r\n        throwInvalidAccess(message);\r\n    }\r\n}\r\n/**\r\n * Create or return a dynamic version of the passed config, if it is not already dynamic\r\n * @param config - The config to be converted into a dynamic config\r\n * @param defaultConfig - The default values to apply on the config if the properties don't already exist\r\n * @param inPlace - Should the config be converted in-place into a dynamic config or a new instance returned, defaults to true\r\n * @returns The dynamic config handler for the config (whether new or existing)\r\n */\r\nexport function createDynamicConfig(config, defaultConfig, logger, inPlace) {\r\n    var dynamicHandler = _createDynamicHandler(logger, config || {}, inPlace);\r\n    if (defaultConfig) {\r\n        dynamicHandler.setDf(dynamicHandler.cfg, defaultConfig);\r\n    }\r\n    return dynamicHandler;\r\n}\r\n/**\r\n * Watch and track changes for accesses to the current config, the provided config MUST already be\r\n * a dynamic config or a child accessed via the dynamic config\r\n * @param logger - The logger instance to use if there is no existing handler\r\n * @returns A watcher handler instance that can be used to remove itself when being unloaded\r\n * @throws TypeError if the provided config is not a dynamic config instance\r\n */\r\nexport function onConfigChange(config, configHandler, logger) {\r\n    var handler = config[CFG_HANDLER_LINK] || config;\r\n    if (handler.cfg && (handler.cfg === config || handler.cfg[CFG_HANDLER_LINK] === handler)) {\r\n        return handler[_DYN_WATCH /* @min:%2ewatch */](configHandler);\r\n    }\r\n    _logInvalidAccess(logger, STR_NOT_DYNAMIC_ERROR + dumpObj(config));\r\n    return createDynamicConfig(config, null, logger)[_DYN_WATCH /* @min:%2ewatch */](configHandler);\r\n}\r\n//# sourceMappingURL=DynamicConfig.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { asString, isBoolean, isFunction, isNullOrUndefined, isString } from \"@nevware21/ts-utils\";\r\nimport { STR_EMPTY } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_TO_LOWER_CASE } from \"../__DynamicConstants\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param str\r\n * @param defaultValue\r\n * @returns\r\n */\r\nfunction _stringToBoolOrDefault(theValue, defaultValue, theConfig) {\r\n    if (!theValue && isNullOrUndefined(theValue)) {\r\n        return defaultValue;\r\n    }\r\n    if (isBoolean(theValue)) {\r\n        return theValue;\r\n    }\r\n    return asString(theValue)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === \"true\";\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the field defined as an object\r\n * that should be merged\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfMerge(defaultValue) {\r\n    return {\r\n        mrg: true,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field set function\r\n * @param setter - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfSet(setter, defaultValue) {\r\n    return {\r\n        set: setter,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field validator\r\n * @param validator - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfValidate(validator, defaultValue, fallBackName) {\r\n    return {\r\n        fb: fallBackName,\r\n        isVal: validator,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate and convert the user\r\n * provided value to a boolean from a string or boolean value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfBoolean(defaultValue, fallBackName) {\r\n    return {\r\n        fb: fallBackName,\r\n        set: _stringToBoolOrDefault,\r\n        v: !!defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfFunc(defaultValue) {\r\n    return {\r\n        isVal: isFunction,\r\n        v: defaultValue || null\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default string value to apply it not provided or it's not valid, defaults to an empty string\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfString(defaultValue) {\r\n    return {\r\n        isVal: isString,\r\n        v: asString(defaultValue || STR_EMPTY)\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance identifying that value associated with this property\r\n * should not have it's properties converted into a dynamic config properties.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfBlockPropValue(defaultValue) {\r\n    return {\r\n        blkVal: true,\r\n        v: defaultValue\r\n    };\r\n}\r\n//# sourceMappingURL=ConfigDefaultHelpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { getInst } from \"@nevware21/ts-utils\";\r\nimport { _DYN_APPLY, _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_PERF_EVENT } from \"./InternalConstants\";\r\nvar listenerFuncs = [STR_EVENTS_SENT, STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_PERF_EVENT];\r\nvar _aiNamespace = null;\r\nvar _debugListener;\r\nfunction _listenerProxyFunc(name, config) {\r\n    return function () {\r\n        var args = arguments;\r\n        var dbgExt = getDebugExt(config);\r\n        if (dbgExt) {\r\n            var listener = dbgExt.listener;\r\n            if (listener && listener[name]) {\r\n                listener[name][_DYN_APPLY /* @min:%2eapply */](listener, args);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction _getExtensionNamespace() {\r\n    // Cache the lookup of the global namespace object\r\n    var target = getInst(\"Microsoft\");\r\n    if (target) {\r\n        _aiNamespace = target[\"ApplicationInsights\"];\r\n    }\r\n    return _aiNamespace;\r\n}\r\nexport function getDebugExt(config) {\r\n    var ns = _aiNamespace;\r\n    if (!ns && config.disableDbgExt !== true) {\r\n        ns = _aiNamespace || _getExtensionNamespace();\r\n    }\r\n    return ns ? ns[\"ChromeDbgExt\"] : null;\r\n}\r\nexport function getDebugListener(config) {\r\n    if (!_debugListener) {\r\n        _debugListener = {};\r\n        for (var lp = 0; lp < listenerFuncs[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n            _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);\r\n        }\r\n    }\r\n    return _debugListener;\r\n}\r\n//# sourceMappingURL=DbgExtensionUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dumpObj, isFunction, isUndefined } from \"@nevware21/ts-utils\";\r\nimport { createDynamicConfig, onConfigChange } from \"../Config/DynamicConfig\";\r\nimport { _DYN_DIAG_LOG, _DYN_LOGGER, _DYN_LOGGING_LEVEL_CONSOL4, _DYN_MESSAGE, _DYN_MESSAGE_ID, _DYN_PUSH, _DYN_REPLACE, _DYN_THROW_INTERNAL, _DYN_UNLOAD, _DYN_WARN_TO_CONSOLE } from \"../__DynamicConstants\";\r\nimport { getDebugExt } from \"./DbgExtensionUtils\";\r\nimport { getConsole, getJSON, hasJSON } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar STR_WARN_TO_CONSOLE = \"warnToConsole\";\r\n/**\r\n * For user non actionable traces use AI Internal prefix.\r\n */\r\nvar AiNonUserActionablePrefix = \"AI (Internal): \";\r\n/**\r\n * Prefix of the traces in portal.\r\n */\r\nvar AiUserActionablePrefix = \"AI: \";\r\n/**\r\n *  Session storage key for the prefix for the key indicating message type already logged\r\n */\r\nvar AIInternalMessagePrefix = \"AITR_\";\r\nvar defaultValues = {\r\n    loggingLevelConsole: 0,\r\n    loggingLevelTelemetry: 1,\r\n    maxMessageLimit: 25,\r\n    enableDebug: false\r\n};\r\nvar _logFuncs = (_a = {},\r\n    _a[0 /* eLoggingSeverity.DISABLED */] = null,\r\n    _a[1 /* eLoggingSeverity.CRITICAL */] = \"errorToConsole\",\r\n    _a[2 /* eLoggingSeverity.WARNING */] = STR_WARN_TO_CONSOLE,\r\n    _a[3 /* eLoggingSeverity.DEBUG */] = \"debugToConsole\",\r\n    _a);\r\nfunction _sanitizeDiagnosticText(text) {\r\n    if (text) {\r\n        return \"\\\"\" + text[_DYN_REPLACE /* @min:%2ereplace */](/\\\"/g, STR_EMPTY) + \"\\\"\";\r\n    }\r\n    return STR_EMPTY;\r\n}\r\nfunction _logToConsole(func, message) {\r\n    var theConsole = getConsole();\r\n    if (!!theConsole) {\r\n        var logFunc = \"log\";\r\n        if (theConsole[func]) {\r\n            logFunc = func;\r\n        }\r\n        if (isFunction(theConsole[logFunc])) {\r\n            theConsole[logFunc](message);\r\n        }\r\n    }\r\n}\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var _self = this;\r\n        _self[_DYN_MESSAGE_ID /* @min:%2emessageId */] = msgId;\r\n        _self[_DYN_MESSAGE /* @min:%2emessage */] =\r\n            (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var strProps = STR_EMPTY;\r\n        if (hasJSON()) {\r\n            strProps = getJSON().stringify(properties);\r\n        }\r\n        var diagnosticText = (msg ? \" message:\" + _sanitizeDiagnosticText(msg) : STR_EMPTY) +\r\n            (properties ? \" props:\" + _sanitizeDiagnosticText(strProps) : STR_EMPTY);\r\n        _self[_DYN_MESSAGE /* @min:%2emessage */] += diagnosticText;\r\n    }\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nexport function safeGetLogger(core, config) {\r\n    return (core || {})[_DYN_LOGGER /* @min:%2elogger */] || new DiagnosticLogger(config);\r\n}\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        this.identifier = \"DiagnosticLogger\";\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        var _messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        var _messageLogged = {};\r\n        var _loggingLevelConsole;\r\n        var _loggingLevelTelemetry;\r\n        var _maxInternalMessageLimit;\r\n        var _enableDebug;\r\n        var _unloadHandler;\r\n        dynamicProto(DiagnosticLogger, this, function (_self) {\r\n            _unloadHandler = _setDefaultsFromConfig(config || {});\r\n            _self.consoleLoggingLevel = function () { return _loggingLevelConsole; };\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity - The severity of the log message\r\n             * @param message  - The log message.\r\n             */\r\n            _self[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */] = function (severity, msgId, msg, properties, isUserAct) {\r\n                if (isUserAct === void 0) { isUserAct = false; }\r\n                var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n                if (_enableDebug) {\r\n                    throw dumpObj(message);\r\n                }\r\n                else {\r\n                    // Get the logging function and fallback to warnToConsole of for some reason errorToConsole doesn't exist\r\n                    var logFunc = _logFuncs[severity] || STR_WARN_TO_CONSOLE;\r\n                    if (!isUndefined(message[_DYN_MESSAGE /* @min:%2emessage */])) {\r\n                        if (isUserAct) {\r\n                            // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                            var messageKey = +message[_DYN_MESSAGE_ID /* @min:%2emessageId */];\r\n                            if (!_messageLogged[messageKey] && _loggingLevelConsole >= severity) {\r\n                                _self[logFunc](message[_DYN_MESSAGE /* @min:%2emessage */]);\r\n                                _messageLogged[messageKey] = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Only log traces if the console Logging Level is >= the throwInternal severity level\r\n                            if (_loggingLevelConsole >= severity) {\r\n                                _self[logFunc](message[_DYN_MESSAGE /* @min:%2emessage */]);\r\n                            }\r\n                        }\r\n                        _logInternalMessage(severity, message);\r\n                    }\r\n                    else {\r\n                        _debugExtMsg(\"throw\" + (severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"Critical\" : \"Warning\"), message);\r\n                    }\r\n                }\r\n            };\r\n            _self.debugToConsole = function (message) {\r\n                _logToConsole(\"debug\", message);\r\n                _debugExtMsg(\"warning\", message);\r\n            };\r\n            _self[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */] = function (message) {\r\n                _logToConsole(\"warn\", message);\r\n                _debugExtMsg(\"warning\", message);\r\n            };\r\n            _self.errorToConsole = function (message) {\r\n                _logToConsole(\"error\", message);\r\n                _debugExtMsg(\"error\", message);\r\n            };\r\n            _self.resetInternalMessageCount = function () {\r\n                _messageCount = 0;\r\n                _messageLogged = {};\r\n            };\r\n            _self.logInternalMessage = _logInternalMessage;\r\n            _self[_DYN_UNLOAD /* @min:%2eunload */] = function (isAsync) {\r\n                _unloadHandler && _unloadHandler.rm();\r\n                _unloadHandler = null;\r\n            };\r\n            function _logInternalMessage(severity, message) {\r\n                if (_areInternalMessagesThrottled()) {\r\n                    return;\r\n                }\r\n                // check if this message type was already logged for this session and if so, don't log it again\r\n                var logMessage = true;\r\n                var messageKey = AIInternalMessagePrefix + message[_DYN_MESSAGE_ID /* @min:%2emessageId */];\r\n                // if the session storage is not available, limit to only one message type per page view\r\n                if (_messageLogged[messageKey]) {\r\n                    logMessage = false;\r\n                }\r\n                else {\r\n                    _messageLogged[messageKey] = true;\r\n                }\r\n                if (logMessage) {\r\n                    // Push the event in the internal queue\r\n                    if (severity <= _loggingLevelTelemetry) {\r\n                        _self.queue[_DYN_PUSH /* @min:%2epush */](message);\r\n                        _messageCount++;\r\n                        _debugExtMsg((severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"error\" : \"warn\"), message);\r\n                    }\r\n                    // When throttle limit reached, send a special event\r\n                    if (_messageCount === _maxInternalMessageLimit) {\r\n                        var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                        var throttleMessage = new _InternalLogMessage(23 /* _eInternalMessageId.MessageLimitPerPVExceeded */, throttleLimitMessage, false);\r\n                        _self.queue[_DYN_PUSH /* @min:%2epush */](throttleMessage);\r\n                        if (severity === 1 /* eLoggingSeverity.CRITICAL */) {\r\n                            _self.errorToConsole(throttleLimitMessage);\r\n                        }\r\n                        else {\r\n                            _self[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](throttleLimitMessage);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _setDefaultsFromConfig(config) {\r\n                // make sure the config is dynamic\r\n                return onConfigChange(createDynamicConfig(config, defaultValues, _self).cfg, function (details) {\r\n                    var config = details.cfg;\r\n                    _loggingLevelConsole = config[_DYN_LOGGING_LEVEL_CONSOL4 /* @min:%2eloggingLevelConsole */];\r\n                    _loggingLevelTelemetry = config.loggingLevelTelemetry;\r\n                    _maxInternalMessageLimit = config.maxMessageLimit;\r\n                    _enableDebug = config.enableDebug;\r\n                });\r\n            }\r\n            function _areInternalMessagesThrottled() {\r\n                return _messageCount >= _maxInternalMessageLimit;\r\n            }\r\n            function _debugExtMsg(name, data) {\r\n                var dbgExt = getDebugExt(config || {});\r\n                if (dbgExt && dbgExt[_DYN_DIAG_LOG /* @min:%2ediagLog */]) {\r\n                    dbgExt[_DYN_DIAG_LOG /* @min:%2ediagLog */](name, data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 0: OFF (default)\r\n     * 1: CRITICAL\r\n     * 2: \\>= WARNING\r\n     */\r\n    DiagnosticLogger.prototype.consoleLoggingLevel = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity  - The severity of the log message\r\n     * @param message - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write a debug message to the console if possible\r\n     * @param message - The debug message\r\n     */\r\n    DiagnosticLogger.prototype.debugToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message  - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write an error to the console if possible\r\n     * @param message - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.errorToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity - The severity of the log message\r\n     * @param message - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Unload and remove any state that this IDiagnosticLogger may be holding, this is generally called when the\r\n     * owning SDK is being unloaded.\r\n     * @param isAsync - Can the unload be performed asynchronously (default)\r\n     * @returns If the unload occurs synchronously then nothing should be returned, if happening asynchronously then\r\n     * the function should return an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * / Promise to allow any listeners to wait for the operation to complete.\r\n     */\r\n    DiagnosticLogger.prototype.unload = function (isAsync) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\nfunction _getLogger(logger) {\r\n    return (logger || new DiagnosticLogger());\r\n}\r\n/**\r\n * This is a helper method which will call throwInternal on the passed logger, will throw exceptions in\r\n * debug mode or attempt to log the error as a console warning. This helper is provided mostly to better\r\n * support minification as logger.throwInternal() will not compress the publish \"throwInternal\" used throughout\r\n * the code.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity - The severity of the log message\r\n * @param message  - The log message.\r\n */\r\nexport function _throwInternal(logger, severity, msgId, msg, properties, isUserAct) {\r\n    if (isUserAct === void 0) { isUserAct = false; }\r\n    _getLogger(logger)[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](severity, msgId, msg, properties, isUserAct);\r\n}\r\n/**\r\n * This is a helper method which will call warnToConsole on the passed logger with the provided message.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param message  - The log message.\r\n */\r\nexport function _warnToConsole(logger, message) {\r\n    _getLogger(logger)[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](message);\r\n}\r\n/**\r\n * Logs a message to the internal queue.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity  - The severity of the log message\r\n * @param message - The message to log.\r\n */\r\nexport function _logInternalMessage(logger, severity, message) {\r\n    _getLogger(logger).logInternalMessage(severity, message);\r\n}\r\n//# sourceMappingURL=DiagnosticLogger.js.map","var _a, _b;\r\nimport { arrForEach, arrIndexOf, dumpObj, getDocument, getLazy, getNavigator, isArray, isFunction, isNullOrUndefined, isString, isTruthy, isUndefined, objForEachKey, strEndsWith, strIndexOf, strLeft, strSubstring, strTrim, utcNow } from \"@nevware21/ts-utils\";\r\nimport { cfgDfMerge } from \"../Config/ConfigDefaultHelpers\";\r\nimport { createDynamicConfig, onConfigChange } from \"../Config/DynamicConfig\";\r\nimport { _DYN_ENABLED, _DYN_LENGTH, _DYN_LOGGER, _DYN_SPLIT, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { getLocation, isIE } from \"./EnvUtils\";\r\nimport { getExceptionName, isNotNullOrUndefined, setValue, strContains } from \"./HelperFuncs\";\r\nimport { STR_DOMAIN, STR_EMPTY, STR_PATH, UNDEFINED_VALUE } from \"./InternalConstants\";\r\nvar strToGMTString = \"toGMTString\";\r\nvar strToUTCString = \"toUTCString\";\r\nvar strCookie = \"cookie\";\r\nvar strExpires = \"expires\";\r\nvar strIsCookieUseDisabled = \"isCookieUseDisabled\";\r\nvar strDisableCookiesUsage = \"disableCookiesUsage\";\r\nvar strConfigCookieMgr = \"_ckMgr\";\r\nvar _supportsCookies = null;\r\nvar _allowUaSameSite = null;\r\nvar _parsedCookieValue = null;\r\nvar _doc;\r\nvar _cookieCache = {};\r\nvar _globalCookieConfig = {};\r\n// // `isCookieUseDisabled` is deprecated, so explicitly casting as a key of IConfiguration to avoid typing error\r\n// // when both isCookieUseDisabled and disableCookiesUsage are used disableCookiesUsage will take precedent, which is\r\n// // why its listed first\r\n/**\r\n * Set the supported dynamic config values as undefined (or an empty object) so that\r\n * any listeners will be informed of any changes.\r\n * Explicitly NOT including the deprecated `isCookieUseDisabled` as we don't want to support\r\n * the v1 deprecated field as dynamic for updates\r\n */\r\nvar rootDefaultConfig = (_a = {\r\n        cookieCfg: cfgDfMerge((_b = {},\r\n            _b[STR_DOMAIN] = { fb: \"cookieDomain\", dfVal: isNotNullOrUndefined },\r\n            _b.path = { fb: \"cookiePath\", dfVal: isNotNullOrUndefined },\r\n            _b.enabled = UNDEFINED_VALUE,\r\n            _b.ignoreCookies = UNDEFINED_VALUE,\r\n            _b.blockedCookies = UNDEFINED_VALUE,\r\n            _b)),\r\n        cookieDomain: UNDEFINED_VALUE,\r\n        cookiePath: UNDEFINED_VALUE\r\n    },\r\n    _a[strDisableCookiesUsage] = UNDEFINED_VALUE,\r\n    _a);\r\nfunction _getDoc() {\r\n    !_doc && (_doc = getLazy(function () { return getDocument(); }));\r\n}\r\n/**\r\n * @ignore\r\n * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.\r\n * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create\r\n * your own instance of the CookieMgr and use that.\r\n * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.\r\n * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.\r\n * @param logger - The DiagnosticLogger to use for reporting errors.\r\n */\r\nfunction _gblCookieMgr(config, logger) {\r\n    // Stash the global instance against the BaseCookieMgr class\r\n    var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];\r\n    if (!inst) {\r\n        // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr\r\n        // that ultimately is never used\r\n        inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);\r\n        _globalCookieConfig[strConfigCookieMgr] = inst;\r\n    }\r\n    return inst;\r\n}\r\nfunction _isMgrEnabled(cookieMgr) {\r\n    if (cookieMgr) {\r\n        return cookieMgr.isEnabled();\r\n    }\r\n    return true;\r\n}\r\nfunction _isIgnoredCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {\r\n        return arrIndexOf(cookieMgrCfg.ignoreCookies, name) !== -1;\r\n    }\r\n    return false;\r\n}\r\nfunction _isBlockedCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {\r\n        if (arrIndexOf(cookieMgrCfg.blockedCookies, name) !== -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return _isIgnoredCookie(cookieMgrCfg, name);\r\n}\r\nfunction _isCfgEnabled(rootConfig, cookieMgrConfig) {\r\n    var isCfgEnabled = cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */];\r\n    if (isNullOrUndefined(isCfgEnabled)) {\r\n        // Set the enabled from the provided setting or the legacy root values\r\n        var cookieEnabled = void 0;\r\n        // This field is deprecated and dynamic updates will not be fully supported\r\n        if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {\r\n            cookieEnabled = !rootConfig[strIsCookieUseDisabled];\r\n        }\r\n        // If this value is defined it takes precedent over the above\r\n        if (!isUndefined(rootConfig[strDisableCookiesUsage])) {\r\n            cookieEnabled = !rootConfig[strDisableCookiesUsage];\r\n        }\r\n        // Not setting the cookieMgrConfig.enabled as that will update (set) the global dynamic config\r\n        // So future \"updates\" then may not be as expected\r\n        isCfgEnabled = cookieEnabled;\r\n    }\r\n    return isCfgEnabled;\r\n}\r\n/**\r\n * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation\r\n * associated with the configuration or a legacy default.\r\n * @param core - The AppInsightsCore instance to get the cookie manager from\r\n * @param config - The config to use if the core is not available\r\n * @returns\r\n */\r\nexport function safeGetCookieMgr(core, config) {\r\n    var cookieMgr;\r\n    if (core) {\r\n        // Always returns an instance\r\n        cookieMgr = core.getCookieMgr();\r\n    }\r\n    else if (config) {\r\n        var cookieCfg = config.cookieCfg;\r\n        if (cookieCfg && cookieCfg[strConfigCookieMgr]) {\r\n            cookieMgr = cookieCfg[strConfigCookieMgr];\r\n        }\r\n        else {\r\n            cookieMgr = createCookieMgr(config);\r\n        }\r\n    }\r\n    if (!cookieMgr) {\r\n        // Get or initialize the default global (legacy) cookie manager if we couldn't find one\r\n        cookieMgr = _gblCookieMgr(config, (core || {})[_DYN_LOGGER /* @min:%2elogger */]);\r\n    }\r\n    return cookieMgr;\r\n}\r\nexport function createCookieMgr(rootConfig, logger) {\r\n    var cookieMgrConfig;\r\n    var _path;\r\n    var _domain;\r\n    var unloadHandler;\r\n    // Explicitly checking against false, so that setting to undefined will === true\r\n    var _enabled;\r\n    var _getCookieFn;\r\n    var _setCookieFn;\r\n    var _delCookieFn;\r\n    // Make sure the root config is dynamic as it may be the global config\r\n    rootConfig = createDynamicConfig(rootConfig || _globalCookieConfig, null, logger).cfg;\r\n    // Will get recalled if the referenced configuration is changed\r\n    unloadHandler = onConfigChange(rootConfig, function (details) {\r\n        // Make sure the root config has all of the the defaults to the root config to ensure they are dynamic\r\n        details.setDf(details.cfg, rootDefaultConfig);\r\n        // Create and apply the defaults to the cookieCfg element\r\n        cookieMgrConfig = details.ref(details.cfg, \"cookieCfg\"); // details.setDf(details.cfg.cookieCfg, defaultConfig);\r\n        _path = cookieMgrConfig[STR_PATH /* @min:%2epath */] || \"/\";\r\n        _domain = cookieMgrConfig[STR_DOMAIN /* @min:%2edomain */];\r\n        // Explicitly checking against false, so that setting to undefined will === true\r\n        _enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false;\r\n        _getCookieFn = cookieMgrConfig.getCookie || _getCookieValue;\r\n        _setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\r\n        _delCookieFn = cookieMgrConfig.delCookie || _setCookieValue;\r\n    }, logger);\r\n    var cookieMgr = {\r\n        isEnabled: function () {\r\n            var enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false && _enabled && areCookiesSupported(logger);\r\n            // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's\r\n            // that don't use the \"applicationinsights-core\" version of the default cookie function\r\n            var gblManager = _globalCookieConfig[strConfigCookieMgr];\r\n            if (enabled && gblManager && cookieMgr !== gblManager) {\r\n                // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.\r\n                // As the global (deprecated) functions may have been called (for backward compatibility)\r\n                enabled = _isMgrEnabled(gblManager);\r\n            }\r\n            return enabled;\r\n        },\r\n        setEnabled: function (value) {\r\n            // Explicitly checking against false, so that setting to undefined will === true\r\n            _enabled = value !== false;\r\n            cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */] = value;\r\n        },\r\n        set: function (name, value, maxAgeSec, domain, path) {\r\n            var result = false;\r\n            if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {\r\n                var values = {};\r\n                var theValue = strTrim(value || STR_EMPTY);\r\n                var idx = strIndexOf(theValue, \";\");\r\n                if (idx !== -1) {\r\n                    theValue = strTrim(strLeft(value, idx));\r\n                    values = _extractParts(strSubstring(value, idx + 1));\r\n                }\r\n                // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)\r\n                setValue(values, STR_DOMAIN, domain || _domain, isTruthy, isUndefined);\r\n                if (!isNullOrUndefined(maxAgeSec)) {\r\n                    var _isIE = isIE();\r\n                    if (isUndefined(values[strExpires])) {\r\n                        var nowMs = utcNow();\r\n                        // Only add expires if not already present\r\n                        var expireMs = nowMs + (maxAgeSec * 1000);\r\n                        // Sanity check, if zero or -ve then ignore\r\n                        if (expireMs > 0) {\r\n                            var expiry = new Date();\r\n                            expiry.setTime(expireMs);\r\n                            setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);\r\n                        }\r\n                    }\r\n                    if (!_isIE) {\r\n                        // Only replace if not already present\r\n                        setValue(values, \"max-age\", STR_EMPTY + maxAgeSec, null, isUndefined);\r\n                    }\r\n                }\r\n                var location_1 = getLocation();\r\n                if (location_1 && location_1.protocol === \"https:\") {\r\n                    setValue(values, \"secure\", null, null, isUndefined);\r\n                    // Only set same site if not also secure\r\n                    if (_allowUaSameSite === null) {\r\n                        _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[_DYN_USER_AGENT /* @min:%2euserAgent */]);\r\n                    }\r\n                    if (_allowUaSameSite) {\r\n                        setValue(values, \"SameSite\", \"None\", null, isUndefined);\r\n                    }\r\n                }\r\n                setValue(values, STR_PATH, path || _path, null, isUndefined);\r\n                //let setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\r\n                _setCookieFn(name, _formatCookieValue(theValue, values));\r\n                result = true;\r\n            }\r\n            return result;\r\n        },\r\n        get: function (name) {\r\n            var value = STR_EMPTY;\r\n            if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {\r\n                value = _getCookieFn(name);\r\n            }\r\n            return value;\r\n        },\r\n        del: function (name, path) {\r\n            var result = false;\r\n            if (_isMgrEnabled(cookieMgr)) {\r\n                // Only remove the cookie if the manager and cookie support has not been disabled\r\n                result = cookieMgr.purge(name, path);\r\n            }\r\n            return result;\r\n        },\r\n        purge: function (name, path) {\r\n            var _a;\r\n            var result = false;\r\n            if (areCookiesSupported(logger)) {\r\n                // Setting the expiration date in the past immediately removes the cookie\r\n                var values = (_a = {},\r\n                    _a[STR_PATH] = path ? path : \"/\",\r\n                    _a[strExpires] = \"Thu, 01 Jan 1970 00:00:01 GMT\",\r\n                    _a);\r\n                if (!isIE()) {\r\n                    // Set max age to expire now\r\n                    values[\"max-age\"] = \"0\";\r\n                }\r\n                // let delCookie = cookieMgrConfig.delCookie || _setCookieValue;\r\n                _delCookieFn(name, _formatCookieValue(STR_EMPTY, values));\r\n                result = true;\r\n            }\r\n            return result;\r\n        },\r\n        unload: function (isAsync) {\r\n            unloadHandler && unloadHandler.rm();\r\n            unloadHandler = null;\r\n        }\r\n    };\r\n    // Associated this cookie manager with the config\r\n    cookieMgr[strConfigCookieMgr] = cookieMgr;\r\n    return cookieMgr;\r\n}\r\n/*\r\n* Helper method to tell if document.cookie object is supported by the runtime\r\n*/\r\nexport function areCookiesSupported(logger) {\r\n    if (_supportsCookies === null) {\r\n        _supportsCookies = false;\r\n        !_doc && _getDoc();\r\n        try {\r\n            var doc = _doc.v || {};\r\n            _supportsCookies = doc[strCookie] !== undefined;\r\n        }\r\n        catch (e) {\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 68 /* _eInternalMessageId.CannotAccessCookie */, \"Cannot access document.cookie - \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return _supportsCookies;\r\n}\r\nfunction _extractParts(theValue) {\r\n    var values = {};\r\n    if (theValue && theValue[_DYN_LENGTH /* @min:%2elength */]) {\r\n        var parts = strTrim(theValue)[_DYN_SPLIT /* @min:%2esplit */](\";\");\r\n        arrForEach(parts, function (thePart) {\r\n            thePart = strTrim(thePart || STR_EMPTY);\r\n            if (thePart) {\r\n                var idx = strIndexOf(thePart, \"=\");\r\n                if (idx === -1) {\r\n                    values[thePart] = null;\r\n                }\r\n                else {\r\n                    values[strTrim(strLeft(thePart, idx))] = strTrim(strSubstring(thePart, idx + 1));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n}\r\nfunction _formatDate(theDate, func) {\r\n    if (isFunction(theDate[func])) {\r\n        return theDate[func]();\r\n    }\r\n    return null;\r\n}\r\nfunction _formatCookieValue(value, values) {\r\n    var cookieValue = value || STR_EMPTY;\r\n    objForEachKey(values, function (name, theValue) {\r\n        cookieValue += \"; \" + name + (!isNullOrUndefined(theValue) ? \"=\" + theValue : STR_EMPTY);\r\n    });\r\n    return cookieValue;\r\n}\r\nfunction _getCookieValue(name) {\r\n    var cookieValue = STR_EMPTY;\r\n    !_doc && _getDoc();\r\n    if (_doc.v) {\r\n        var theCookie = _doc.v[strCookie] || STR_EMPTY;\r\n        if (_parsedCookieValue !== theCookie) {\r\n            _cookieCache = _extractParts(theCookie);\r\n            _parsedCookieValue = theCookie;\r\n        }\r\n        cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);\r\n    }\r\n    return cookieValue;\r\n}\r\nfunction _setCookieValue(name, cookieValue) {\r\n    !_doc && _getDoc();\r\n    if (_doc.v) {\r\n        _doc.v[strCookie] = name + \"=\" + cookieValue;\r\n    }\r\n}\r\nexport function uaDisallowsSameSiteNone(userAgent) {\r\n    if (!isString(userAgent)) {\r\n        return false;\r\n    }\r\n    // Cover all iOS based browsers here. This includes:\r\n    // - Safari on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - Chrome on iOS 12 for iPhone, iPod Touch, iPad\r\n    // All of which are broken by SameSite=None, because they use the iOS networking stack\r\n    if (strContains(userAgent, \"CPU iPhone OS 12\") || strContains(userAgent, \"iPad; CPU OS 12\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:\r\n    // - Safari on Mac OS X\r\n    // This does not include:\r\n    // - Internal browser on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strContains(userAgent, \"Version/\") && strContains(userAgent, \"Safari\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:\r\n    // - Internal browser on Mac OS X\r\n    // This does not include:\r\n    // - Safari on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strEndsWith(userAgent, \"AppleWebKit/605.1.15 (KHTML, like Gecko)\")) {\r\n        return true;\r\n    }\r\n    // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.\r\n    // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.\r\n    // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.\r\n    if (strContains(userAgent, \"Chrome/5\") || strContains(userAgent, \"Chrome/6\")) {\r\n        return true;\r\n    }\r\n    // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal\r\n    // that don't specify their Chrome version as lacking support for SameSite=None.\r\n    if (strContains(userAgent, \"UnrealEngine\") && !strContains(userAgent, \"Chrome\")) {\r\n        return true;\r\n    }\r\n    // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None\r\n    // NB: this rule isn't complete - you need regex to make a complete rule.\r\n    // See: https://www.chromium.org/updates/same-site/incompatible-clients\r\n    if (strContains(userAgent, \"UCBrowser/12\") || strContains(userAgent, \"UCBrowser/11\")) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=CookieMgr.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isArray, isFunction, objDefine, utcNow } from \"@nevware21/ts-utils\";\r\nimport { _DYN_GET_CTX, _DYN_IS_CHILD_EVT, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_SET_CTX } from \"../__DynamicConstants\";\r\nimport { STR_GET_PERF_MGR, STR_PERF_EVENT } from \"./InternalConstants\";\r\nvar strExecutionContextKey = \"ctx\";\r\nvar strParentContextKey = \"ParentContextKey\";\r\nvar strChildrenContextKey = \"ChildrenContextKey\";\r\nvar _defaultPerfManager = null;\r\nvar PerfEvent = /** @class */ (function () {\r\n    function PerfEvent(name, payloadDetails, isAsync) {\r\n        var _self = this;\r\n        _self.start = utcNow();\r\n        _self[_DYN_NAME /* @min:%2ename */] = name;\r\n        _self.isAsync = isAsync;\r\n        _self[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */] = function () { return false; };\r\n        if (isFunction(payloadDetails)) {\r\n            // Create an accessor to minimize the potential performance impact of executing the payloadDetails callback\r\n            var theDetails_1;\r\n            objDefine(_self, \"payload\", {\r\n                g: function () {\r\n                    // Delay the execution of the payloadDetails until needed\r\n                    if (!theDetails_1 && isFunction(payloadDetails)) {\r\n                        theDetails_1 = payloadDetails();\r\n                        // clear it out now so the referenced objects can be garbage collected\r\n                        payloadDetails = null;\r\n                    }\r\n                    return theDetails_1;\r\n                }\r\n            });\r\n        }\r\n        _self[_DYN_GET_CTX /* @min:%2egetCtx */] = function (key) {\r\n            if (key) {\r\n                // The parent and child links are located directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent[strParentContextKey] || key === PerfEvent[strChildrenContextKey]) {\r\n                    return _self[key];\r\n                }\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            }\r\n            return null;\r\n        };\r\n        _self[_DYN_SET_CTX /* @min:%2esetCtx */] = function (key, value) {\r\n            if (key) {\r\n                // Put the parent and child links directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent[strParentContextKey]) {\r\n                    // Simple assumption, if we are setting a parent then we must be a child\r\n                    if (!_self[key]) {\r\n                        _self[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */] = function () { return true; };\r\n                    }\r\n                    _self[key] = value;\r\n                }\r\n                else if (key === PerfEvent[strChildrenContextKey]) {\r\n                    _self[key] = value;\r\n                }\r\n                else {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            }\r\n        };\r\n        _self.complete = function () {\r\n            var childTime = 0;\r\n            var childEvts = _self[_DYN_GET_CTX /* @min:%2egetCtx */](PerfEvent[strChildrenContextKey]);\r\n            if (isArray(childEvts)) {\r\n                for (var lp = 0; lp < childEvts[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                    var childEvt = childEvts[lp];\r\n                    if (childEvt) {\r\n                        childTime += childEvt.time;\r\n                    }\r\n                }\r\n            }\r\n            _self.time = utcNow() - _self.start;\r\n            _self.exTime = _self.time - childTime;\r\n            _self.complete = function () { };\r\n        };\r\n    }\r\n    PerfEvent.ParentContextKey = \"parent\";\r\n    PerfEvent.ChildrenContextKey = \"childEvts\";\r\n    return PerfEvent;\r\n}());\r\nexport { PerfEvent };\r\nvar PerfManager = /** @class */ (function () {\r\n    function PerfManager(manager) {\r\n        /**\r\n         * General bucket used for execution context set and retrieved via setCtx() and getCtx.\r\n         * Defined as private so it can be visualized via the DebugPlugin\r\n         */\r\n        this.ctx = {};\r\n        dynamicProto(PerfManager, this, function (_self) {\r\n            _self.create = function (src, payloadDetails, isAsync) {\r\n                // TODO (@MSNev): at some point we will want to add additional configuration to \"select\" which events to instrument\r\n                // for now this is just a simple do everything.\r\n                return new PerfEvent(src, payloadDetails, isAsync);\r\n            };\r\n            _self.fire = function (perfEvent) {\r\n                if (perfEvent) {\r\n                    perfEvent.complete();\r\n                    if (manager && isFunction(manager[STR_PERF_EVENT /* @min:%2eperfEvent */])) {\r\n                        manager[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_SET_CTX /* @min:%2esetCtx */] = function (key, value) {\r\n                if (key) {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            };\r\n            _self[_DYN_GET_CTX /* @min:%2egetCtx */] = function (key) {\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Create a new event and start timing, the manager may return null/undefined to indicate that it does not\r\n     * want to monitor this source event.\r\n     * @param src - The source name of the event\r\n     * @param payloadDetails - An optional callback function to fetch the payload details for the event.\r\n     * @param isAsync - Is the event occurring from a async event\r\n     */\r\n    PerfManager.prototype.create = function (src, payload, isAsync) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Complete the perfEvent and fire any notifications.\r\n     * @param perfEvent - Fire the event which will also complete the passed event\r\n     */\r\n    PerfManager.prototype.fire = function (perfEvent) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Set an execution context value\r\n     * @param key - The context key name\r\n     * @param value - The value\r\n     */\r\n    PerfManager.prototype.setCtx = function (key, value) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get the execution context value\r\n     * @param key - The context key\r\n     */\r\n    PerfManager.prototype.getCtx = function (key) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PerfManager;\r\n}());\r\nexport { PerfManager };\r\nvar doPerfActiveKey = \"CoreUtils.doPerf\";\r\n/**\r\n * Helper function to wrap a function with a perf event\r\n * @param mgrSource - The Performance Manager or a Performance provider source (may be null)\r\n * @param getSource - The callback to create the source name for the event (if perf monitoring is enabled)\r\n * @param func - The function to call and measure\r\n * @param details - A function to return the payload details\r\n * @param isAsync - Is the event / function being call asynchronously or synchronously\r\n */\r\nexport function doPerf(mgrSource, getSource, func, details, isAsync) {\r\n    if (mgrSource) {\r\n        var perfMgr = mgrSource;\r\n        if (perfMgr[STR_GET_PERF_MGR]) {\r\n            // Looks like a perf manager provider object\r\n            perfMgr = perfMgr[STR_GET_PERF_MGR]();\r\n        }\r\n        if (perfMgr) {\r\n            var perfEvt = void 0;\r\n            var currentActive = perfMgr[_DYN_GET_CTX /* @min:%2egetCtx */](doPerfActiveKey);\r\n            try {\r\n                perfEvt = perfMgr.create(getSource(), details, isAsync);\r\n                if (perfEvt) {\r\n                    if (currentActive && perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                        perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */](PerfEvent[strParentContextKey], currentActive);\r\n                        if (currentActive[_DYN_GET_CTX /* @min:%2egetCtx */] && currentActive[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                            var children = currentActive[_DYN_GET_CTX /* @min:%2egetCtx */](PerfEvent[strChildrenContextKey]);\r\n                            if (!children) {\r\n                                children = [];\r\n                                currentActive[_DYN_SET_CTX /* @min:%2esetCtx */](PerfEvent[strChildrenContextKey], children);\r\n                            }\r\n                            children[_DYN_PUSH /* @min:%2epush */](perfEvt);\r\n                        }\r\n                    }\r\n                    // Set this event as the active event now\r\n                    perfMgr[_DYN_SET_CTX /* @min:%2esetCtx */](doPerfActiveKey, perfEvt);\r\n                    return func(perfEvt);\r\n                }\r\n            }\r\n            catch (ex) {\r\n                if (perfEvt && perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                    perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */](\"exception\", ex);\r\n                }\r\n            }\r\n            finally {\r\n                // fire the perf event\r\n                if (perfEvt) {\r\n                    perfMgr.fire(perfEvt);\r\n                }\r\n                // Reset the active event to the previous value\r\n                perfMgr[_DYN_SET_CTX /* @min:%2esetCtx */](doPerfActiveKey, currentActive);\r\n            }\r\n        }\r\n    }\r\n    return func();\r\n}\r\n/**\r\n * Set the global performance manager to use when there is no core instance or it has not been initialized yet.\r\n * @param perfManager - The IPerfManager instance to use when no performance manager is supplied.\r\n */\r\nexport function setGblPerfMgr(perfManager) {\r\n    _defaultPerfManager = perfManager;\r\n}\r\n/**\r\n * Get the current global performance manager that will be used with no performance manager is supplied.\r\n * @returns - The current default manager\r\n */\r\nexport function getGblPerfMgr() {\r\n    return _defaultPerfManager;\r\n}\r\n//# sourceMappingURL=PerfManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { strSubstr, strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nimport { random32 } from \"./RandomHelper\";\r\n// Added to help with minfication\r\nexport var Undefined = strShimUndefined;\r\nexport function newGuid() {\r\n    var uuid = generateW3CId();\r\n    return strSubstring(uuid, 0, 8) + \"-\" + strSubstring(uuid, 8, 12) + \"-\" + strSubstring(uuid, 12, 16) + \"-\" + strSubstring(uuid, 16, 20) + \"-\" + strSubstring(uuid, 20);\r\n}\r\n/**\r\n * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function strEndsWith(value, search) {\r\n    if (value && search) {\r\n        var len = value[_DYN_LENGTH /* @min:%2elength */];\r\n        var start = len - search[_DYN_LENGTH /* @min:%2elength */];\r\n        return strSubstring(value, start >= 0 ? start : 0, len) === search;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * generate W3C trace id\r\n */\r\nexport function generateW3CId() {\r\n    var hexValues = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n    // rfc4122 version 4 UUID without dashes and with lowercase letters\r\n    var oct = STR_EMPTY, tmp;\r\n    for (var a = 0; a < 4; a++) {\r\n        tmp = random32();\r\n        oct +=\r\n            hexValues[tmp & 0xF] +\r\n                hexValues[tmp >> 4 & 0xF] +\r\n                hexValues[tmp >> 8 & 0xF] +\r\n                hexValues[tmp >> 12 & 0xF] +\r\n                hexValues[tmp >> 16 & 0xF] +\r\n                hexValues[tmp >> 20 & 0xF] +\r\n                hexValues[tmp >> 24 & 0xF] +\r\n                hexValues[tmp >> 28 & 0xF];\r\n    }\r\n    // \"Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively\"\r\n    var clockSequenceHi = hexValues[8 + (random32() & 0x03) | 0];\r\n    return strSubstr(oct, 0, 8) + strSubstr(oct, 9, 4) + \"4\" + strSubstr(oct, 13, 3) + clockSequenceHi + strSubstr(oct, 16, 3) + strSubstr(oct, 19, 12);\r\n}\r\n//# sourceMappingURL=CoreUtils.js.map","import { arrForEach, isArray, isString, strLeft, strTrim } from \"@nevware21/ts-utils\";\r\nimport { _DYN_GET_ATTRIBUTE, _DYN_LENGTH, _DYN_PUSH, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_VERSION } from \"../__DynamicConstants\";\r\nimport { generateW3CId } from \"./CoreUtils\";\r\nimport { findMetaTag, findNamedServerTiming } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// using {0,16} for leading and trailing whitespace just to constrain the possible runtime of a random string\r\nvar TRACE_PARENT_REGEX = /^([\\da-f]{2})-([\\da-f]{32})-([\\da-f]{16})-([\\da-f]{2})(-[^\\s]{1,64})?$/i;\r\nvar DEFAULT_VERSION = \"00\";\r\nvar INVALID_VERSION = \"ff\";\r\nvar INVALID_TRACE_ID = \"00000000000000000000000000000000\";\r\nvar INVALID_SPAN_ID = \"0000000000000000\";\r\nvar SAMPLED_FLAG = 0x01;\r\nfunction _isValid(value, len, invalidValue) {\r\n    if (value && value[_DYN_LENGTH /* @min:%2elength */] === len && value !== invalidValue) {\r\n        return !!value.match(/^[\\da-f]*$/i);\r\n    }\r\n    return false;\r\n}\r\nfunction _formatValue(value, len, defValue) {\r\n    if (_isValid(value, len)) {\r\n        return value;\r\n    }\r\n    return defValue;\r\n}\r\nfunction _formatFlags(value) {\r\n    if (isNaN(value) || value < 0 || value > 255) {\r\n        value = 0x01;\r\n    }\r\n    var result = value.toString(16);\r\n    while (result[_DYN_LENGTH /* @min:%2elength */] < 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create a new ITraceParent instance using the provided values.\r\n * @param traceId - The traceId to use, when invalid a new random W3C id will be generated.\r\n * @param spanId - The parent/span id to use, a new random value will be generated if it is invalid.\r\n * @param flags - The traceFlags to use, defaults to zero (0) if not supplied or invalid\r\n * @param version - The version to used, defaults to version \"01\" if not supplied or invalid.\r\n * @returns\r\n */\r\nexport function createTraceParent(traceId, spanId, flags, version) {\r\n    return {\r\n        version: _isValid(version, 2, INVALID_VERSION) ? version : DEFAULT_VERSION,\r\n        traceId: isValidTraceId(traceId) ? traceId : generateW3CId(),\r\n        spanId: isValidSpanId(spanId) ? spanId : strLeft(generateW3CId(), 16),\r\n        traceFlags: flags >= 0 && flags <= 0xFF ? flags : 1\r\n    };\r\n}\r\n/**\r\n * Attempt to parse the provided string as a W3C TraceParent header value (https://www.w3.org/TR/trace-context/#traceparent-header)\r\n *\r\n * @param value - The value to be parsed\r\n * @param selectIdx - If the found value is comma separated which is the preferred entry to select, defaults to the first\r\n * @returns\r\n */\r\nexport function parseTraceParent(value, selectIdx) {\r\n    if (!value) {\r\n        // Don't pass a null/undefined or empty string\r\n        return null;\r\n    }\r\n    if (isArray(value)) {\r\n        // The value may have been encoded on the page into an array so handle this automatically\r\n        value = value[0] || \"\";\r\n    }\r\n    if (!value || !isString(value) || value[_DYN_LENGTH /* @min:%2elength */] > 8192) {\r\n        // limit potential processing based on total length\r\n        return null;\r\n    }\r\n    if (value.indexOf(\",\") !== -1) {\r\n        var values = value[_DYN_SPLIT /* @min:%2esplit */](\",\");\r\n        value = values[selectIdx > 0 && values[_DYN_LENGTH /* @min:%2elength */] > selectIdx ? selectIdx : 0];\r\n    }\r\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\r\n    var match = TRACE_PARENT_REGEX.exec(strTrim(value));\r\n    if (!match || // No match\r\n        match[1] === INVALID_VERSION || // version ff is forbidden\r\n        match[2] === INVALID_TRACE_ID || // All zeros is considered to be invalid\r\n        match[3] === INVALID_SPAN_ID) { // All zeros is considered to be invalid\r\n        return null;\r\n    }\r\n    return {\r\n        version: (match[1] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](),\r\n        traceId: (match[2] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](),\r\n        spanId: (match[3] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](),\r\n        traceFlags: parseInt(match[4], 16)\r\n    };\r\n}\r\n/**\r\n * Is the provided W3c Trace Id a valid string representation, it must be a 32-character string\r\n * of lowercase hexadecimal characters for example, 4bf92f3577b34da6a3ce929d0e0e4736.\r\n * If all characters as zero (00000000000000000000000000000000) it will be considered an invalid value.\r\n * @param value - The W3c trace Id to be validated\r\n * @returns true if valid otherwise false\r\n */\r\nexport function isValidTraceId(value) {\r\n    return _isValid(value, 32, INVALID_TRACE_ID);\r\n}\r\n/**\r\n * Is the provided W3c span id (aka. parent id) a valid string representation, it must be a 16-character\r\n * string of lowercase hexadecimal characters, for example, 00f067aa0ba902b7.\r\n * If all characters are zero (0000000000000000) this is considered an invalid value.\r\n * @param value - The W3c span id to be validated\r\n * @returns true if valid otherwise false\r\n */\r\nexport function isValidSpanId(value) {\r\n    return _isValid(value, 16, INVALID_SPAN_ID);\r\n}\r\n/**\r\n * Validates that the provided ITraceParent instance conforms to the currently supported specifications\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\r\nexport function isValidTraceParent(value) {\r\n    if (!value ||\r\n        !_isValid(value[_DYN_VERSION /* @min:%2eversion */], 2, INVALID_VERSION) ||\r\n        !_isValid(value.traceId, 32, INVALID_TRACE_ID) ||\r\n        !_isValid(value.spanId, 16, INVALID_SPAN_ID) ||\r\n        !_isValid(_formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]), 2)) {\r\n        // Each known field must contain a valid value\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Is the parsed traceParent indicating that the trace is currently sampled.\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\r\nexport function isSampledFlag(value) {\r\n    if (isValidTraceParent(value)) {\r\n        return (value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] & SAMPLED_FLAG) === SAMPLED_FLAG;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Format the ITraceParent value as a string using the supported and know version formats.\r\n * So even if the passed traceParent is a later version the string value returned from this\r\n * function will convert it to only the known version formats.\r\n * This currently only supports version \"00\" and invalid \"ff\"\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\r\nexport function formatTraceParent(value) {\r\n    if (value) {\r\n        // Special Note: This only supports formatting as version 00, future versions should encode any known supported version\r\n        // So parsing a future version will populate the correct version value but reformatting will reduce it to version 00.\r\n        var flags = _formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]);\r\n        if (!_isValid(flags, 2)) {\r\n            flags = \"01\";\r\n        }\r\n        var version = value[_DYN_VERSION /* @min:%2eversion */] || DEFAULT_VERSION;\r\n        if (version !== \"00\" && version !== \"ff\") {\r\n            // Reduce version to \"00\"\r\n            version = DEFAULT_VERSION;\r\n        }\r\n        // Format as version 00\r\n        return \"\".concat(version.toLowerCase(), \"-\").concat(_formatValue(value.traceId, 32, INVALID_TRACE_ID).toLowerCase(), \"-\").concat(_formatValue(value.spanId, 16, INVALID_SPAN_ID).toLowerCase(), \"-\").concat(flags.toLowerCase());\r\n    }\r\n    return \"\";\r\n}\r\n/**\r\n * Helper function to fetch the passed traceparent from the page, looking for it as a meta-tag or a Server-Timing header.\r\n * @param selectIdx - If the found value is comma separated which is the preferred entry to select, defaults to the first\r\n * @returns\r\n */\r\nexport function findW3cTraceParent(selectIdx) {\r\n    var name = \"traceparent\";\r\n    var traceParent = parseTraceParent(findMetaTag(name), selectIdx);\r\n    if (!traceParent) {\r\n        traceParent = parseTraceParent(findNamedServerTiming(name), selectIdx);\r\n    }\r\n    return traceParent;\r\n}\r\n/**\r\n * Find all script tags in the provided document and return the information about them.\r\n * @param doc - The document to search for script tags\r\n * @returns\r\n */\r\nexport function findAllScripts(doc) {\r\n    var scripts = doc.getElementsByTagName(\"script\");\r\n    var result = [];\r\n    arrForEach(scripts, function (script) {\r\n        var src = script[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"src\");\r\n        if (src) {\r\n            var crossOrigin = script[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"crossorigin\");\r\n            var async = script.hasAttribute(\"async\") === true;\r\n            var defer = script.hasAttribute(\"defer\") === true;\r\n            var referrerPolicy = script[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"referrerpolicy\");\r\n            var info = { url: src };\r\n            if (crossOrigin) {\r\n                info.crossOrigin = crossOrigin;\r\n            }\r\n            if (async) {\r\n                info.async = async;\r\n            }\r\n            if (defer) {\r\n                info.defer = defer;\r\n            }\r\n            if (referrerPolicy) {\r\n                info.referrerPolicy = referrerPolicy;\r\n            }\r\n            result[_DYN_PUSH /* @min:%2epush */](info);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n//# sourceMappingURL=W3cTraceParent.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { arrForEach, isFunction } from \"@nevware21/ts-utils\";\r\nimport { _DYN_GET_NEXT, _DYN_GET_PLUGIN, _DYN_INITIALIZE, _DYN_IS_INITIALIZED, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_TRACE_FLAGS, _DYN__DO_TEARDOWN } from \"../__DynamicConstants\";\r\nimport { createElmNodeData } from \"./DataCacheHelper\";\r\nimport { STR_CORE, STR_PRIORITY, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { isValidSpanId, isValidTraceId } from \"./W3cTraceParent\";\r\nvar pluginStateData = createElmNodeData(\"plugin\");\r\nexport function _getPluginState(plugin) {\r\n    return pluginStateData.get(plugin, \"state\", {}, true);\r\n}\r\n/**\r\n * Initialize the queue of plugins\r\n * @param plugins - The array of plugins to initialize and setting of the next plugin\r\n * @param config - The current config for the instance\r\n * @param core - THe current core instance\r\n * @param extensions - The extensions\r\n */\r\nexport function initializePlugins(processContext, extensions) {\r\n    // Set the next plugin and identified the uninitialized plugins\r\n    var initPlugins = [];\r\n    var lastPlugin = null;\r\n    var proxy = processContext[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n    var pluginState;\r\n    while (proxy) {\r\n        var thePlugin = proxy[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]();\r\n        if (thePlugin) {\r\n            if (lastPlugin && lastPlugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */] && thePlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */]) {\r\n                // Set this plugin as the next for the previous one\r\n                lastPlugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */](thePlugin);\r\n            }\r\n            pluginState = _getPluginState(thePlugin);\r\n            var isInitialized = !!pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */];\r\n            if (thePlugin[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]) {\r\n                isInitialized = thePlugin[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]();\r\n            }\r\n            if (!isInitialized) {\r\n                initPlugins[_DYN_PUSH /* @min:%2epush */](thePlugin);\r\n            }\r\n            lastPlugin = thePlugin;\r\n            proxy = proxy[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n        }\r\n    }\r\n    // Now initialize the plugins\r\n    arrForEach(initPlugins, function (thePlugin) {\r\n        var core = processContext[STR_CORE /* @min:%2ecore */]();\r\n        thePlugin[_DYN_INITIALIZE /* @min:%2einitialize */](processContext.getCfg(), core, extensions, processContext[_DYN_GET_NEXT /* @min:%2egetNext */]());\r\n        pluginState = _getPluginState(thePlugin);\r\n        // Only add the core to the state if the plugin didn't set it (doesn't extend from BaseTelemetryPlugin)\r\n        if (!thePlugin[STR_CORE] && !pluginState[STR_CORE]) {\r\n            pluginState[STR_CORE] = core;\r\n        }\r\n        pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = true;\r\n        delete pluginState[_DYN_TEARDOWN /* @min:%2eteardown */];\r\n    });\r\n}\r\nexport function sortPlugins(plugins) {\r\n    // Sort by priority\r\n    return plugins.sort(function (extA, extB) {\r\n        var result = 0;\r\n        if (extB) {\r\n            var bHasProcess = extB[STR_PROCESS_TELEMETRY];\r\n            if (extA[STR_PROCESS_TELEMETRY]) {\r\n                result = bHasProcess ? extA[STR_PRIORITY] - extB[STR_PRIORITY] : 1;\r\n            }\r\n            else if (bHasProcess) {\r\n                result = -1;\r\n            }\r\n        }\r\n        else {\r\n            result = extA ? 1 : -1;\r\n        }\r\n        return result;\r\n    });\r\n    // sort complete\r\n}\r\n/**\r\n * Teardown / Unload helper to perform teardown/unloading operations for the provided components synchronously or asynchronously, this will call any\r\n * _doTeardown() or _doUnload() functions on the provided components to allow them to finish removal.\r\n * @param components - The components you want to unload\r\n * @param unloadCtx - This is the context that should be used during unloading.\r\n * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n * @param asyncCallback - An optional callback that the plugin must call if it returns true to inform the caller that it has completed any async unload/teardown operations.\r\n * @returns boolean - true if the plugin has or will call asyncCallback, this allows the plugin to perform any asynchronous operations.\r\n */\r\nexport function unloadComponents(components, unloadCtx, unloadState, asyncCallback) {\r\n    var idx = 0;\r\n    function _doUnload() {\r\n        while (idx < components[_DYN_LENGTH /* @min:%2elength */]) {\r\n            var component = components[idx++];\r\n            if (component) {\r\n                var func = component._doUnload || component[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */];\r\n                if (isFunction(func)) {\r\n                    if (func.call(component, unloadCtx, unloadState, _doUnload) === true) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _doUnload();\r\n}\r\n/**\r\n * Creates a IDistributedTraceContext which optionally also \"sets\" the value on a parent\r\n * @param parentCtx - An optional parent distributed trace instance\r\n * @returns A new IDistributedTraceContext instance that uses an internal temporary object\r\n */\r\nexport function createDistributedTraceContext(parentCtx) {\r\n    var trace = {};\r\n    return {\r\n        getName: function () {\r\n            return trace[_DYN_NAME /* @min:%2ename */];\r\n        },\r\n        setName: function (newValue) {\r\n            parentCtx && parentCtx.setName(newValue);\r\n            trace[_DYN_NAME /* @min:%2ename */] = newValue;\r\n        },\r\n        getTraceId: function () {\r\n            return trace.traceId;\r\n        },\r\n        setTraceId: function (newValue) {\r\n            parentCtx && parentCtx.setTraceId(newValue);\r\n            if (isValidTraceId(newValue)) {\r\n                trace.traceId = newValue;\r\n            }\r\n        },\r\n        getSpanId: function () {\r\n            return trace.spanId;\r\n        },\r\n        setSpanId: function (newValue) {\r\n            parentCtx && parentCtx.setSpanId(newValue);\r\n            if (isValidSpanId(newValue)) {\r\n                trace.spanId = newValue;\r\n            }\r\n        },\r\n        getTraceFlags: function () {\r\n            return trace[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n        },\r\n        setTraceFlags: function (newTraceFlags) {\r\n            parentCtx && parentCtx.setTraceFlags(newTraceFlags);\r\n            trace[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = newTraceFlags;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=TelemetryHelpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { arrForEach, dumpObj, isArray, isFunction, isNullOrUndefined, isUndefined, objForEachKey, objFreeze, objKeys } from \"@nevware21/ts-utils\";\r\nimport { _applyDefaultValue } from \"../Config/ConfigDefaults\";\r\nimport { createDynamicConfig } from \"../Config/DynamicConfig\";\r\nimport { _DYN_CREATE_NEW, _DYN_DIAG_LOG, _DYN_GET_NEXT, _DYN_GET_PLUGIN, _DYN_IDENTIFIER, _DYN_IS_INITIALIZED, _DYN_LENGTH, _DYN_LOGGER, _DYN_PROCESS_NEXT, _DYN_PUSH, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_UNLOAD, _DYN_UPDATE } from \"../__DynamicConstants\";\r\nimport { _throwInternal, safeGetLogger } from \"./DiagnosticLogger\";\r\nimport { proxyFunctions } from \"./HelperFuncs\";\r\nimport { STR_CORE, STR_DISABLED, STR_EMPTY, STR_EXTENSION_CONFIG, STR_PRIORITY, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { doPerf } from \"./PerfManager\";\r\nimport { _getPluginState } from \"./TelemetryHelpers\";\r\nvar strTelemetryPluginChain = \"TelemetryPluginChain\";\r\nvar strHasRunFlags = \"_hasRun\";\r\nvar strGetTelCtx = \"_getTelCtx\";\r\nvar _chainId = 0;\r\nfunction _getNextProxyStart(proxy, core, startAt) {\r\n    while (proxy) {\r\n        if (proxy[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]() === startAt) {\r\n            return proxy;\r\n        }\r\n        proxy = proxy[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n    }\r\n    // This wasn't found in the existing chain so create an isolated one with just this plugin\r\n    return createTelemetryProxyChain([startAt], core.config || {}, core);\r\n}\r\n/**\r\n * @ignore\r\n * @param telemetryChain\r\n * @param dynamicHandler\r\n * @param core\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n * @returns\r\n */\r\nfunction _createInternalContext(telemetryChain, dynamicHandler, core, startAt) {\r\n    // We have a special case where we want to start execution from this specific plugin\r\n    // or we simply reuse the existing telemetry plugin chain (normal execution case)\r\n    var _nextProxy = null; // By Default set as no next plugin\r\n    var _onComplete = [];\r\n    if (!dynamicHandler) {\r\n        dynamicHandler = createDynamicConfig({}, null, core[_DYN_LOGGER /* @min:%2elogger */]);\r\n    }\r\n    if (startAt !== null) {\r\n        // There is no next element (null) vs not defined (undefined) so use the full chain\r\n        _nextProxy = startAt ? _getNextProxyStart(telemetryChain, core, startAt) : telemetryChain;\r\n    }\r\n    var context = {\r\n        _next: _moveNext,\r\n        ctx: {\r\n            core: function () {\r\n                return core;\r\n            },\r\n            diagLog: function () {\r\n                return safeGetLogger(core, dynamicHandler.cfg);\r\n            },\r\n            getCfg: function () {\r\n                return dynamicHandler.cfg;\r\n            },\r\n            getExtCfg: _resolveExtCfg,\r\n            getConfig: _getConfig,\r\n            hasNext: function () {\r\n                return !!_nextProxy;\r\n            },\r\n            getNext: function () {\r\n                return _nextProxy;\r\n            },\r\n            setNext: function (nextPlugin) {\r\n                _nextProxy = nextPlugin;\r\n            },\r\n            iterate: _iterateChain,\r\n            onComplete: _addOnComplete\r\n        }\r\n    };\r\n    function _addOnComplete(onComplete, that) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (onComplete) {\r\n            _onComplete[_DYN_PUSH /* @min:%2epush */]({\r\n                func: onComplete,\r\n                self: !isUndefined(that) ? that : context.ctx,\r\n                args: args\r\n            });\r\n        }\r\n    }\r\n    function _moveNext() {\r\n        var nextProxy = _nextProxy;\r\n        // Automatically move to the next plugin\r\n        _nextProxy = nextProxy ? nextProxy[_DYN_GET_NEXT /* @min:%2egetNext */]() : null;\r\n        if (!nextProxy) {\r\n            var onComplete = _onComplete;\r\n            if (onComplete && onComplete[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                arrForEach(onComplete, function (completeDetails) {\r\n                    try {\r\n                        completeDetails.func.call(completeDetails.self, completeDetails.args);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(core[_DYN_LOGGER /* @min:%2elogger */], 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected Exception during onComplete - \" + dumpObj(e));\r\n                    }\r\n                });\r\n                _onComplete = [];\r\n            }\r\n        }\r\n        return nextProxy;\r\n    }\r\n    function _getExtCfg(identifier, createIfMissing) {\r\n        var idCfg = null;\r\n        var cfg = dynamicHandler.cfg;\r\n        if (cfg && identifier) {\r\n            var extCfg = cfg[STR_EXTENSION_CONFIG /* @min:%2eextensionConfig */];\r\n            if (!extCfg && createIfMissing) {\r\n                extCfg = {};\r\n            }\r\n            // Always set the value so that the property always exists\r\n            cfg[STR_EXTENSION_CONFIG] = extCfg; // Note: it is valid for the \"value\" to be undefined\r\n            // Calling `ref()` has a side effect of causing the referenced property to become dynamic  (if not already)\r\n            extCfg = dynamicHandler.ref(cfg, STR_EXTENSION_CONFIG);\r\n            if (extCfg) {\r\n                idCfg = extCfg[identifier];\r\n                if (!idCfg && createIfMissing) {\r\n                    idCfg = {};\r\n                }\r\n                // Always set the value so that the property always exists\r\n                extCfg[identifier] = idCfg; // Note: it is valid for the \"value\" to be undefined\r\n                // Calling `ref()` has a side effect of causing the referenced property to become dynamic  (if not already)\r\n                idCfg = dynamicHandler.ref(extCfg, identifier);\r\n            }\r\n        }\r\n        return idCfg;\r\n    }\r\n    function _resolveExtCfg(identifier, defaultValues) {\r\n        var newConfig = _getExtCfg(identifier, true);\r\n        if (defaultValues) {\r\n            // Enumerate over the defaultValues and if not already populated attempt to\r\n            // find a value from the root config or use the default value\r\n            objForEachKey(defaultValues, function (field, defaultValue) {\r\n                // for each unspecified field, set the default value\r\n                if (isNullOrUndefined(newConfig[field])) {\r\n                    var cfgValue = dynamicHandler.cfg[field];\r\n                    if (cfgValue || !isNullOrUndefined(cfgValue)) {\r\n                        newConfig[field] = cfgValue;\r\n                    }\r\n                }\r\n                _applyDefaultValue(dynamicHandler, newConfig, field, defaultValue);\r\n            });\r\n        }\r\n        return dynamicHandler.setDf(newConfig, defaultValues);\r\n    }\r\n    function _getConfig(identifier, field, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        var theValue;\r\n        var extConfig = _getExtCfg(identifier, false);\r\n        var rootConfig = dynamicHandler.cfg;\r\n        if (extConfig && (extConfig[field] || !isNullOrUndefined(extConfig[field]))) {\r\n            theValue = extConfig[field];\r\n        }\r\n        else if (rootConfig[field] || !isNullOrUndefined(rootConfig[field])) {\r\n            theValue = rootConfig[field];\r\n        }\r\n        return (theValue || !isNullOrUndefined(theValue)) ? theValue : defaultValue;\r\n    }\r\n    function _iterateChain(cb) {\r\n        // Keep processing until we reach the end of the chain\r\n        var nextPlugin;\r\n        while (!!(nextPlugin = context._next())) {\r\n            var plugin = nextPlugin[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]();\r\n            if (plugin) {\r\n                // callback with the current on\r\n                cb(plugin);\r\n            }\r\n        }\r\n    }\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryContext(telemetryChain, cfg, core, startAt) {\r\n    var config = createDynamicConfig(cfg);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(env) {\r\n        var nextPlugin = internalContext._next();\r\n        if (nextPlugin) {\r\n            // Run the next plugin which will call \"processNext()\"\r\n            nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, context);\r\n        }\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), config.cfg, core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for handling the unloading of the chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUnloadContext(telemetryChain, core, startAt) {\r\n    var config = createDynamicConfig(core.config);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(unloadState) {\r\n        var nextPlugin = internalContext._next();\r\n        nextPlugin && nextPlugin[_DYN_UNLOAD /* @min:%2eunload */](context, unloadState);\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryUnloadContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for updating the configuration\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUpdateContext(telemetryChain, core, startAt) {\r\n    var config = createDynamicConfig(core.config);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(updateState) {\r\n        return context.iterate(function (plugin) {\r\n            if (isFunction(plugin[_DYN_UPDATE /* @min:%2eupdate */])) {\r\n                plugin[_DYN_UPDATE /* @min:%2eupdate */](context, updateState);\r\n            }\r\n        });\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryUpdateContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates an execution chain from the array of plugins\r\n * @param plugins - The array of plugins that will be executed in this order\r\n * @param defItemCtx - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n */\r\nexport function createTelemetryProxyChain(plugins, config, core, startAt) {\r\n    var firstProxy = null;\r\n    var add = startAt ? false : true;\r\n    if (isArray(plugins) && plugins[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        // Create the proxies and wire up the next plugin chain\r\n        var lastProxy_1 = null;\r\n        arrForEach(plugins, function (thePlugin) {\r\n            if (!add && startAt === thePlugin) {\r\n                add = true;\r\n            }\r\n            if (add && thePlugin && isFunction(thePlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */])) {\r\n                // Only add plugins that are processors\r\n                var newProxy = createTelemetryPluginProxy(thePlugin, config, core);\r\n                if (!firstProxy) {\r\n                    firstProxy = newProxy;\r\n                }\r\n                if (lastProxy_1) {\r\n                    // Set this new proxy as the next for the previous one\r\n                    lastProxy_1._setNext(newProxy);\r\n                }\r\n                lastProxy_1 = newProxy;\r\n            }\r\n        });\r\n    }\r\n    if (startAt && !firstProxy) {\r\n        // Special case where the \"startAt\" was not in the original list of plugins\r\n        return createTelemetryProxyChain([startAt], config, core);\r\n    }\r\n    return firstProxy;\r\n}\r\n/**\r\n * Create the processing telemetry proxy instance, the proxy is used to abstract the current plugin to allow monitoring and\r\n * execution plugins while passing around the dynamic execution state (IProcessTelemetryContext), the proxy instance no longer\r\n * contains any execution state and can be reused between requests (this was not the case for 2.7.2 and earlier with the\r\n * TelemetryPluginChain class).\r\n * @param plugin - The plugin instance to proxy\r\n * @param config - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n * @returns\r\n */\r\nexport function createTelemetryPluginProxy(plugin, config, core) {\r\n    var nextProxy = null;\r\n    var hasProcessTelemetry = isFunction(plugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */]);\r\n    var hasSetNext = isFunction(plugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */]);\r\n    var chainId;\r\n    if (plugin) {\r\n        chainId = plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */] + \"-\" + plugin[STR_PRIORITY /* @min:%2epriority */] + \"-\" + _chainId++;\r\n    }\r\n    else {\r\n        chainId = \"Unknown-0-\" + _chainId++;\r\n    }\r\n    var proxyChain = {\r\n        getPlugin: function () {\r\n            return plugin;\r\n        },\r\n        getNext: function () {\r\n            return nextProxy;\r\n        },\r\n        processTelemetry: _processTelemetry,\r\n        unload: _unloadPlugin,\r\n        update: _updatePlugin,\r\n        _id: chainId,\r\n        _setNext: function (nextPlugin) {\r\n            nextProxy = nextPlugin;\r\n        }\r\n    };\r\n    function _getTelCtx() {\r\n        var itemCtx;\r\n        // Looks like a plugin didn't pass the (optional) context, so create a new one\r\n        if (plugin && isFunction(plugin[strGetTelCtx])) {\r\n            // This plugin extends from the BaseTelemetryPlugin so lets use it\r\n            itemCtx = plugin[strGetTelCtx]();\r\n        }\r\n        if (!itemCtx) {\r\n            // Create a temporary one\r\n            itemCtx = createProcessTelemetryContext(proxyChain, config, core);\r\n        }\r\n        return itemCtx;\r\n    }\r\n    function _processChain(itemCtx, processPluginFn, name, details, isAsync) {\r\n        var hasRun = false;\r\n        var identifier = plugin ? plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */] : strTelemetryPluginChain;\r\n        var hasRunContext = itemCtx[strHasRunFlags];\r\n        if (!hasRunContext) {\r\n            // Assign and populate\r\n            hasRunContext = itemCtx[strHasRunFlags] = {};\r\n        }\r\n        // Ensure that we keep the context in sync\r\n        itemCtx.setNext(nextProxy);\r\n        if (plugin) {\r\n            doPerf(itemCtx[STR_CORE /* @min:%2ecore */](), function () { return identifier + \":\" + name; }, function () {\r\n                // Mark this component as having run\r\n                hasRunContext[chainId] = true;\r\n                try {\r\n                    // Set a flag on the next plugin so we know if it was attempted to be executed\r\n                    var nextId = nextProxy ? nextProxy._id : STR_EMPTY;\r\n                    if (nextId) {\r\n                        hasRunContext[nextId] = false;\r\n                    }\r\n                    hasRun = processPluginFn(itemCtx);\r\n                }\r\n                catch (error) {\r\n                    var hasNextRun = nextProxy ? hasRunContext[nextProxy._id] : true;\r\n                    if (hasNextRun) {\r\n                        // The next plugin after us has already run so set this one as complete\r\n                        hasRun = true;\r\n                    }\r\n                    if (!nextProxy || !hasNextRun) {\r\n                        // Either we have no next plugin or the current one did not attempt to call the next plugin\r\n                        // Which means the current one is the root of the failure so log/report this failure\r\n                        _throwInternal(itemCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 73 /* _eInternalMessageId.PluginException */, \"Plugin [\" + identifier + \"] failed during \" + name + \" - \" + dumpObj(error) + \", run flags: \" + dumpObj(hasRunContext));\r\n                    }\r\n                }\r\n            }, details, isAsync);\r\n        }\r\n        return hasRun;\r\n    }\r\n    function _processTelemetry(env, itemCtx) {\r\n        itemCtx = itemCtx || _getTelCtx();\r\n        function _callProcessTelemetry(itemCtx) {\r\n            if (!plugin || !hasProcessTelemetry) {\r\n                return false;\r\n            }\r\n            var pluginState = _getPluginState(plugin);\r\n            if (pluginState[_DYN_TEARDOWN /* @min:%2eteardown */] || pluginState[STR_DISABLED]) {\r\n                return false;\r\n            }\r\n            // Ensure that we keep the context in sync (for processNext()), just in case a plugin\r\n            // doesn't calls processTelemetry() instead of itemContext.processNext() or some\r\n            // other form of error occurred\r\n            if (hasSetNext) {\r\n                // Backward compatibility setting the next plugin on the instance\r\n                plugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */](nextProxy);\r\n            }\r\n            plugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, itemCtx);\r\n            // Process Telemetry is expected to call itemCtx.processNext() or nextPlugin.processTelemetry()\r\n            return true;\r\n        }\r\n        if (!_processChain(itemCtx, _callProcessTelemetry, \"processTelemetry\", function () { return ({ item: env }); }, !(env.sync))) {\r\n            // The underlying plugin is either not defined, not enabled or does not have a processTelemetry implementation\r\n            // so we still want the next plugin to be executed.\r\n            itemCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](env);\r\n        }\r\n    }\r\n    function _unloadPlugin(unloadCtx, unloadState) {\r\n        function _callTeardown() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[STR_CORE] || pluginState[STR_CORE /* @min:%2ecore */];\r\n                // Only teardown the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === unloadCtx.core()) && !pluginState[_DYN_TEARDOWN /* @min:%2eteardown */]) {\r\n                    // Handle plugins that don't extend from the BaseTelemetryPlugin\r\n                    pluginState[STR_CORE /* @min:%2ecore */] = null;\r\n                    pluginState[_DYN_TEARDOWN /* @min:%2eteardown */] = true;\r\n                    pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = false;\r\n                    if (plugin[_DYN_TEARDOWN /* @min:%2eteardown */] && plugin[_DYN_TEARDOWN /* @min:%2eteardown */](unloadCtx, unloadState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(unloadCtx, _callTeardown, \"unload\", function () { }, unloadState.isAsync)) {\r\n            // Only called if we hasRun was not true\r\n            unloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](unloadState);\r\n        }\r\n    }\r\n    function _updatePlugin(updateCtx, updateState) {\r\n        function _callUpdate() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[STR_CORE] || pluginState[STR_CORE /* @min:%2ecore */];\r\n                // Only update the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === updateCtx.core()) && !pluginState[_DYN_TEARDOWN /* @min:%2eteardown */]) {\r\n                    if (plugin[_DYN_UPDATE /* @min:%2eupdate */] && plugin[_DYN_UPDATE /* @min:%2eupdate */](updateCtx, updateState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(updateCtx, _callUpdate, \"update\", function () { }, false)) {\r\n            // Only called if we hasRun was not true\r\n            updateCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](updateState);\r\n        }\r\n    }\r\n    return objFreeze(proxyChain);\r\n}\r\n/**\r\n * This class will be removed!\r\n * @deprecated use createProcessTelemetryContext() instead\r\n */\r\nvar ProcessTelemetryContext = /** @class */ (function () {\r\n    /**\r\n     * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n     * @param plugins - The plugin instances that will be executed\r\n     * @param config - The current config\r\n     * @param core - The current core instance\r\n     */\r\n    function ProcessTelemetryContext(pluginChain, config, core, startAt) {\r\n        var _self = this;\r\n        var context = createProcessTelemetryContext(pluginChain, config, core, startAt);\r\n        // Proxy all functions of the context to this object\r\n        proxyFunctions(_self, context, objKeys(context));\r\n    }\r\n    return ProcessTelemetryContext;\r\n}());\r\nexport { ProcessTelemetryContext };\r\n//# sourceMappingURL=ProcessTelemetryContext.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isFunction, objDefine } from \"@nevware21/ts-utils\";\r\nimport { createDynamicConfig } from \"../Config/DynamicConfig\";\r\nimport { _DYN_CREATE_NEW, _DYN_DIAG_LOG, _DYN_GET_NEXT, _DYN_GET_PROCESS_TEL_CONT2, _DYN_INITIALIZE, _DYN_IS_INITIALIZED, _DYN_PROCESS_NEXT, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_UPDATE, _DYN__DO_TEARDOWN } from \"../__DynamicConstants\";\r\nimport { safeGetLogger } from \"./DiagnosticLogger\";\r\nimport { isNotNullOrUndefined, proxyFunctionAs } from \"./HelperFuncs\";\r\nimport { STR_CORE, STR_EXTENSION_CONFIG, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { createProcessTelemetryContext, createProcessTelemetryUnloadContext, createProcessTelemetryUpdateContext } from \"./ProcessTelemetryContext\";\r\nimport { createUnloadHandlerContainer } from \"./UnloadHandlerContainer\";\r\nimport { createUnloadHookContainer } from \"./UnloadHookContainer\";\r\nvar strGetPlugin = \"getPlugin\";\r\nvar defaultValues = (_a = {},\r\n    _a[STR_EXTENSION_CONFIG] = { isVal: isNotNullOrUndefined, v: {} },\r\n    _a);\r\n/**\r\n * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins\r\n * can avoid implementation the same set of boiler plate code as well as provide a base\r\n * implementation so that new default implementations can be added without breaking all plugins.\r\n */\r\nvar BaseTelemetryPlugin = /** @class */ (function () {\r\n    function BaseTelemetryPlugin() {\r\n        var _self = this; // Setting _self here as it's used outside of the dynamicProto as well\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var _isinitialized;\r\n        var _rootCtx; // Used as the root context, holding the current config and initialized core\r\n        var _nextPlugin; // Used for backward compatibility where plugins don't call the main pipeline\r\n        var _unloadHandlerContainer;\r\n        var _hookContainer;\r\n        _initDefaults();\r\n        dynamicProto(BaseTelemetryPlugin, _self, function (_self) {\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, core, extensions, pluginChain) {\r\n                _setDefaults(config, core, pluginChain);\r\n                _isinitialized = true;\r\n            };\r\n            _self[_DYN_TEARDOWN /* @min:%2eteardown */] = function (unloadCtx, unloadState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self[STR_CORE /* @min:%2ecore */];\r\n                if (!core || (unloadCtx && core !== unloadCtx[STR_CORE /* @min:%2ecore */]())) {\r\n                    // Do Nothing as either the plugin is not initialized or was not initialized by the current core\r\n                    return;\r\n                }\r\n                var result;\r\n                var unloadDone = false;\r\n                var theUnloadCtx = unloadCtx || createProcessTelemetryUnloadContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUnloadState = unloadState || {\r\n                    reason: 0 /* TelemetryUnloadReason.ManualTeardown */,\r\n                    isAsync: false\r\n                };\r\n                function _unloadCallback() {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _unloadHandlerContainer.run(theUnloadCtx, unloadState);\r\n                        _hookContainer.run(theUnloadCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */]());\r\n                        if (result === true) {\r\n                            theUnloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUnloadState);\r\n                        }\r\n                        _initDefaults();\r\n                    }\r\n                }\r\n                if (!_self[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */] || _self[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */](theUnloadCtx, theUnloadState, _unloadCallback) !== true) {\r\n                    _unloadCallback();\r\n                }\r\n                else {\r\n                    // Tell the caller that we will be calling processNext()\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function (updateCtx, updateState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self[STR_CORE /* @min:%2ecore */];\r\n                if (!core || (updateCtx && core !== updateCtx[STR_CORE /* @min:%2ecore */]())) {\r\n                    // Do Nothing\r\n                    return;\r\n                }\r\n                var result;\r\n                var updateDone = false;\r\n                var theUpdateCtx = updateCtx || createProcessTelemetryUpdateContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUpdateState = updateState || {\r\n                    reason: 0 /* TelemetryUpdateReason.Unknown */\r\n                };\r\n                function _updateCallback() {\r\n                    if (!updateDone) {\r\n                        updateDone = true;\r\n                        _setDefaults(theUpdateCtx.getCfg(), theUpdateCtx.core(), theUpdateCtx[_DYN_GET_NEXT /* @min:%2egetNext */]());\r\n                    }\r\n                }\r\n                if (!_self._doUpdate || _self._doUpdate(theUpdateCtx, theUpdateState, _updateCallback) !== true) {\r\n                    _updateCallback();\r\n                }\r\n                else {\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            proxyFunctionAs(_self, \"_addUnloadCb\", function () { return _unloadHandlerContainer; }, \"add\");\r\n            proxyFunctionAs(_self, \"_addHook\", function () { return _hookContainer; }, \"add\");\r\n            objDefine(_self, \"_unloadHooks\", { g: function () { return _hookContainer; } });\r\n        });\r\n        // These are added after the dynamicProto so that are not moved to the prototype\r\n        _self[_DYN_DIAG_LOG /* @min:%2ediagLog */] = function (itemCtx) {\r\n            return _getTelCtx(itemCtx)[_DYN_DIAG_LOG /* @min:%2ediagLog */]();\r\n        };\r\n        _self[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = function () {\r\n            return _isinitialized;\r\n        };\r\n        _self.setInitialized = function (isInitialized) {\r\n            _isinitialized = isInitialized;\r\n        };\r\n        // _self.getNextPlugin = () => DO NOT IMPLEMENT\r\n        // Sub-classes of this base class *should* not be relying on this value and instead\r\n        // should use processNext() function. If you require access to the plugin use the\r\n        // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.\r\n        _self[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */] = function (next) {\r\n            _nextPlugin = next;\r\n        };\r\n        _self[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = function (env, itemCtx) {\r\n            if (itemCtx) {\r\n                // Normal core execution sequence\r\n                itemCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](env);\r\n            }\r\n            else if (_nextPlugin && isFunction(_nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */])) {\r\n                // Looks like backward compatibility or out of band processing. And as it looks\r\n                // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry\r\n                _nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, null);\r\n            }\r\n        };\r\n        _self._getTelCtx = _getTelCtx;\r\n        function _getTelCtx(currentCtx) {\r\n            if (currentCtx === void 0) { currentCtx = null; }\r\n            var itemCtx = currentCtx;\r\n            if (!itemCtx) {\r\n                var rootCtx = _rootCtx || createProcessTelemetryContext(null, {}, _self[STR_CORE /* @min:%2ecore */]);\r\n                // tslint:disable-next-line: prefer-conditional-expression\r\n                if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                    // Looks like a chain object\r\n                    itemCtx = rootCtx[_DYN_CREATE_NEW /* @min:%2ecreateNew */](null, _nextPlugin[strGetPlugin]);\r\n                }\r\n                else {\r\n                    itemCtx = rootCtx[_DYN_CREATE_NEW /* @min:%2ecreateNew */](null, _nextPlugin);\r\n                }\r\n            }\r\n            return itemCtx;\r\n        }\r\n        function _setDefaults(config, core, pluginChain) {\r\n            // Make sure the extensionConfig exists and the config is dynamic\r\n            createDynamicConfig(config, defaultValues, safeGetLogger(core));\r\n            if (!pluginChain && core) {\r\n                // Get the first plugin from the core\r\n                pluginChain = core[_DYN_GET_PROCESS_TEL_CONT2 /* @min:%2egetProcessTelContext */]()[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n            }\r\n            var nextPlugin = _nextPlugin;\r\n            if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                // If it looks like a proxy/chain then get the plugin\r\n                nextPlugin = _nextPlugin[strGetPlugin]();\r\n            }\r\n            // Support legacy plugins where core was defined as a property\r\n            _self[STR_CORE /* @min:%2ecore */] = core;\r\n            _rootCtx = createProcessTelemetryContext(pluginChain, config, core, nextPlugin);\r\n        }\r\n        function _initDefaults() {\r\n            _isinitialized = false;\r\n            _self[STR_CORE /* @min:%2ecore */] = null;\r\n            _rootCtx = null;\r\n            _nextPlugin = null;\r\n            _hookContainer = createUnloadHookContainer();\r\n            _unloadHandlerContainer = createUnloadHandlerContainer();\r\n        }\r\n    }\r\n    BaseTelemetryPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Tear down the plugin and remove any hooked value, the plugin should be removed so that it is no longer initialized and\r\n     * therefore could be re-initialized after being torn down. The plugin should ensure that once this has been called any further\r\n     * processTelemetry calls are ignored and it just calls the processNext() with the provided context.\r\n     * @param unloadCtx - This is the context that should be used during unloading.\r\n     * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n     * @returns boolean - true if the plugin has or will call processNext(), this for backward compatibility as previously teardown was synchronous and returned nothing.\r\n     */\r\n    BaseTelemetryPlugin.prototype.teardown = function (unloadCtx, unloadState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    };\r\n    /**\r\n     * The the plugin should re-evaluate configuration and update any cached configuration settings.\r\n     * @param updateCtx - This is the context that should be used during updating.\r\n     * @param updateState - The details / state of the update process, it holds details like the current and previous configuration.\r\n     * @returns boolean - true if the plugin has or will call updateCtx.processNext(), this allows the plugin to perform any asynchronous operations.\r\n     */\r\n    BaseTelemetryPlugin.prototype.update = function (updateCtx, updateState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    BaseTelemetryPlugin.prototype._addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add this hook so that it is automatically removed during unloading\r\n     * @param hooks - The single hook or an array of IInstrumentHook objects\r\n     */\r\n    BaseTelemetryPlugin.prototype._addHook = function (hooks) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return BaseTelemetryPlugin;\r\n}());\r\nexport { BaseTelemetryPlugin };\r\n//# sourceMappingURL=BaseTelemetryPlugin.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_DIAG_LOG, _DYN_PUSH } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nexport function createUnloadHandlerContainer() {\r\n    var handlers = [];\r\n    function _addHandler(handler) {\r\n        if (handler) {\r\n            handlers[_DYN_PUSH /* @min:%2epush */](handler);\r\n        }\r\n    }\r\n    function _runHandlers(unloadCtx, unloadState) {\r\n        arrForEach(handlers, function (handler) {\r\n            try {\r\n                handler(unloadCtx, unloadState);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(unloadCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected error calling unload handler - \" + dumpObj(e));\r\n            }\r\n        });\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add: _addHandler,\r\n        run: _runHandlers\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHandlerContainer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrAppend, arrForEach, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nvar _maxHooks;\r\nvar _hookAddMonitor;\r\n/**\r\n * Test hook for setting the maximum number of unload hooks and calling a monitor function when the hooks are added or removed\r\n * This allows for automatic test failure when the maximum number of unload hooks is exceeded\r\n * @param maxHooks - The maximum number of unload hooks\r\n * @param addMonitor - The monitor function to call when hooks are added or removed\r\n */\r\nexport function _testHookMaxUnloadHooksCb(maxHooks, addMonitor) {\r\n    _maxHooks = maxHooks;\r\n    _hookAddMonitor = addMonitor;\r\n}\r\n/**\r\n * Create a IUnloadHookContainer which can be used to remember unload hook functions to be executed during the component unloading\r\n * process.\r\n * @returns A new IUnloadHookContainer instance\r\n */\r\nexport function createUnloadHookContainer() {\r\n    var _hooks = [];\r\n    function _doUnload(logger) {\r\n        var oldHooks = _hooks;\r\n        _hooks = [];\r\n        // Remove all registered unload hooks\r\n        arrForEach(oldHooks, function (fn) {\r\n            // allow either rm or remove callback function\r\n            try {\r\n                (fn.rm || fn.remove).call(fn);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unloading:\" + dumpObj(e));\r\n            }\r\n        });\r\n        if (_maxHooks && oldHooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n            _hookAddMonitor ? _hookAddMonitor(\"doUnload\", oldHooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n        }\r\n    }\r\n    function _addHook(hooks) {\r\n        if (hooks) {\r\n            arrAppend(_hooks, hooks);\r\n            if (_maxHooks && _hooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n                _hookAddMonitor ? _hookAddMonitor(\"Add\", _hooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        run: _doUnload,\r\n        add: _addHook\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHookContainer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, getDocument, getWindow, isArray, objForEachKey, objKeys } from \"@nevware21/ts-utils\";\r\nimport { _DYN_EVT_NAME, _DYN_LENGTH, _DYN_PUSH, _DYN_REPLACE, _DYN_SPLICE, _DYN_SPLIT, _DYN_TYPE } from \"../__DynamicConstants\";\r\nimport { createElmNodeData, createUniqueNamespace } from \"./DataCacheHelper\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// Added to help with minfication\r\nvar strOnPrefix = \"on\";\r\nvar strAttachEvent = \"attachEvent\";\r\nvar strAddEventHelper = \"addEventListener\";\r\nvar strDetachEvent = \"detachEvent\";\r\nvar strRemoveEventListener = \"removeEventListener\";\r\nvar strEvents = \"events\";\r\nvar strVisibilityChangeEvt = \"visibilitychange\";\r\nvar strPageHide = \"pagehide\";\r\nvar strPageShow = \"pageshow\";\r\nvar strUnload = \"unload\";\r\nvar strBeforeUnload = \"beforeunload\";\r\nvar strPageHideNamespace = createUniqueNamespace(\"aiEvtPageHide\");\r\nvar strPageShowNamespace = createUniqueNamespace(\"aiEvtPageShow\");\r\nvar rRemoveEmptyNs = /\\.[\\.]+/g;\r\nvar rRemoveTrailingEmptyNs = /[\\.]+$/;\r\nvar _guid = 1;\r\nvar elmNodeData = createElmNodeData(\"events\");\r\nvar eventNamespace = /^([^.]*)(?:\\.(.+)|)/;\r\nfunction _normalizeNamespace(name) {\r\n    if (name && name[_DYN_REPLACE /* @min:%2ereplace */]) {\r\n        return name[_DYN_REPLACE /* @min:%2ereplace */](/^[\\s\\.]+|(?=[\\s\\.])[\\.\\s]+$/g, STR_EMPTY);\r\n    }\r\n    return name;\r\n}\r\nfunction _getEvtNamespace(eventName, evtNamespace) {\r\n    if (evtNamespace) {\r\n        var theNamespace_1 = STR_EMPTY;\r\n        if (isArray(evtNamespace)) {\r\n            theNamespace_1 = STR_EMPTY;\r\n            arrForEach(evtNamespace, function (name) {\r\n                name = _normalizeNamespace(name);\r\n                if (name) {\r\n                    if (name[0] !== \".\") {\r\n                        name = \".\" + name;\r\n                    }\r\n                    theNamespace_1 += name;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            theNamespace_1 = _normalizeNamespace(evtNamespace);\r\n        }\r\n        if (theNamespace_1) {\r\n            if (theNamespace_1[0] !== \".\") {\r\n                theNamespace_1 = \".\" + theNamespace_1;\r\n            }\r\n            // We may only have the namespace and not an eventName\r\n            eventName = (eventName || STR_EMPTY) + theNamespace_1;\r\n        }\r\n    }\r\n    var parsedEvent = (eventNamespace.exec(eventName || STR_EMPTY) || []);\r\n    return {\r\n        type: parsedEvent[1],\r\n        ns: ((parsedEvent[2] || STR_EMPTY).replace(rRemoveEmptyNs, \".\").replace(rRemoveTrailingEmptyNs, STR_EMPTY)[_DYN_SPLIT /* @min:%2esplit */](\".\").sort()).join(\".\")\r\n    };\r\n}\r\n/**\r\n * Get all of the registered events on the target object, this is primarily used for testing cleanup but may also be used by\r\n * applications to remove their own events\r\n * @param target - The EventTarget that has registered events\r\n * @param eventName - [Optional] The name of the event to return the registered handlers and full name (with namespaces)\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n */\r\nexport function __getRegisteredEvents(target, eventName, evtNamespace) {\r\n    var theEvents = [];\r\n    var eventCache = elmNodeData.get(target, strEvents, {}, false);\r\n    var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n    objForEachKey(eventCache, function (evtType, registeredEvents) {\r\n        arrForEach(registeredEvents, function (value) {\r\n            if (!evtName[_DYN_TYPE /* @min:%2etype */] || evtName[_DYN_TYPE /* @min:%2etype */] === value[_DYN_EVT_NAME /* @min:%2eevtName */][_DYN_TYPE /* @min:%2etype */]) {\r\n                if (!evtName.ns || evtName.ns === evtName.ns) {\r\n                    theEvents[_DYN_PUSH /* @min:%2epush */]({\r\n                        name: value.evtName[_DYN_TYPE /* @min:%2etype */] + (value[_DYN_EVT_NAME /* @min:%2eevtName */].ns ? \".\" + value[_DYN_EVT_NAME /* @min:%2eevtName */].ns : STR_EMPTY),\r\n                        handler: value.handler\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return theEvents;\r\n}\r\n// Exported for internal unit testing only\r\nfunction _getRegisteredEvents(target, evtName, addDefault) {\r\n    if (addDefault === void 0) { addDefault = true; }\r\n    var aiEvts = elmNodeData.get(target, strEvents, {}, addDefault);\r\n    var registeredEvents = aiEvts[evtName];\r\n    if (!registeredEvents) {\r\n        registeredEvents = aiEvts[evtName] = [];\r\n    }\r\n    return registeredEvents;\r\n}\r\nfunction _doDetach(obj, evtName, handlerRef, useCapture) {\r\n    if (obj && evtName && evtName[_DYN_TYPE /* @min:%2etype */]) {\r\n        if (obj[strRemoveEventListener]) {\r\n            obj[strRemoveEventListener](evtName[_DYN_TYPE /* @min:%2etype */], handlerRef, useCapture);\r\n        }\r\n        else if (obj[strDetachEvent]) {\r\n            obj[strDetachEvent](strOnPrefix + evtName[_DYN_TYPE /* @min:%2etype */], handlerRef);\r\n        }\r\n    }\r\n}\r\nfunction _doAttach(obj, evtName, handlerRef, useCapture) {\r\n    var result = false;\r\n    if (obj && evtName && evtName[_DYN_TYPE /* @min:%2etype */] && handlerRef) {\r\n        if (obj[strAddEventHelper]) {\r\n            // all browsers except IE before version 9\r\n            obj[strAddEventHelper](evtName[_DYN_TYPE /* @min:%2etype */], handlerRef, useCapture);\r\n            result = true;\r\n        }\r\n        else if (obj[strAttachEvent]) {\r\n            // IE before version 9\r\n            obj[strAttachEvent](strOnPrefix + evtName[_DYN_TYPE /* @min:%2etype */], handlerRef);\r\n            result = true;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction _doUnregister(target, events, evtName, unRegFn) {\r\n    var idx = events[_DYN_LENGTH /* @min:%2elength */];\r\n    while (idx--) {\r\n        var theEvent = events[idx];\r\n        if (theEvent) {\r\n            if (!evtName.ns || evtName.ns === theEvent[_DYN_EVT_NAME /* @min:%2eevtName */].ns) {\r\n                if (!unRegFn || unRegFn(theEvent)) {\r\n                    _doDetach(target, theEvent[_DYN_EVT_NAME /* @min:%2eevtName */], theEvent.handler, theEvent.capture);\r\n                    // Remove the registered event\r\n                    events[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _unregisterEvents(target, evtName, unRegFn) {\r\n    if (evtName[_DYN_TYPE /* @min:%2etype */]) {\r\n        _doUnregister(target, _getRegisteredEvents(target, evtName[_DYN_TYPE /* @min:%2etype */]), evtName, unRegFn);\r\n    }\r\n    else {\r\n        var eventCache = elmNodeData.get(target, strEvents, {});\r\n        objForEachKey(eventCache, function (evtType, events) {\r\n            _doUnregister(target, events, evtName, unRegFn);\r\n        });\r\n        // Cleanup\r\n        if (objKeys(eventCache)[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n            elmNodeData.kill(target, strEvents);\r\n        }\r\n    }\r\n}\r\nexport function mergeEvtNamespace(theNamespace, namespaces) {\r\n    var newNamespaces;\r\n    if (namespaces) {\r\n        if (isArray(namespaces)) {\r\n            newNamespaces = [theNamespace].concat(namespaces);\r\n        }\r\n        else {\r\n            newNamespaces = [theNamespace, namespaces];\r\n        }\r\n        // resort the namespaces so they are always in order\r\n        newNamespaces = (_getEvtNamespace(\"xx\", newNamespaces).ns)[_DYN_SPLIT /* @min:%2esplit */](\".\");\r\n    }\r\n    else {\r\n        newNamespaces = theNamespace;\r\n    }\r\n    return newNamespaces;\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj - Object to add the event too.\r\n * @param eventName - String that specifies any of the standard DHTML Events without \"on\" prefix, if may also include an optional (dot \".\" prefixed)\r\n * namespaces \"click\" \"click.mynamespace\" in addition to specific namespaces.\r\n * @param handlerRef - Pointer that specifies the function to call when event fires\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture - [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function eventOn(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    var result = false;\r\n    if (target) {\r\n        try {\r\n            var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n            result = _doAttach(target, evtName, handlerRef, useCapture);\r\n            if (result && elmNodeData.accept(target)) {\r\n                var registeredEvent = {\r\n                    guid: _guid++,\r\n                    evtName: evtName,\r\n                    handler: handlerRef,\r\n                    capture: useCapture\r\n                };\r\n                _getRegisteredEvents(target, evtName.type)[_DYN_PUSH /* @min:%2epush */](registeredEvent);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object - to remove the event from\r\n * @param eventName - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture - [Optional] Defaults to false\r\n */\r\nexport function eventOff(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    if (target) {\r\n        try {\r\n            var evtName_1 = _getEvtNamespace(eventName, evtNamespace);\r\n            var found_1 = false;\r\n            _unregisterEvents(target, evtName_1, function (regEvent) {\r\n                if ((evtName_1.ns && !handlerRef) || regEvent.handler === handlerRef) {\r\n                    found_1 = true;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (!found_1) {\r\n                // fallback to try and remove as requested\r\n                _doDetach(target, evtName_1, handlerRef, useCapture);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj - Object to add the event too.\r\n * @param eventNameWithoutOn - String that specifies any of the standard DHTML Events without \"on\" prefix and optional (dot \".\" prefixed) namespaces \"click\" \"click.mynamespace\".\r\n * @param handlerRef - Pointer that specifies the function to call when event fires\r\n * @param useCapture - [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    return eventOn(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object - to remove the event from\r\n * @param eventNameWithoutOn  - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param useCapture - [Optional] Defaults to false\r\n */\r\nexport function detachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    eventOff(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Trys to add an event handler for the specified event to the window, body and document\r\n * @param eventName  - The name of the event\r\n * @param callback  - The callback function that needs to be executed for the given event\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns - true if the handler was successfully added\r\n */\r\nexport function addEventHandler(eventName, callback, evtNamespace) {\r\n    var result = false;\r\n    var w = getWindow();\r\n    if (w) {\r\n        result = eventOn(w, eventName, callback, evtNamespace);\r\n        result = eventOn(w[\"body\"], eventName, callback, evtNamespace) || result;\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        result = eventOn(doc, eventName, callback, evtNamespace) || result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Trys to remove event handler(s) for the specified event/namespace to the window, body and document\r\n * @param eventName - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param callback - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventHandler(eventName, callback, evtNamespace) {\r\n    var w = getWindow();\r\n    if (w) {\r\n        eventOff(w, eventName, callback, evtNamespace);\r\n        eventOff(w[\"body\"], eventName, callback, evtNamespace);\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        eventOff(doc, eventName, callback, evtNamespace);\r\n    }\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nfunction _addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && events[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {\r\n                    added = addEventHandler(name, listener, evtNamespace) || added;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && isArray(events)) {\r\n        added = _addEventListeners(events, listener, excludeEvents, evtNamespace);\r\n        if (!added && excludeEvents && excludeEvents[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            // Failed to add any listeners and we excluded some, so just attempt to add the excluded events\r\n            added = _addEventListeners(events, listener, null, evtNamespace);\r\n        }\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Remove the listener from the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventListeners(events, listener, evtNamespace) {\r\n    if (events && isArray(events)) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                removeEventHandler(name, listener, evtNamespace);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Listen to the 'beforeunload', 'unload' and 'pagehide' events which indicates a page unload is occurring,\r\n * this does NOT listen to the 'visibilitychange' event as while it does indicate that the page is being hidden\r\n * it does not *necessarily* mean that the page is being completely unloaded, it can mean that the user is\r\n * just navigating to a different Tab and may come back (without unloading the page). As such you may also\r\n * need to listen to the 'addPageHideEventListener' and 'addPageShowEventListener' events.\r\n * @param listener - The event callback to call when a page unload event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked, unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageUnloadEventListener(listener, excludeEvents, evtNamespace) {\r\n    // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n    // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n    return addEventListeners([strBeforeUnload, strUnload, strPageHide], listener, excludeEvents, evtNamespace);\r\n}\r\n/**\r\n * Remove any matching 'beforeunload', 'unload' and 'pagehide' events that may have been added via addEventListener,\r\n * addEventListeners, addPageUnloadEventListener or addPageHideEventListener.\r\n * @param listener - The specific event callback to to be removed\r\n * @param evtNamespace - [Optional] Namespace(s) uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function removePageUnloadEventListener(listener, evtNamespace) {\r\n    removeEventListeners([strBeforeUnload, strUnload, strPageHide], listener, evtNamespace);\r\n}\r\n/**\r\n * Listen to the pagehide and visibility changing to 'hidden' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page hide event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] A Namespace to append to the event listeners so they can be uniquely identified and removed\r\n * based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageHideEventListener\" can remove these events.\r\n * Suggestion: pass as true if you are also calling addPageUnloadEventListener as that also hooks pagehide\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageHideEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"hidden\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    var pageUnloadAdded = _addEventListeners([strPageHide], listener, excludeEvents, newNamespaces);\r\n    if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {\r\n        pageUnloadAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageUnloadAdded;\r\n    }\r\n    if (!pageUnloadAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageUnloadAdded = addPageHideEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageUnloadAdded;\r\n}\r\n/**\r\n * Removes the pageHide event listeners added by addPageHideEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageHideEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageHideEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    removeEventListeners([strPageHide], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n/**\r\n * Listen to the pageshow and visibility changing to 'visible' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page is show event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional/Recommended] A Namespace to append to the event listeners so they can be uniquely\r\n * identified and removed based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageShowEventListener\" can remove these events.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageShowEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"visible\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    var pageShowAdded = _addEventListeners([strPageShow], listener, excludeEvents, newNamespaces);\r\n    pageShowAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageShowAdded;\r\n    if (!pageShowAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageShowAdded = addPageShowEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageShowAdded;\r\n}\r\n/**\r\n * Removes the pageShow event listeners added by addPageShowEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageShowEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageShowEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    removeEventListeners([strPageShow], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n//# sourceMappingURL=EventHelpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strShimFunction, strShimPrototype } from \"@microsoft/applicationinsights-shims\";\r\nimport { getInst, objHasOwnProperty } from \"@nevware21/ts-utils\";\r\nimport { _DYN_APPLY, _DYN_LENGTH, _DYN_PUSH, _DYN_SPLICE } from \"../__DynamicConstants\";\r\nimport { _getObjProto } from \"./HelperFuncs\";\r\nvar aiInstrumentHooks = \"_aiHooks\";\r\nvar cbNames = [\r\n    \"req\", \"rsp\", \"hkErr\", \"fnErr\"\r\n];\r\n/** @ignore */\r\nfunction _arrLoop(arr, fn) {\r\n    if (arr) {\r\n        for (var lp = 0; lp < arr[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n            if (fn(arr[lp], lp)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @ignore */\r\nfunction _doCallbacks(hooks, callDetails, cbArgs, hookCtx, type) {\r\n    if (type >= 0 /* CallbackType.Request */ && type <= 2 /* CallbackType.HookError */) {\r\n        _arrLoop(hooks, function (hook, idx) {\r\n            var cbks = hook.cbks;\r\n            var cb = cbks[cbNames[type]];\r\n            if (cb) {\r\n                // Set the specific hook context implementation using a lazy creation pattern\r\n                callDetails.ctx = function () {\r\n                    var ctx = hookCtx[idx] = (hookCtx[idx] || {});\r\n                    return ctx;\r\n                };\r\n                try {\r\n                    cb[_DYN_APPLY /* @min:%2eapply */](callDetails.inst, cbArgs);\r\n                }\r\n                catch (err) {\r\n                    var orgEx = callDetails.err;\r\n                    try {\r\n                        // Report Hook error via the callback\r\n                        var hookErrorCb = cbks[cbNames[2 /* CallbackType.HookError */]];\r\n                        if (hookErrorCb) {\r\n                            callDetails.err = err;\r\n                            hookErrorCb[_DYN_APPLY /* @min:%2eapply */](callDetails.inst, cbArgs);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // Not much we can do here -- swallowing the exception to avoid crashing the hosting app\r\n                    }\r\n                    finally {\r\n                        // restore the original exception (if any)\r\n                        callDetails.err = orgEx;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n/** @ignore */\r\nfunction _createFunctionHook(aiHook) {\r\n    // Define a temporary method that queues-up a the real method call\r\n    return function () {\r\n        var funcThis = this;\r\n        // Capture the original arguments passed to the method\r\n        var orgArgs = arguments;\r\n        var hooks = aiHook.h;\r\n        var funcArgs = {\r\n            name: aiHook.n,\r\n            inst: funcThis,\r\n            ctx: null,\r\n            set: _replaceArg\r\n        };\r\n        var hookCtx = [];\r\n        var cbArgs = _createArgs([funcArgs], orgArgs);\r\n        funcArgs.evt = getInst(\"event\");\r\n        function _createArgs(target, theArgs) {\r\n            _arrLoop(theArgs, function (arg) {\r\n                target[_DYN_PUSH /* @min:%2epush */](arg);\r\n            });\r\n            return target;\r\n        }\r\n        function _replaceArg(idx, value) {\r\n            orgArgs = _createArgs([], orgArgs);\r\n            orgArgs[idx] = value;\r\n            cbArgs = _createArgs([funcArgs], orgArgs);\r\n        }\r\n        // Call the pre-request hooks\r\n        _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 0 /* CallbackType.Request */);\r\n        // Call the original function was called\r\n        var theFunc = aiHook.f;\r\n        if (theFunc) {\r\n            try {\r\n                funcArgs.rslt = theFunc[_DYN_APPLY /* @min:%2eapply */](funcThis, orgArgs);\r\n            }\r\n            catch (err) {\r\n                // Report the request callback\r\n                funcArgs.err = err;\r\n                _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 3 /* CallbackType.FunctionError */);\r\n                // rethrow the original exception so anyone listening for it can catch the exception\r\n                throw err;\r\n            }\r\n        }\r\n        // Call the post-request hooks\r\n        _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 1 /* CallbackType.Response */);\r\n        return funcArgs.rslt;\r\n    };\r\n}\r\n/** @ignore */\r\nfunction _getOwner(target, name, checkPrototype, checkParentProto) {\r\n    var owner = null;\r\n    if (target) {\r\n        if (objHasOwnProperty(target, name)) {\r\n            owner = target;\r\n        }\r\n        else if (checkPrototype) {\r\n            owner = _getOwner(_getObjProto(target), name, checkParentProto, false);\r\n        }\r\n    }\r\n    return owner;\r\n}\r\n/**\r\n * Intercept the named prototype functions for the target class / object\r\n * @param target - The target object\r\n * @param funcName - The function name\r\n * @param callbacks - The callbacks to configure and call whenever the function is called\r\n */\r\nexport function InstrumentProto(target, funcName, callbacks) {\r\n    if (target) {\r\n        return InstrumentFunc(target[strShimPrototype], funcName, callbacks, false);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Intercept the named prototype functions for the target class / object\r\n * @param target - The target object\r\n * @param funcNames - The function names to intercept and call\r\n * @param callbacks - The callbacks to configure and call whenever the function is called\r\n */\r\nexport function InstrumentProtos(target, funcNames, callbacks) {\r\n    if (target) {\r\n        return InstrumentFuncs(target[strShimPrototype], funcNames, callbacks, false);\r\n    }\r\n    return null;\r\n}\r\nfunction _createInstrumentHook(owner, funcName, fn, callbacks) {\r\n    var aiHook = fn && fn[aiInstrumentHooks];\r\n    if (!aiHook) {\r\n        // Only hook the function once\r\n        aiHook = {\r\n            i: 0,\r\n            n: funcName,\r\n            f: fn,\r\n            h: []\r\n        };\r\n        // Override (hook) the original function\r\n        var newFunc = _createFunctionHook(aiHook);\r\n        newFunc[aiInstrumentHooks] = aiHook; // Tag and store the function hooks\r\n        owner[funcName] = newFunc;\r\n    }\r\n    var theHook = {\r\n        // tslint:disable:object-literal-shorthand\r\n        id: aiHook.i,\r\n        cbks: callbacks,\r\n        rm: function () {\r\n            // DO NOT Use () => { shorthand for the function as the this gets replaced\r\n            // with the outer this and not the this for theHook instance.\r\n            var id = this.id;\r\n            _arrLoop(aiHook.h, function (hook, idx) {\r\n                if (hook.id === id) {\r\n                    aiHook.h[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                    return 1;\r\n                }\r\n            });\r\n        }\r\n        // tslint:enable:object-literal-shorthand\r\n    };\r\n    aiHook.i++;\r\n    aiHook.h[_DYN_PUSH /* @min:%2epush */](theHook);\r\n    return theHook;\r\n}\r\n/**\r\n * Intercept the named prototype functions for the target class / object\r\n * @param target - The target object\r\n * @param funcName - The function name\r\n * @param callbacks - The callbacks to configure and call whenever the function is called\r\n * @param checkPrototype - If the function doesn't exist on the target should it attempt to hook the prototype function\r\n * @param checkParentProto - If the function doesn't exist on the target or it's prototype should it attempt to hook the parent's prototype\r\n */\r\nexport function InstrumentFunc(target, funcName, callbacks, checkPrototype, checkParentProto) {\r\n    if (checkPrototype === void 0) { checkPrototype = true; }\r\n    if (target && funcName && callbacks) {\r\n        var owner = _getOwner(target, funcName, checkPrototype, checkParentProto);\r\n        if (owner) {\r\n            var fn = owner[funcName];\r\n            if (typeof fn === strShimFunction) {\r\n                return _createInstrumentHook(owner, funcName, fn, callbacks);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Intercept the named functions for the target class / object\r\n * @param target - The target object\r\n * @param funcNames - The function names to intercept and call\r\n * @param callbacks - The callbacks to configure and call whenever the function is called\r\n * @param checkPrototype - If the function doesn't exist on the target should it attempt to hook the prototype function\r\n * @param checkParentProto - If the function doesn't exist on the target or it's prototype should it attempt to hook the parent's prototype\r\n */\r\nexport function InstrumentFuncs(target, funcNames, callbacks, checkPrototype, checkParentProto) {\r\n    if (checkPrototype === void 0) { checkPrototype = true; }\r\n    var hooks = null;\r\n    _arrLoop(funcNames, function (funcName) {\r\n        var hook = InstrumentFunc(target, funcName, callbacks, checkPrototype, checkParentProto);\r\n        if (hook) {\r\n            if (!hooks) {\r\n                hooks = [];\r\n            }\r\n            hooks[_DYN_PUSH /* @min:%2epush */](hook);\r\n        }\r\n    });\r\n    return hooks;\r\n}\r\n/**\r\n * Add an instrumentation hook to the provided named \"event\" for the target class / object, this doesn't check whether the\r\n * named \"event\" is in fact a function and just assigns the instrumentation hook to the target[evtName]\r\n * @param target - The target object\r\n * @param evtName - The name of the event\r\n * @param callbacks - The callbacks to configure and call whenever the function is called\r\n * @param checkPrototype - If the function doesn't exist on the target should it attempt to hook the prototype function\r\n * @param checkParentProto - If the function doesn't exist on the target or it's prototype should it attempt to hook the parent's prototype\r\n */\r\nexport function InstrumentEvent(target, evtName, callbacks, checkPrototype, checkParentProto) {\r\n    if (target && evtName && callbacks) {\r\n        var owner = _getOwner(target, evtName, checkPrototype, checkParentProto) || target;\r\n        if (owner) {\r\n            return _createInstrumentHook(owner, evtName, owner[evtName], callbacks);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=InstrumentHooks.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * This is an internal property used to cause internal (reporting) requests to be ignored from reporting\r\n * additional telemetry, to handle polyfil implementations ALL urls used with a disabled request will\r\n * also be ignored for future requests even when this property is not provided.\r\n * Tagging as Ignore as this is an internal value and is not expected to be used outside of the SDK\r\n * @ignore\r\n */\r\nexport var DisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nexport var SampleRate = \"sampleRate\";\r\nexport var ProcessLegacy = \"ProcessLegacy\";\r\nexport var HttpMethod = \"http.method\";\r\nexport var DEFAULT_BREEZE_ENDPOINT = \"https://dc.services.visualstudio.com\";\r\nexport var DEFAULT_BREEZE_PATH = \"/v2/track\";\r\nexport var strNotSpecified = \"not_specified\";\r\nexport var strIkey = \"iKey\";\r\n//# sourceMappingURL=Constants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES5 which can result in a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_SPLIT = \"split\"; // Count: 6\r\nexport var _DYN_LENGTH = \"length\"; // Count: 46\r\nexport var _DYN_TO_LOWER_CASE = \"toLowerCase\"; // Count: 6\r\nexport var _DYN_INGESTIONENDPOINT = \"ingestionendpoint\"; // Count: 6\r\nexport var _DYN_TO_STRING = \"toString\"; // Count: 8\r\nexport var _DYN_REMOVE_ITEM = \"removeItem\"; // Count: 3\r\nexport var _DYN_MESSAGE = \"message\"; // Count: 5\r\nexport var _DYN_COUNT = \"count\"; // Count: 6\r\nexport var _DYN_PRE_TRIGGER_DATE = \"preTriggerDate\"; // Count: 4\r\nexport var _DYN_GET_UTCDATE = \"getUTCDate\"; // Count: 3\r\nexport var _DYN_STRINGIFY = \"stringify\"; // Count: 4\r\nexport var _DYN_PATHNAME = \"pathname\"; // Count: 4\r\nexport var _DYN_MATCH = \"match\"; // Count: 5\r\nexport var _DYN_CORRELATION_HEADER_E0 = \"correlationHeaderExcludePatterns\"; // Count: 2\r\nexport var _DYN_NAME = \"name\"; // Count: 10\r\nexport var _DYN_EXTENSION_CONFIG = \"extensionConfig\"; // Count: 4\r\nexport var _DYN_PROPERTIES = \"properties\"; // Count: 10\r\nexport var _DYN_MEASUREMENTS = \"measurements\"; // Count: 9\r\nexport var _DYN_SIZE_IN_BYTES = \"sizeInBytes\"; // Count: 4\r\nexport var _DYN_TYPE_NAME = \"typeName\"; // Count: 5\r\nexport var _DYN_EXCEPTIONS = \"exceptions\"; // Count: 5\r\nexport var _DYN_SEVERITY_LEVEL = \"severityLevel\"; // Count: 5\r\nexport var _DYN_PROBLEM_GROUP = \"problemGroup\"; // Count: 3\r\nexport var _DYN_PARSED_STACK = \"parsedStack\"; // Count: 6\r\nexport var _DYN_HAS_FULL_STACK = \"hasFullStack\"; // Count: 5\r\nexport var _DYN_ASSEMBLY = \"assembly\"; // Count: 4\r\nexport var _DYN_FILE_NAME = \"fileName\"; // Count: 9\r\nexport var _DYN_LINE = \"line\"; // Count: 6\r\nexport var _DYN_AI_DATA_CONTRACT = \"aiDataContract\"; // Count: 4\r\nexport var _DYN_DURATION = \"duration\"; // Count: 4\r\n//# sourceMappingURL=__DynamicConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _throwInternal, getJSON, hasJSON, isObject, objForEachKey, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { asString, strSubstr, strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_STRINGIFY, _DYN_TO_STRING } from \"../../__DynamicConstants\";\r\nexport function dataSanitizeKeyAndAddUniqueness(logger, key, map) {\r\n    var origLength = key[_DYN_LENGTH /* @min:%2elength */];\r\n    var field = dataSanitizeKey(logger, key);\r\n    // validation truncated the length.  We need to add uniqueness\r\n    if (field[_DYN_LENGTH /* @min:%2elength */] !== origLength) {\r\n        var i = 0;\r\n        var uniqueField = field;\r\n        while (map[uniqueField] !== undefined) {\r\n            i++;\r\n            uniqueField = strSubstring(field, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ - 3) + dsPadNumber(i);\r\n        }\r\n        field = uniqueField;\r\n    }\r\n    return field;\r\n}\r\nexport function dataSanitizeKey(logger, name) {\r\n    var nameTrunc;\r\n    if (name) {\r\n        // Remove any leading or trailing whitespace\r\n        name = strTrim(asString(name));\r\n        // truncate the string to 150 chars\r\n        if (name[_DYN_LENGTH /* @min:%2elength */] > 150 /* DataSanitizerValues.MAX_NAME_LENGTH */) {\r\n            nameTrunc = strSubstring(name, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 57 /* _eInternalMessageId.NameTooLong */, \"name is too long.  It has been truncated to \" + 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ + \" characters.\", { name: name }, true);\r\n        }\r\n    }\r\n    return nameTrunc || name;\r\n}\r\nexport function dataSanitizeString(logger, value, maxLength) {\r\n    if (maxLength === void 0) { maxLength = 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */; }\r\n    var valueTrunc;\r\n    if (value) {\r\n        maxLength = maxLength ? maxLength : 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */; // in case default parameters dont work\r\n        value = strTrim(asString(value));\r\n        if (value[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\r\n            valueTrunc = strSubstring(value, 0, maxLength);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 61 /* _eInternalMessageId.StringValueTooLong */, \"string value is too long. It has been truncated to \" + maxLength + \" characters.\", { value: value }, true);\r\n        }\r\n    }\r\n    return valueTrunc || value;\r\n}\r\nexport function dataSanitizeUrl(logger, url) {\r\n    return dataSanitizeInput(logger, url, 2048 /* DataSanitizerValues.MAX_URL_LENGTH */, 66 /* _eInternalMessageId.UrlTooLong */);\r\n}\r\nexport function dataSanitizeMessage(logger, message) {\r\n    var messageTrunc;\r\n    if (message) {\r\n        if (message[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */) {\r\n            messageTrunc = strSubstring(message, 0, 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 56 /* _eInternalMessageId.MessageTruncated */, \"message is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */ + \" characters.\", { message: message }, true);\r\n        }\r\n    }\r\n    return messageTrunc || message;\r\n}\r\nexport function dataSanitizeException(logger, exception) {\r\n    var exceptionTrunc;\r\n    if (exception) {\r\n        // Make surte its a string\r\n        var value = \"\" + exception;\r\n        if (value[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */) {\r\n            exceptionTrunc = strSubstring(value, 0, 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 52 /* _eInternalMessageId.ExceptionTruncated */, \"exception is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */ + \" characters.\", { exception: exception }, true);\r\n        }\r\n    }\r\n    return exceptionTrunc || exception;\r\n}\r\nexport function dataSanitizeProperties(logger, properties) {\r\n    if (properties) {\r\n        var tempProps_1 = {};\r\n        objForEachKey(properties, function (prop, value) {\r\n            if (isObject(value) && hasJSON()) {\r\n                // Stringify any part C properties\r\n                try {\r\n                    value = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 49 /* _eInternalMessageId.CannotSerializeObjectNonSerializable */, \"custom property is not valid\", { exception: e }, true);\r\n                }\r\n            }\r\n            value = dataSanitizeString(logger, value, 8192 /* DataSanitizerValues.MAX_PROPERTY_LENGTH */);\r\n            prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1);\r\n            tempProps_1[prop] = value;\r\n        });\r\n        properties = tempProps_1;\r\n    }\r\n    return properties;\r\n}\r\nexport function dataSanitizeMeasurements(logger, measurements) {\r\n    if (measurements) {\r\n        var tempMeasurements_1 = {};\r\n        objForEachKey(measurements, function (measure, value) {\r\n            measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1);\r\n            tempMeasurements_1[measure] = value;\r\n        });\r\n        measurements = tempMeasurements_1;\r\n    }\r\n    return measurements;\r\n}\r\nexport function dataSanitizeId(logger, id) {\r\n    return id ? dataSanitizeInput(logger, id, 128 /* DataSanitizerValues.MAX_ID_LENGTH */, 69 /* _eInternalMessageId.IdTooLong */)[_DYN_TO_STRING /* @min:%2etoString */]() : id;\r\n}\r\nexport function dataSanitizeInput(logger, input, maxLength, _msgId) {\r\n    var inputTrunc;\r\n    if (input) {\r\n        input = strTrim(asString(input));\r\n        if (input[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\r\n            inputTrunc = strSubstring(input, 0, maxLength);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, _msgId, \"input is too long, it has been truncated to \" + maxLength + \" characters.\", { data: input }, true);\r\n        }\r\n    }\r\n    return inputTrunc || input;\r\n}\r\nexport function dsPadNumber(num) {\r\n    var s = \"00\" + num;\r\n    return strSubstr(s, s[_DYN_LENGTH /* @min:%2elength */] - 3);\r\n}\r\n//# sourceMappingURL=DataSanitizer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { getDocument, isString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_LENGTH, _DYN_MATCH, _DYN_PATHNAME, _DYN_TO_LOWER_CASE } from \"./__DynamicConstants\";\r\nvar _document = getDocument() || {};\r\nvar _htmlAnchorIdx = 0;\r\n// Use an array of temporary values as it's possible for multiple calls to parseUrl() will be called with different URLs\r\n// Using a cache size of 5 for now as it current depth usage is at least 2, so adding a minor buffer to handle future updates\r\nvar _htmlAnchorElement = [null, null, null, null, null];\r\nexport function urlParseUrl(url) {\r\n    var anchorIdx = _htmlAnchorIdx;\r\n    var anchorCache = _htmlAnchorElement;\r\n    var tempAnchor = anchorCache[anchorIdx];\r\n    if (!_document.createElement) {\r\n        // Always create the temp instance if createElement is not available\r\n        tempAnchor = { host: urlParseHost(url, true) };\r\n    }\r\n    else if (!anchorCache[anchorIdx]) {\r\n        // Create and cache the unattached anchor instance\r\n        tempAnchor = anchorCache[anchorIdx] = _document.createElement(\"a\");\r\n    }\r\n    tempAnchor.href = url;\r\n    // Move the cache index forward\r\n    anchorIdx++;\r\n    if (anchorIdx >= anchorCache[_DYN_LENGTH /* @min:%2elength */]) {\r\n        anchorIdx = 0;\r\n    }\r\n    _htmlAnchorIdx = anchorIdx;\r\n    return tempAnchor;\r\n}\r\nexport function urlGetAbsoluteUrl(url) {\r\n    var result;\r\n    var a = urlParseUrl(url);\r\n    if (a) {\r\n        result = a.href;\r\n    }\r\n    return result;\r\n}\r\nexport function urlGetPathName(url) {\r\n    var result;\r\n    var a = urlParseUrl(url);\r\n    if (a) {\r\n        result = a[_DYN_PATHNAME /* @min:%2epathname */];\r\n    }\r\n    return result;\r\n}\r\nexport function urlGetCompleteUrl(method, absoluteUrl) {\r\n    if (method) {\r\n        return method.toUpperCase() + \" \" + absoluteUrl;\r\n    }\r\n    return absoluteUrl;\r\n}\r\n// Fallback method to grab host from url if document.createElement method is not available\r\nexport function urlParseHost(url, inclPort) {\r\n    var fullHost = urlParseFullHost(url, inclPort) || \"\";\r\n    if (fullHost) {\r\n        var match = fullHost[_DYN_MATCH /* @min:%2ematch */](/(www\\d{0,5}\\.)?([^\\/:]{1,256})(:\\d{1,20})?/i);\r\n        if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 3 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            return match[2] + (match[3] || \"\");\r\n        }\r\n    }\r\n    return fullHost;\r\n}\r\nexport function urlParseFullHost(url, inclPort) {\r\n    var result = null;\r\n    if (url) {\r\n        var match = url[_DYN_MATCH /* @min:%2ematch */](/(\\w{1,150}):\\/\\/([^\\/:]{1,256})(:\\d{1,20})?/i);\r\n        if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 2 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            result = match[2] || \"\";\r\n            if (inclPort && match[_DYN_LENGTH /* @min:%2elength */] > 2) {\r\n                var protocol = (match[1] || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                var port = match[3] || \"\";\r\n                // IE includes the standard port so pass it off if it's the same as the protocol\r\n                if (protocol === \"http\" && port === \":80\") {\r\n                    port = \"\";\r\n                }\r\n                else if (protocol === \"https\" && port === \":443\") {\r\n                    port = \"\";\r\n                }\r\n                result += port;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=UrlHelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, dateNow, getPerformance, isNullOrUndefined, isValidSpanId, isValidTraceId } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH } from \"./Constants\";\r\nimport { RequestHeaders } from \"./RequestResponseHeaders\";\r\nimport { dataSanitizeString } from \"./Telemetry/Common/DataSanitizer\";\r\nimport { urlParseFullHost, urlParseUrl } from \"./UrlHelperFuncs\";\r\nimport { _DYN_CORRELATION_HEADER_E0, _DYN_LENGTH, _DYN_NAME, _DYN_PATHNAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE } from \"./__DynamicConstants\";\r\n// listing only non-geo specific locations\r\nvar _internalEndpoints = [\r\n    DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH,\r\n    \"https://breeze.aimon.applicationinsights.io\" + DEFAULT_BREEZE_PATH,\r\n    \"https://dc-int.services.visualstudio.com\" + DEFAULT_BREEZE_PATH\r\n];\r\nvar _correlationIdPrefix = \"cid-v1:\";\r\nexport function isInternalApplicationInsightsEndpoint(endpointUrl) {\r\n    return arrIndexOf(_internalEndpoints, endpointUrl[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) !== -1;\r\n}\r\nexport function correlationIdSetPrefix(prefix) {\r\n    _correlationIdPrefix = prefix;\r\n}\r\nexport function correlationIdGetPrefix() {\r\n    return _correlationIdPrefix;\r\n}\r\n/**\r\n * Checks if a request url is not on a excluded domain list and if it is safe to add correlation headers.\r\n * Headers are always included if the current domain matches the request domain. If they do not match (CORS),\r\n * they are regex-ed across correlationHeaderDomains and correlationHeaderExcludedDomains to determine if headers are included.\r\n * Some environments don't give information on currentHost via window.location.host (e.g. Cordova). In these cases, the user must\r\n * manually supply domains to include correlation headers on. Else, no headers will be included at all.\r\n */\r\nexport function correlationIdCanIncludeCorrelationHeader(config, requestUrl, currentHost) {\r\n    if (!requestUrl || (config && config.disableCorrelationHeaders)) {\r\n        return false;\r\n    }\r\n    if (config && config[_DYN_CORRELATION_HEADER_E0 /* @min:%2ecorrelationHeaderExcludePatterns */]) {\r\n        for (var i = 0; i < config.correlationHeaderExcludePatterns[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            if (config[_DYN_CORRELATION_HEADER_E0 /* @min:%2ecorrelationHeaderExcludePatterns */][i].test(requestUrl)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    var requestHost = urlParseUrl(requestUrl).host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    if (requestHost && (strIndexOf(requestHost, \":443\") !== -1 || strIndexOf(requestHost, \":80\") !== -1)) {\r\n        // [Bug #1260] IE can include the port even for http and https URLs so if present\r\n        // try and parse it to remove if it matches the default protocol port\r\n        requestHost = (urlParseFullHost(requestUrl, true) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    }\r\n    if ((!config || !config.enableCorsCorrelation) && (requestHost && requestHost !== currentHost)) {\r\n        return false;\r\n    }\r\n    var includedDomains = config && config.correlationHeaderDomains;\r\n    if (includedDomains) {\r\n        var matchExists_1;\r\n        arrForEach(includedDomains, function (domain) {\r\n            var regex = new RegExp(domain.toLowerCase().replace(/\\\\/g, \"\\\\\\\\\").replace(/\\./g, \"\\\\.\").replace(/\\*/g, \".*\"));\r\n            matchExists_1 = matchExists_1 || regex.test(requestHost);\r\n        });\r\n        if (!matchExists_1) {\r\n            return false;\r\n        }\r\n    }\r\n    var excludedDomains = config && config.correlationHeaderExcludedDomains;\r\n    if (!excludedDomains || excludedDomains[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n        return true;\r\n    }\r\n    for (var i = 0; i < excludedDomains[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n        var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\\\/g, \"\\\\\\\\\").replace(/\\./g, \"\\\\.\").replace(/\\*/g, \".*\"));\r\n        if (regex.test(requestHost)) {\r\n            return false;\r\n        }\r\n    }\r\n    // if we don't know anything about the requestHost, require the user to use included/excludedDomains.\r\n    // Previously we always returned false for a falsy requestHost\r\n    return requestHost && requestHost[_DYN_LENGTH /* @min:%2elength */] > 0;\r\n}\r\n/**\r\n * Combines target appId and target role name from response header.\r\n */\r\nexport function correlationIdGetCorrelationContext(responseHeader) {\r\n    if (responseHeader) {\r\n        var correlationId = correlationIdGetCorrelationContextValue(responseHeader, RequestHeaders[1 /* eRequestHeaders.requestContextTargetKey */]);\r\n        if (correlationId && correlationId !== _correlationIdPrefix) {\r\n            return correlationId;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Gets key from correlation response header\r\n */\r\nexport function correlationIdGetCorrelationContextValue(responseHeader, key) {\r\n    if (responseHeader) {\r\n        var keyValues = responseHeader[_DYN_SPLIT /* @min:%2esplit */](\",\");\r\n        for (var i = 0; i < keyValues[_DYN_LENGTH /* @min:%2elength */]; ++i) {\r\n            var keyValue = keyValues[i][_DYN_SPLIT /* @min:%2esplit */](\"=\");\r\n            if (keyValue[_DYN_LENGTH /* @min:%2elength */] === 2 && keyValue[0] === key) {\r\n                return keyValue[1];\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function AjaxHelperParseDependencyPath(logger, absoluteUrl, method, commandName) {\r\n    var target, name = commandName, data = commandName;\r\n    if (absoluteUrl && absoluteUrl[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        var parsedUrl = urlParseUrl(absoluteUrl);\r\n        target = parsedUrl.host;\r\n        if (!name) {\r\n            if (parsedUrl[_DYN_PATHNAME /* @min:%2epathname */] != null) {\r\n                var pathName = (parsedUrl.pathname[_DYN_LENGTH /* @min:%2elength */] === 0) ? \"/\" : parsedUrl[_DYN_PATHNAME /* @min:%2epathname */];\r\n                if (pathName.charAt(0) !== \"/\") {\r\n                    pathName = \"/\" + pathName;\r\n                }\r\n                data = parsedUrl[_DYN_PATHNAME /* @min:%2epathname */];\r\n                name = dataSanitizeString(logger, method ? method + \" \" + pathName : pathName);\r\n            }\r\n            else {\r\n                name = dataSanitizeString(logger, absoluteUrl);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        target = commandName;\r\n        name = commandName;\r\n    }\r\n    return {\r\n        target: target,\r\n        name: name,\r\n        data: data\r\n    };\r\n}\r\nexport function dateTimeUtilsNow() {\r\n    // returns the window or webworker performance object\r\n    var perf = getPerformance();\r\n    if (perf && perf.now && perf.timing) {\r\n        var now = perf.now() + perf.timing.navigationStart;\r\n        // Known issue with IE where this calculation can be negative, so if it is then ignore and fallback\r\n        if (now > 0) {\r\n            return now;\r\n        }\r\n    }\r\n    return dateNow();\r\n}\r\nexport function dateTimeUtilsDuration(start, end) {\r\n    var result = null;\r\n    if (start !== 0 && end !== 0 && !isNullOrUndefined(start) && !isNullOrUndefined(end)) {\r\n        result = end - start;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Creates a IDistributedTraceContext from an optional telemetryTrace\r\n * @param telemetryTrace - The telemetryTrace instance that is being wrapped\r\n * @param parentCtx - An optional parent distributed trace instance, almost always undefined as this scenario is only used in the case of multiple property handlers.\r\n * @returns A new IDistributedTraceContext instance that is backed by the telemetryTrace or temporary object\r\n */\r\nexport function createDistributedTraceContextFromTrace(telemetryTrace, parentCtx) {\r\n    var trace = telemetryTrace || {};\r\n    return {\r\n        getName: function () {\r\n            return trace[_DYN_NAME /* @min:%2ename */];\r\n        },\r\n        setName: function (newValue) {\r\n            parentCtx && parentCtx.setName(newValue);\r\n            trace[_DYN_NAME /* @min:%2ename */] = newValue;\r\n        },\r\n        getTraceId: function () {\r\n            return trace.traceID;\r\n        },\r\n        setTraceId: function (newValue) {\r\n            parentCtx && parentCtx.setTraceId(newValue);\r\n            if (isValidTraceId(newValue)) {\r\n                trace.traceID = newValue;\r\n            }\r\n        },\r\n        getSpanId: function () {\r\n            return trace.parentID;\r\n        },\r\n        setSpanId: function (newValue) {\r\n            parentCtx && parentCtx.setSpanId(newValue);\r\n            if (isValidSpanId(newValue)) {\r\n                trace.parentID = newValue;\r\n            }\r\n        },\r\n        getTraceFlags: function () {\r\n            return trace.traceFlags;\r\n        },\r\n        setTraceFlags: function (newTraceFlags) {\r\n            parentCtx && parentCtx.setTraceFlags(newTraceFlags);\r\n            trace.traceFlags = newTraceFlags;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=Util.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { createEnumStyle } from \"@microsoft/applicationinsights-core-js\";\r\nexport var StorageType = createEnumStyle({\r\n    LocalStorage: 0 /* eStorageType.LocalStorage */,\r\n    SessionStorage: 1 /* eStorageType.SessionStorage */\r\n});\r\nexport var DistributedTracingModes = createEnumStyle({\r\n    AI: 0 /* eDistributedTracingModes.AI */,\r\n    AI_AND_W3C: 1 /* eDistributedTracingModes.AI_AND_W3C */,\r\n    W3C: 2 /* eDistributedTracingModes.W3C */\r\n});\r\n/**\r\n * The EventPersistence contains a set of values that specify the event's persistence.\r\n */\r\nexport var EventPersistence = createEnumStyle({\r\n    /**\r\n     * Normal persistence.\r\n     */\r\n    Normal: 1 /* EventPersistenceValue.Normal */,\r\n    /**\r\n     * Critical persistence.\r\n     */\r\n    Critical: 2 /* EventPersistenceValue.Critical */\r\n});\r\n//# sourceMappingURL=Enums.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _throwInternal, dumpObj, getExceptionName, getGlobal, getGlobalInst, isNullOrUndefined, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { StorageType } from \"./Enums\";\r\nimport { _DYN_REMOVE_ITEM, _DYN_TO_STRING } from \"./__DynamicConstants\";\r\nvar _canUseLocalStorage = undefined;\r\nvar _canUseSessionStorage = undefined;\r\nvar _storagePrefix = \"\";\r\n/**\r\n * Gets the localStorage object if available\r\n * @returns {Storage} - Returns the storage object if available else returns null\r\n */\r\nfunction _getLocalStorageObject() {\r\n    if (utlCanUseLocalStorage()) {\r\n        return _getVerifiedStorageObject(StorageType.LocalStorage);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n * @param storageType - Type of storage\r\n * @returns {Storage} Returns storage object verified that it is usable\r\n */\r\nfunction _getVerifiedStorageObject(storageType) {\r\n    try {\r\n        if (isNullOrUndefined(getGlobal())) {\r\n            return null;\r\n        }\r\n        var uid = (new Date)[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        var storage = getGlobalInst(storageType === StorageType.LocalStorage ? \"localStorage\" : \"sessionStorage\");\r\n        var name_1 = _storagePrefix + uid;\r\n        storage.setItem(name_1, uid);\r\n        var fail = storage.getItem(name_1) !== uid;\r\n        storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name_1);\r\n        if (!fail) {\r\n            return storage;\r\n        }\r\n    }\r\n    catch (exception) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Gets the sessionStorage object if available\r\n * @returns {Storage} - Returns the storage object if available else returns null\r\n */\r\nfunction _getSessionStorageObject() {\r\n    if (utlCanUseSessionStorage()) {\r\n        return _getVerifiedStorageObject(StorageType.SessionStorage);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Disables the global SDK usage of local or session storage if available\r\n */\r\nexport function utlDisableStorage() {\r\n    _canUseLocalStorage = false;\r\n    _canUseSessionStorage = false;\r\n}\r\nexport function utlSetStoragePrefix(storagePrefix) {\r\n    _storagePrefix = storagePrefix || \"\";\r\n}\r\n/**\r\n * Re-enables the global SDK usage of local or session storage if available\r\n */\r\nexport function utlEnableStorage() {\r\n    _canUseLocalStorage = utlCanUseLocalStorage(true);\r\n    _canUseSessionStorage = utlCanUseSessionStorage(true);\r\n}\r\n/**\r\n * Returns whether LocalStorage can be used, if the reset parameter is passed a true this will override\r\n * any previous disable calls.\r\n * @param reset - Should the usage be reset and determined only based on whether LocalStorage is available\r\n */\r\nexport function utlCanUseLocalStorage(reset) {\r\n    if (reset || _canUseLocalStorage === undefined) {\r\n        _canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage);\r\n    }\r\n    return _canUseLocalStorage;\r\n}\r\nexport function utlGetLocalStorage(logger, name) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            return storage.getItem(name);\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 1 /* _eInternalMessageId.BrowserCannotReadLocalStorage */, \"Browser failed read of local storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function utlSetLocalStorage(logger, name, data) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage.setItem(name, data);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 3 /* _eInternalMessageId.BrowserCannotWriteLocalStorage */, \"Browser failed write to local storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlRemoveStorage(logger, name) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 5 /* _eInternalMessageId.BrowserFailedRemovalFromLocalStorage */, \"Browser failed removal of local storage item. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlCanUseSessionStorage(reset) {\r\n    if (reset || _canUseSessionStorage === undefined) {\r\n        _canUseSessionStorage = !!_getVerifiedStorageObject(StorageType.SessionStorage);\r\n    }\r\n    return _canUseSessionStorage;\r\n}\r\nexport function utlGetSessionStorageKeys() {\r\n    var keys = [];\r\n    if (utlCanUseSessionStorage()) {\r\n        objForEachKey(getGlobalInst(\"sessionStorage\"), function (key) {\r\n            keys.push(key);\r\n        });\r\n    }\r\n    return keys;\r\n}\r\nexport function utlGetSessionStorage(logger, name) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            return storage.getItem(name);\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 2 /* _eInternalMessageId.BrowserCannotReadSessionStorage */, \"Browser failed read of session storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function utlSetSessionStorage(logger, name, data) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage.setItem(name, data);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 4 /* _eInternalMessageId.BrowserCannotWriteSessionStorage */, \"Browser failed write to session storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlRemoveSessionStorage(logger, name) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 6 /* _eInternalMessageId.BrowserFailedRemovalFromSessionStorage */, \"Browser failed removal of session storage item. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=StorageHelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString } from \"./Common/DataSanitizer\";\r\nvar Event = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the EventTelemetry object\r\n     */\r\n    function Event(logger, name, properties, measurements) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            name: 1 /* FieldType.Required */,\r\n            properties: 0 /* FieldType.Default */,\r\n            measurements: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        _self[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n    }\r\n    Event.envelopeType = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n    Event.dataType = \"EventData\";\r\n    return Event;\r\n}());\r\nexport { Event };\r\n//# sourceMappingURL=Event.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { __assign } from \"tslib\";\r\nimport { arrForEach, arrMap, isArray, isError, isFunction, isNullOrUndefined, isObject, isString, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { asString, getWindow, objFreeze, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_AI_DATA_CONTRACT, _DYN_ASSEMBLY, _DYN_EXCEPTIONS, _DYN_FILE_NAME, _DYN_HAS_FULL_STACK, _DYN_LENGTH, _DYN_LINE, _DYN_MATCH, _DYN_MEASUREMENTS, _DYN_MESSAGE, _DYN_NAME, _DYN_PARSED_STACK, _DYN_PROBLEM_GROUP, _DYN_PROPERTIES, _DYN_SEVERITY_LEVEL, _DYN_SIZE_IN_BYTES, _DYN_SPLIT, _DYN_STRINGIFY, _DYN_TO_STRING, _DYN_TYPE_NAME } from \"../__DynamicConstants\";\r\nimport { dataSanitizeException, dataSanitizeMeasurements, dataSanitizeMessage, dataSanitizeProperties, dataSanitizeString } from \"./Common/DataSanitizer\";\r\n// These Regex covers the following patterns\r\n// 1. Chrome/Firefox/IE/Edge:\r\n//    at functionName (filename:lineNumber:columnNumber)\r\n//    at functionName (filename:lineNumber)\r\n//    at filename:lineNumber:columnNumber\r\n//    at filename:lineNumber\r\n//    at functionName@filename:lineNumber:columnNumber\r\n// 2. Safari / Opera:\r\n//    functionName@filename:lineNumber:columnNumber\r\n//    functionName@filename:lineNumber\r\n//    filename:lineNumber:columnNumber\r\n//    filename:lineNumber\r\n//    Line ## of scriptname script filename:lineNumber:columnNumber\r\n//    Line ## of scriptname script filename\r\n// 3. IE/Edge (Additional formats)\r\n//    at functionName@filename:lineNumber\r\nvar STACKFRAME_BASE_SIZE = 58; // '{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n/**\r\n * Check if the string conforms to what looks like a stack frame line and not just a general message\r\n * comment or other non-stack related info.\r\n *\r\n * This  should be used to filter out any leading \"message\" lines from a stack trace, before attempting to parse\r\n * the individual stack frames. Once you have estabilsted the start of the stack frames you can then use the\r\n * FULL_STACK_FRAME_1, FULL_STACK_FRAME_2, FULL_STACK_FRAME_3, and EXTRACT_FILENAME to parse the individual\r\n * stack frames to extract the method, filename, line number, and column number.\r\n * These may still provide invalid matches, so the sequence of execution is important to avoid providing\r\n * an invalid parsed stack.\r\n */\r\nvar IS_FRAME = /^\\s{0,50}(from\\s|at\\s|Line\\s{1,5}\\d{1,10}\\s{1,5}of|\\w{1,50}@\\w{1,80}|[^\\(\\s\\n]+:[0-9\\?]+(?::[0-9\\?]+)?)/;\r\n/**\r\n * Parse a well formed stack frame with both the line and column numbers\r\n * ----------------------------------\r\n * **Primary focus of the matching**\r\n * - at functionName (filename:lineNumber:columnNumber)\r\n * - at filename:lineNumber:columnNumber\r\n * - at functionName@filename:lineNumber:columnNumber\r\n * - functionName (filename:lineNumber:columnNumber)\r\n * - filename:lineNumber:columnNumber\r\n * - functionName@filename:lineNumber:columnNumber\r\n */\r\nvar FULL_STACK_FRAME_1 = /^(?:\\s{0,50}at)?\\s{0,50}([^\\@\\()\\s]+)?\\s{0,50}(?:\\s|\\@|\\()\\s{0,5}([^\\(\\s\\n\\]]+):([0-9\\?]+):([0-9\\?]+)\\)?$/;\r\n/**\r\n * Parse a well formed stack frame with only a line number.\r\n * ----------------------------------\r\n * > Note: this WILL also match with line and column number, but the line number is included with the filename\r\n * > you should attempt to match with FULL_STACK_FRAME_1 first.\r\n *\r\n * **Primary focus of the matching (run FULL_STACK_FRAME_1 first)**\r\n * - at functionName (filename:lineNumber)\r\n * - at filename:lineNumber\r\n * - at functionName@filename:lineNumber\r\n * - functionName (filename:lineNumber)\r\n * - filename:lineNumber\r\n * - functionName@filename:lineNumber\r\n *\r\n * **Secondary matches**\r\n * - at functionName (filename:lineNumber:columnNumber)\r\n * - at filename:lineNumber:columnNumber\r\n * - at functionName@filename:lineNumber:columnNumber\r\n * - functionName (filename:lineNumber:columnNumber)\r\n * - filename:lineNumber:columnNumber\r\n * - functionName@filename:lineNumber:columnNumber\r\n */\r\nvar FULL_STACK_FRAME_2 = /^(?:\\s{0,50}at)?\\s{0,50}([^\\@\\()\\s]+)?\\s{0,50}(?:\\s|\\@|\\()\\s{0,5}([^\\(\\s\\n\\]]+):([0-9\\?]+)\\)?$/;\r\n/**\r\n * Attempt to Parse a frame that doesn't include a line or column number.\r\n * ----------------------------------\r\n * > Note: this WILL also match lines with a line or line and column number, you should attempt to match with\r\n * both FULL_STACK_FRAME_1 and FULL_STACK_FRAME_2 first to avoid false positives.\r\n *\r\n * **Unexpected Invalid Matches** (Matches that should be avoided -- by using the FULL_STACK_FRAME_1 and FULL_STACK_FRAME_2 first)\r\n * - at https://localhost:44365/static/node_bundles/@microsoft/blah/js/bundle.js:144112:27\r\n * - at https://localhost:44365/static/node_bundles/@microsoft/blah/js/bundle.js:144112:27\r\n *\r\n * **Primary focus of the matching (run FULL_STACK_FRAME_1 first)**\r\n * - at functionName@filename\r\n * - at functionName (filename)\r\n * - at functionName filename\r\n * - at filename  <- Will actuall match this as the \"method\" and not the filename (care should be taken to avoid this)\r\n * - functionName@filename\r\n * - functionName (filename)\r\n * - functionName filename\r\n * - functionName\r\n *\r\n * **Secondary matches** (The line and column numbers will be included with the matched filename)\r\n * - at functionName (filename:lineNumber:columnNumber)\r\n * - at functionName (filename:lineNumber)\r\n * - at filename:lineNumber:columnNumber\r\n * - at filename:lineNumber\r\n * - at functionName@filename:lineNumber:columnNumber\r\n * - at functionName@filename:lineNumber\r\n * - functionName (filename:lineNumber:columnNumber)\r\n * - functionName (filename:lineNumber)\r\n * - filename:lineNumber:columnNumber\r\n * - filename:lineNumber\r\n * - functionName@filename:lineNumber:columnNumber\r\n * - functionName@filename:lineNumber\r\n  */\r\nvar FULL_STACK_FRAME_3 = /^(?:\\s{0,50}at)?\\s{0,50}([^\\@\\()\\s]+)?\\s{0,50}(?:\\s|\\@|\\()\\s{0,5}([^\\(\\s\\n\\)\\]]+)\\)?$/;\r\n/**\r\n * Attempt to extract the filename (with or without line and column numbers) from a string.\r\n * ----------------------------------\r\n * > Note: this will only match the filename (with any line or column numbers) and will\r\n * > return what looks like the filename, however, it will also match random strings that\r\n * > look like a filename, so care should be taken to ensure that the filename is actually\r\n * > a filename before using it.\r\n * >\r\n * > It is recommended to use this in conjunction with the FULL_STACK_FRAME_1, FULL_STACK_FRAME_2, and FULL_STACK_FRAME_3\r\n * > to ensure first to reduce false matches, if all of these fail then you can use this to extract the filename from a random\r\n * > strings to identify any potential filename from a known stack frame line.\r\n *\r\n * **Known Invalid matching**\r\n *\r\n * This regex will basically match any \"final\" string of a line or one that is trailed by a comma, so this should not\r\n * be used as the \"only\" matching regex, but rather as a final fallback to extract the filename from a string.\r\n * If you are certain that the string line is a stack frame and not part of the exception message (lines before the stack)\r\n * or trailing comments, then you can use this to extract the filename and then further parse with PARSE_FILENAME_LINE_COL\r\n * and PARSE_FILENAME_LINE_ONLY to extract any potential the line and column numbers.\r\n *\r\n * **Primary focus of the matching**\r\n * - at (anonymous) @ VM60:1\r\n * - Line 21 of linked script file://localhost/C:/Temp/stacktrace.js\r\n * - Line 11 of inline#1 script in http://localhost:3000/static/js/main.206f4846.js:2:296748\r\n * - Line 68 of inline#2 script in file://localhost/teststack.html\r\n * - at Global code (http://example.com/stacktrace.js:11:1)\r\n */\r\nvar EXTRACT_FILENAME = /(?:^|\\(|\\s{0,10}[\\w\\)]+\\@)?([^\\(\\n\\s\\]\\)]+)(?:\\:([0-9]+)(?:\\:([0-9]+))?)?\\)?(?:,|$)/;\r\n/**\r\n * Attempt to extract the filename, line number, and column number from a string.\r\n */\r\nvar PARSE_FILENAME_LINE_COL = /([^\\(\\s\\n]+):([0-9]+):([0-9]+)$/;\r\n/**\r\n * Attempt to extract the filename and line number from a string.\r\n */\r\nvar PARSE_FILENAME_LINE_ONLY = /([^\\(\\s\\n]+):([0-9]+)$/;\r\nvar NoMethod = \"<no_method>\";\r\nvar strError = \"error\";\r\nvar strStack = \"stack\";\r\nvar strStackDetails = \"stackDetails\";\r\nvar strErrorSrc = \"errorSrc\";\r\nvar strMessage = \"message\";\r\nvar strDescription = \"description\";\r\nvar _parseSequence = [\r\n    { re: FULL_STACK_FRAME_1, len: 5, m: 1, fn: 2, ln: 3, col: 4 },\r\n    { chk: _ignoreNative, pre: _scrubAnonymous, re: FULL_STACK_FRAME_2, len: 4, m: 1, fn: 2, ln: 3 },\r\n    { re: FULL_STACK_FRAME_3, len: 3, m: 1, fn: 2, hdl: _handleFilename },\r\n    { re: EXTRACT_FILENAME, len: 2, fn: 1, hdl: _handleFilename }\r\n];\r\nfunction _scrubAnonymous(frame) {\r\n    return frame.replace(/(\\(anonymous\\))/, \"<anonymous>\");\r\n}\r\nfunction _ignoreNative(frame) {\r\n    return strIndexOf(frame, \"[native\") < 0;\r\n}\r\nfunction _stringify(value, convertToString) {\r\n    var result = value;\r\n    if (result && !isString(result)) {\r\n        if (JSON && JSON[_DYN_STRINGIFY /* @min:%2estringify */]) {\r\n            result = JSON[_DYN_STRINGIFY /* @min:%2estringify */](value);\r\n            if (convertToString && (!result || result === \"{}\")) {\r\n                if (isFunction(value[_DYN_TO_STRING /* @min:%2etoString */])) {\r\n                    result = value[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                }\r\n                else {\r\n                    result = \"\" + value;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            result = \"\" + value + \" - (Missing JSON.stringify)\";\r\n        }\r\n    }\r\n    return result || \"\";\r\n}\r\nfunction _formatMessage(theEvent, errorType) {\r\n    var evtMessage = theEvent;\r\n    if (theEvent) {\r\n        if (evtMessage && !isString(evtMessage)) {\r\n            evtMessage = theEvent[strMessage] || theEvent[strDescription] || evtMessage;\r\n        }\r\n        // Make sure the message is a string\r\n        if (evtMessage && !isString(evtMessage)) {\r\n            // tslint:disable-next-line: prefer-conditional-expression\r\n            evtMessage = _stringify(evtMessage, true);\r\n        }\r\n        if (theEvent[\"filename\"]) {\r\n            // Looks like an event object with filename\r\n            evtMessage = evtMessage + \" @\" + (theEvent[\"filename\"] || \"\") + \":\" + (theEvent[\"lineno\"] || \"?\") + \":\" + (theEvent[\"colno\"] || \"?\");\r\n        }\r\n    }\r\n    // Automatically add the error type to the message if it does already appear to be present\r\n    if (errorType && errorType !== \"String\" && errorType !== \"Object\" && errorType !== \"Error\" && strIndexOf(evtMessage || \"\", errorType) === -1) {\r\n        evtMessage = errorType + \": \" + evtMessage;\r\n    }\r\n    return evtMessage || \"\";\r\n}\r\nfunction _isExceptionDetailsInternal(value) {\r\n    try {\r\n        if (isObject(value)) {\r\n            return \"hasFullStack\" in value && \"typeName\" in value;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n    return false;\r\n}\r\nfunction _isExceptionInternal(value) {\r\n    try {\r\n        if (isObject(value)) {\r\n            return (\"ver\" in value && \"exceptions\" in value && \"properties\" in value);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n    return false;\r\n}\r\nfunction _isStackDetails(details) {\r\n    return details && details.src && isString(details.src) && details.obj && isArray(details.obj);\r\n}\r\nfunction _convertStackObj(errorStack) {\r\n    var src = errorStack || \"\";\r\n    if (!isString(src)) {\r\n        if (isString(src[strStack])) {\r\n            src = src[strStack];\r\n        }\r\n        else {\r\n            src = \"\" + src;\r\n        }\r\n    }\r\n    var items = src[_DYN_SPLIT /* @min:%2esplit */](\"\\n\");\r\n    return {\r\n        src: src,\r\n        obj: items\r\n    };\r\n}\r\nfunction _getOperaStack(errorMessage) {\r\n    var stack = [];\r\n    var lines = errorMessage[_DYN_SPLIT /* @min:%2esplit */](\"\\n\");\r\n    for (var lp = 0; lp < lines[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n        var entry = lines[lp];\r\n        if (lines[lp + 1]) {\r\n            entry += \"@\" + lines[lp + 1];\r\n            lp++;\r\n        }\r\n        stack.push(entry);\r\n    }\r\n    return {\r\n        src: errorMessage,\r\n        obj: stack\r\n    };\r\n}\r\nfunction _getStackFromErrorObj(errorObj) {\r\n    var details = null;\r\n    if (errorObj) {\r\n        try {\r\n            /* Using bracket notation is support older browsers (IE 7/8 -- dont remember the version) that throw when using dot\r\n            notation for undefined objects and we don't want to loose the error from being reported */\r\n            if (errorObj[strStack]) {\r\n                // Chrome/Firefox\r\n                details = _convertStackObj(errorObj[strStack]);\r\n            }\r\n            else if (errorObj[strError] && errorObj[strError][strStack]) {\r\n                // Edge error event provides the stack and error object\r\n                details = _convertStackObj(errorObj[strError][strStack]);\r\n            }\r\n            else if (errorObj[\"exception\"] && errorObj.exception[strStack]) {\r\n                details = _convertStackObj(errorObj.exception[strStack]);\r\n            }\r\n            else if (_isStackDetails(errorObj)) {\r\n                details = errorObj;\r\n            }\r\n            else if (_isStackDetails(errorObj[strStackDetails])) {\r\n                details = errorObj[strStackDetails];\r\n            }\r\n            else if (getWindow() && getWindow()[\"opera\"] && errorObj[strMessage]) {\r\n                // Opera\r\n                details = _getOperaStack(errorObj[_DYN_MESSAGE /* @min:%2emessage */]);\r\n            }\r\n            else if (errorObj[\"reason\"] && errorObj.reason[strStack]) {\r\n                // UnhandledPromiseRejection\r\n                details = _convertStackObj(errorObj.reason[strStack]);\r\n            }\r\n            else if (isString(errorObj)) {\r\n                details = _convertStackObj(errorObj);\r\n            }\r\n            else {\r\n                var evtMessage = errorObj[strMessage] || errorObj[strDescription] || \"\";\r\n                if (isString(errorObj[strErrorSrc])) {\r\n                    if (evtMessage) {\r\n                        evtMessage += \"\\n\";\r\n                    }\r\n                    evtMessage += \" from \" + errorObj[strErrorSrc];\r\n                }\r\n                if (evtMessage) {\r\n                    details = _convertStackObj(evtMessage);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // something unexpected happened so to avoid failing to report any error lets swallow the exception\r\n            // and fallback to the callee/caller method\r\n            details = _convertStackObj(e);\r\n        }\r\n    }\r\n    return details || {\r\n        src: \"\",\r\n        obj: null\r\n    };\r\n}\r\nfunction _formatStackTrace(stackDetails) {\r\n    var stack = \"\";\r\n    if (stackDetails) {\r\n        if (stackDetails.obj) {\r\n            stack = stackDetails.obj.join(\"\\n\");\r\n        }\r\n        else {\r\n            stack = stackDetails.src || \"\";\r\n        }\r\n    }\r\n    return stack;\r\n}\r\nfunction _parseStack(stack) {\r\n    var parsedStack;\r\n    var frames = stack.obj;\r\n    if (frames && frames[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        parsedStack = [];\r\n        var level_1 = 0;\r\n        var foundStackStart_1 = false;\r\n        var totalSizeInBytes_1 = 0;\r\n        arrForEach(frames, function (frame) {\r\n            if (foundStackStart_1 || _isStackFrame(frame)) {\r\n                var theFrame = asString(frame);\r\n                // Once we have found the first stack frame we treat the rest of the lines as part of the stack\r\n                foundStackStart_1 = true;\r\n                var parsedFrame = _extractStackFrame(theFrame, level_1);\r\n                if (parsedFrame) {\r\n                    totalSizeInBytes_1 += parsedFrame[_DYN_SIZE_IN_BYTES /* @min:%2esizeInBytes */];\r\n                    parsedStack.push(parsedFrame);\r\n                    level_1++;\r\n                }\r\n            }\r\n        });\r\n        // DP Constraint - exception parsed stack must be < 32KB\r\n        // remove frames from the middle to meet the threshold\r\n        var exceptionParsedStackThreshold = 32 * 1024;\r\n        if (totalSizeInBytes_1 > exceptionParsedStackThreshold) {\r\n            var left = 0;\r\n            var right = parsedStack[_DYN_LENGTH /* @min:%2elength */] - 1;\r\n            var size = 0;\r\n            var acceptedLeft = left;\r\n            var acceptedRight = right;\r\n            while (left < right) {\r\n                // check size\r\n                var lSize = parsedStack[left][_DYN_SIZE_IN_BYTES /* @min:%2esizeInBytes */];\r\n                var rSize = parsedStack[right][_DYN_SIZE_IN_BYTES /* @min:%2esizeInBytes */];\r\n                size += lSize + rSize;\r\n                if (size > exceptionParsedStackThreshold) {\r\n                    // remove extra frames from the middle\r\n                    var howMany = acceptedRight - acceptedLeft + 1;\r\n                    parsedStack.splice(acceptedLeft, howMany);\r\n                    break;\r\n                }\r\n                // update pointers\r\n                acceptedLeft = left;\r\n                acceptedRight = right;\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n    return parsedStack;\r\n}\r\nfunction _getErrorType(errorType) {\r\n    // Gets the Error Type by passing the constructor (used to get the true type of native error object).\r\n    var typeName = \"\";\r\n    if (errorType) {\r\n        typeName = errorType.typeName || errorType[_DYN_NAME /* @min:%2ename */] || \"\";\r\n        if (!typeName) {\r\n            try {\r\n                var funcNameRegex = /function (.{1,200})\\(/;\r\n                var results = (funcNameRegex).exec((errorType).constructor[_DYN_TO_STRING /* @min:%2etoString */]());\r\n                typeName = (results && results[_DYN_LENGTH /* @min:%2elength */] > 1) ? results[1] : \"\";\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty -- Ignoring any failures as nothing we can do\r\n            }\r\n        }\r\n    }\r\n    return typeName;\r\n}\r\n/**\r\n * Formats the provided errorObj for display and reporting, it may be a String, Object, integer or undefined depending on the browser.\r\n * @param errorObj - The supplied errorObj\r\n */\r\nexport function _formatErrorCode(errorObj) {\r\n    if (errorObj) {\r\n        try {\r\n            if (!isString(errorObj)) {\r\n                var errorType = _getErrorType(errorObj);\r\n                var result = _stringify(errorObj, false);\r\n                if (!result || result === \"{}\") {\r\n                    if (errorObj[strError]) {\r\n                        // Looks like an MS Error Event\r\n                        errorObj = errorObj[strError];\r\n                        errorType = _getErrorType(errorObj);\r\n                    }\r\n                    result = _stringify(errorObj, true);\r\n                }\r\n                if (strIndexOf(result, errorType) !== 0 && errorType !== \"String\") {\r\n                    return errorType + \":\" + result;\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty -- Ignoring any failures as nothing we can do\r\n        }\r\n    }\r\n    // Fallback to just letting the object format itself into a string\r\n    return \"\" + (errorObj || \"\");\r\n}\r\nvar Exception = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the ExceptionTelemetry object\r\n     */\r\n    function Exception(logger, exception, properties, measurements, severityLevel, id) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            exceptions: 1 /* FieldType.Required */,\r\n            severityLevel: 0 /* FieldType.Default */,\r\n            properties: 0 /* FieldType.Default */,\r\n            measurements: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2; // TODO: handle the CS\"4.0\" ==> breeze 2 conversion in a better way\r\n        if (!_isExceptionInternal(exception)) {\r\n            if (!properties) {\r\n                properties = {};\r\n            }\r\n            if (id) {\r\n                properties.id = id;\r\n            }\r\n            _self[_DYN_EXCEPTIONS /* @min:%2eexceptions */] = [_createExceptionDetails(logger, exception, properties)];\r\n            _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n            _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n            if (severityLevel) {\r\n                _self[_DYN_SEVERITY_LEVEL /* @min:%2eseverityLevel */] = severityLevel;\r\n            }\r\n            if (id) {\r\n                _self.id = id;\r\n            }\r\n        }\r\n        else {\r\n            _self[_DYN_EXCEPTIONS /* @min:%2eexceptions */] = exception[_DYN_EXCEPTIONS /* @min:%2eexceptions */] || [];\r\n            _self[_DYN_PROPERTIES /* @min:%2eproperties */] = exception[_DYN_PROPERTIES /* @min:%2eproperties */];\r\n            _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = exception[_DYN_MEASUREMENTS /* @min:%2emeasurements */];\r\n            if (exception[_DYN_SEVERITY_LEVEL /* @min:%2eseverityLevel */]) {\r\n                _self[_DYN_SEVERITY_LEVEL /* @min:%2eseverityLevel */] = exception[_DYN_SEVERITY_LEVEL /* @min:%2eseverityLevel */];\r\n            }\r\n            if (exception.id) {\r\n                _self.id = exception.id;\r\n                exception[_DYN_PROPERTIES /* @min:%2eproperties */].id = exception.id;\r\n            }\r\n            if (exception[_DYN_PROBLEM_GROUP /* @min:%2eproblemGroup */]) {\r\n                _self[_DYN_PROBLEM_GROUP /* @min:%2eproblemGroup */] = exception[_DYN_PROBLEM_GROUP /* @min:%2eproblemGroup */];\r\n            }\r\n            // bool/int types, use isNullOrUndefined\r\n            if (!isNullOrUndefined(exception.isManual)) {\r\n                _self.isManual = exception.isManual;\r\n            }\r\n        }\r\n    }\r\n    Exception.CreateAutoException = function (message, url, lineNumber, columnNumber, error, evt, stack, errorSrc) {\r\n        var errorType = _getErrorType(error || evt || message);\r\n        return {\r\n            message: _formatMessage(message, errorType),\r\n            url: url,\r\n            lineNumber: lineNumber,\r\n            columnNumber: columnNumber,\r\n            error: _formatErrorCode(error || evt || message),\r\n            evt: _formatErrorCode(evt || message),\r\n            typeName: errorType,\r\n            stackDetails: _getStackFromErrorObj(stack || error || evt),\r\n            errorSrc: errorSrc\r\n        };\r\n    };\r\n    Exception.CreateFromInterface = function (logger, exception, properties, measurements) {\r\n        var exceptions = exception[_DYN_EXCEPTIONS /* @min:%2eexceptions */]\r\n            && arrMap(exception[_DYN_EXCEPTIONS /* @min:%2eexceptions */], function (ex) { return _createExDetailsFromInterface(logger, ex); });\r\n        var exceptionData = new Exception(logger, __assign(__assign({}, exception), { exceptions: exceptions }), properties, measurements);\r\n        return exceptionData;\r\n    };\r\n    Exception.prototype.toInterface = function () {\r\n        var _a = this, exceptions = _a.exceptions, properties = _a.properties, measurements = _a.measurements, severityLevel = _a.severityLevel, problemGroup = _a.problemGroup, id = _a.id, isManual = _a.isManual;\r\n        var exceptionDetailsInterface = exceptions instanceof Array\r\n            && arrMap(exceptions, function (exception) { return exception.toInterface(); })\r\n            || undefined;\r\n        return {\r\n            ver: \"4.0\",\r\n            exceptions: exceptionDetailsInterface,\r\n            severityLevel: severityLevel,\r\n            properties: properties,\r\n            measurements: measurements,\r\n            problemGroup: problemGroup,\r\n            id: id,\r\n            isManual: isManual\r\n        };\r\n    };\r\n    /**\r\n     * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n     */\r\n    Exception.CreateSimpleException = function (message, typeName, assembly, fileName, details, line) {\r\n        var _a;\r\n        return {\r\n            exceptions: [\r\n                (_a = {},\r\n                    _a[_DYN_HAS_FULL_STACK /* @min:hasFullStack */] = true,\r\n                    _a.message = message,\r\n                    _a.stack = details,\r\n                    _a.typeName = typeName,\r\n                    _a)\r\n            ]\r\n        };\r\n    };\r\n    Exception.envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n    Exception.dataType = \"ExceptionData\";\r\n    Exception.formatError = _formatErrorCode;\r\n    return Exception;\r\n}());\r\nexport { Exception };\r\nvar exDetailsAiDataContract = objFreeze({\r\n    id: 0 /* FieldType.Default */,\r\n    outerId: 0 /* FieldType.Default */,\r\n    typeName: 1 /* FieldType.Required */,\r\n    message: 1 /* FieldType.Required */,\r\n    hasFullStack: 0 /* FieldType.Default */,\r\n    stack: 0 /* FieldType.Default */,\r\n    parsedStack: 2 /* FieldType.Array */\r\n});\r\nfunction _toInterface() {\r\n    var _self = this;\r\n    var parsedStack = isArray(_self[_DYN_PARSED_STACK /* @min:%2eparsedStack */])\r\n        && arrMap(_self[_DYN_PARSED_STACK /* @min:%2eparsedStack */], function (frame) { return _parsedFrameToInterface(frame); });\r\n    var exceptionDetailsInterface = {\r\n        id: _self.id,\r\n        outerId: _self.outerId,\r\n        typeName: _self[_DYN_TYPE_NAME /* @min:%2etypeName */],\r\n        message: _self[_DYN_MESSAGE /* @min:%2emessage */],\r\n        hasFullStack: _self[_DYN_HAS_FULL_STACK /* @min:%2ehasFullStack */],\r\n        stack: _self[strStack],\r\n        parsedStack: parsedStack || undefined\r\n    };\r\n    return exceptionDetailsInterface;\r\n}\r\nexport function _createExceptionDetails(logger, exception, properties) {\r\n    var _a;\r\n    var id;\r\n    var outerId;\r\n    var typeName;\r\n    var message;\r\n    var hasFullStack;\r\n    var theStack;\r\n    var parsedStack;\r\n    if (!_isExceptionDetailsInternal(exception)) {\r\n        var error = exception;\r\n        var evt = error && error.evt;\r\n        if (!isError(error)) {\r\n            error = error[strError] || evt || error;\r\n        }\r\n        typeName = dataSanitizeString(logger, _getErrorType(error)) || strNotSpecified;\r\n        message = dataSanitizeMessage(logger, _formatMessage(exception || error, typeName)) || strNotSpecified;\r\n        var stack = exception[strStackDetails] || _getStackFromErrorObj(exception);\r\n        parsedStack = _parseStack(stack);\r\n        // after parsedStack is inited, iterate over each frame object, sanitize its assembly field\r\n        if (isArray(parsedStack)) {\r\n            arrMap(parsedStack, function (frame) {\r\n                frame[_DYN_ASSEMBLY /* @min:%2eassembly */] = dataSanitizeString(logger, frame[_DYN_ASSEMBLY /* @min:%2eassembly */]);\r\n                frame[_DYN_FILE_NAME /* @min:%2efileName */] = dataSanitizeString(logger, frame[_DYN_FILE_NAME /* @min:%2efileName */]);\r\n            });\r\n        }\r\n        theStack = dataSanitizeException(logger, _formatStackTrace(stack));\r\n        hasFullStack = isArray(parsedStack) && parsedStack[_DYN_LENGTH /* @min:%2elength */] > 0;\r\n        if (properties) {\r\n            properties[_DYN_TYPE_NAME /* @min:%2etypeName */] = properties[_DYN_TYPE_NAME /* @min:%2etypeName */] || typeName;\r\n        }\r\n    }\r\n    else {\r\n        typeName = exception[_DYN_TYPE_NAME /* @min:%2etypeName */];\r\n        message = exception[_DYN_MESSAGE /* @min:%2emessage */];\r\n        theStack = exception[strStack];\r\n        parsedStack = exception[_DYN_PARSED_STACK /* @min:%2eparsedStack */] || [];\r\n        hasFullStack = exception[_DYN_HAS_FULL_STACK /* @min:%2ehasFullStack */];\r\n    }\r\n    return _a = {},\r\n        _a[_DYN_AI_DATA_CONTRACT /* @min:aiDataContract */] = exDetailsAiDataContract,\r\n        _a.id = id,\r\n        _a.outerId = outerId,\r\n        _a.typeName = typeName,\r\n        _a.message = message,\r\n        _a[_DYN_HAS_FULL_STACK /* @min:hasFullStack */] = hasFullStack,\r\n        _a.stack = theStack,\r\n        _a.parsedStack = parsedStack,\r\n        _a.toInterface = _toInterface,\r\n        _a;\r\n}\r\nexport function _createExDetailsFromInterface(logger, exception) {\r\n    var parsedStack = (isArray(exception[_DYN_PARSED_STACK /* @min:%2eparsedStack */])\r\n        && arrMap(exception[_DYN_PARSED_STACK /* @min:%2eparsedStack */], function (frame) { return _stackFrameFromInterface(frame); }))\r\n        || exception[_DYN_PARSED_STACK /* @min:%2eparsedStack */];\r\n    var exceptionDetails = _createExceptionDetails(logger, __assign(__assign({}, exception), { parsedStack: parsedStack }));\r\n    return exceptionDetails;\r\n}\r\nfunction _parseFilename(theFrame, fileName) {\r\n    var lineCol = fileName[_DYN_MATCH /* @min:%2ematch */](PARSE_FILENAME_LINE_COL);\r\n    if (lineCol && lineCol[_DYN_LENGTH /* @min:%2elength */] >= 4) {\r\n        theFrame[_DYN_FILE_NAME /* @min:%2efileName */] = lineCol[1];\r\n        theFrame[_DYN_LINE /* @min:%2eline */] = parseInt(lineCol[2]);\r\n    }\r\n    else {\r\n        var lineNo = fileName[_DYN_MATCH /* @min:%2ematch */](PARSE_FILENAME_LINE_ONLY);\r\n        if (lineNo && lineNo[_DYN_LENGTH /* @min:%2elength */] >= 3) {\r\n            theFrame[_DYN_FILE_NAME /* @min:%2efileName */] = lineNo[1];\r\n            theFrame[_DYN_LINE /* @min:%2eline */] = parseInt(lineNo[2]);\r\n        }\r\n        else {\r\n            theFrame[_DYN_FILE_NAME /* @min:%2efileName */] = fileName;\r\n        }\r\n    }\r\n}\r\nfunction _handleFilename(theFrame, sequence, matches) {\r\n    var filename = theFrame[_DYN_FILE_NAME /* @min:%2efileName */];\r\n    if (sequence.fn && matches && matches[_DYN_LENGTH /* @min:%2elength */] > sequence.fn) {\r\n        if (sequence.ln && matches[_DYN_LENGTH /* @min:%2elength */] > sequence.ln) {\r\n            filename = strTrim(matches[sequence.fn] || \"\");\r\n            theFrame[_DYN_LINE /* @min:%2eline */] = parseInt(strTrim(matches[sequence.ln] || \"\")) || 0;\r\n        }\r\n        else {\r\n            filename = strTrim(matches[sequence.fn] || \"\");\r\n        }\r\n    }\r\n    if (filename) {\r\n        _parseFilename(theFrame, filename);\r\n    }\r\n}\r\nfunction _isStackFrame(frame) {\r\n    var result = false;\r\n    if (frame && isString(frame)) {\r\n        var trimmedFrame = strTrim(frame);\r\n        if (trimmedFrame) {\r\n            result = IS_FRAME.test(trimmedFrame);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar stackFrameAiDataContract = objFreeze({\r\n    level: 1 /* FieldType.Required */,\r\n    method: 1 /* FieldType.Required */,\r\n    assembly: 0 /* FieldType.Default */,\r\n    fileName: 0 /* FieldType.Default */,\r\n    line: 0 /* FieldType.Default */\r\n});\r\nexport function _extractStackFrame(frame, level) {\r\n    var _a;\r\n    var theFrame;\r\n    if (frame && isString(frame) && strTrim(frame)) {\r\n        theFrame = (_a = {},\r\n            _a[_DYN_AI_DATA_CONTRACT /* @min:aiDataContract */] = stackFrameAiDataContract,\r\n            _a.level = level,\r\n            _a.assembly = strTrim(frame),\r\n            _a.method = NoMethod,\r\n            _a.fileName = \"\",\r\n            _a.line = 0,\r\n            _a.sizeInBytes = 0,\r\n            _a);\r\n        var idx = 0;\r\n        while (idx < _parseSequence[_DYN_LENGTH /* @min:%2elength */]) {\r\n            var sequence = _parseSequence[idx];\r\n            if (sequence.chk && !sequence.chk(frame)) {\r\n                break;\r\n            }\r\n            if (sequence.pre) {\r\n                frame = sequence.pre(frame);\r\n            }\r\n            // Attempt to \"parse\" the stack frame\r\n            var matches = frame[_DYN_MATCH /* @min:%2ematch */](sequence.re);\r\n            if (matches && matches[_DYN_LENGTH /* @min:%2elength */] >= sequence.len) {\r\n                if (sequence.m) {\r\n                    theFrame.method = strTrim(matches[sequence.m] || NoMethod);\r\n                }\r\n                if (sequence.hdl) {\r\n                    // Run any custom handler\r\n                    sequence.hdl(theFrame, sequence, matches);\r\n                }\r\n                else if (sequence.fn) {\r\n                    if (sequence.ln) {\r\n                        theFrame[_DYN_FILE_NAME /* @min:%2efileName */] = strTrim(matches[sequence.fn] || \"\");\r\n                        theFrame[_DYN_LINE /* @min:%2eline */] = parseInt(strTrim(matches[sequence.ln] || \"\")) || 0;\r\n                    }\r\n                    else {\r\n                        _parseFilename(theFrame, matches[sequence.fn] || \"\");\r\n                    }\r\n                }\r\n                // We found a match so stop looking\r\n                break;\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n    return _populateFrameSizeInBytes(theFrame);\r\n}\r\nfunction _stackFrameFromInterface(frame) {\r\n    var _a;\r\n    var parsedFrame = (_a = {},\r\n        _a[_DYN_AI_DATA_CONTRACT /* @min:aiDataContract */] = stackFrameAiDataContract,\r\n        _a.level = frame.level,\r\n        _a.method = frame.method,\r\n        _a.assembly = frame[_DYN_ASSEMBLY /* @min:%2eassembly */],\r\n        _a.fileName = frame[_DYN_FILE_NAME /* @min:%2efileName */],\r\n        _a.line = frame[_DYN_LINE /* @min:%2eline */],\r\n        _a.sizeInBytes = 0,\r\n        _a);\r\n    return _populateFrameSizeInBytes(parsedFrame);\r\n}\r\nfunction _populateFrameSizeInBytes(frame) {\r\n    var sizeInBytes = STACKFRAME_BASE_SIZE;\r\n    if (frame) {\r\n        sizeInBytes += frame.method[_DYN_LENGTH /* @min:%2elength */];\r\n        sizeInBytes += frame.assembly[_DYN_LENGTH /* @min:%2elength */];\r\n        sizeInBytes += frame.fileName[_DYN_LENGTH /* @min:%2elength */];\r\n        sizeInBytes += frame.level.toString()[_DYN_LENGTH /* @min:%2elength */];\r\n        sizeInBytes += frame.line.toString()[_DYN_LENGTH /* @min:%2elength */];\r\n        frame[_DYN_SIZE_IN_BYTES /* @min:%2esizeInBytes */] = sizeInBytes;\r\n    }\r\n    return frame;\r\n}\r\nexport function _parsedFrameToInterface(frame) {\r\n    return {\r\n        level: frame.level,\r\n        method: frame.method,\r\n        assembly: frame[_DYN_ASSEMBLY /* @min:%2eassembly */],\r\n        fileName: frame[_DYN_FILE_NAME /* @min:%2efileName */],\r\n        line: frame[_DYN_LINE /* @min:%2eline */]\r\n    };\r\n}\r\n//# sourceMappingURL=Exception.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar DataPoint = /** @class */ (function () {\r\n    function DataPoint() {\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        this.aiDataContract = {\r\n            name: 1 /* FieldType.Required */,\r\n            kind: 0 /* FieldType.Default */,\r\n            value: 1 /* FieldType.Required */,\r\n            count: 0 /* FieldType.Default */,\r\n            min: 0 /* FieldType.Default */,\r\n            max: 0 /* FieldType.Default */,\r\n            stdDev: 0 /* FieldType.Default */\r\n        };\r\n        /**\r\n         * Metric type. Single measurement or the aggregated value.\r\n         */\r\n        this.kind = 0 /* DataPointType.Measurement */;\r\n    }\r\n    return DataPoint;\r\n}());\r\nexport { DataPoint };\r\n//# sourceMappingURL=DataPoint.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_COUNT, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { DataPoint } from \"./Common/DataPoint\";\r\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString } from \"./Common/DataSanitizer\";\r\nvar Metric = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the MetricTelemetry object\r\n     */\r\n    function Metric(logger, name, value, count, min, max, stdDev, properties, measurements) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            metrics: 1 /* FieldType.Required */,\r\n            properties: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        var dataPoint = new DataPoint();\r\n        dataPoint[_DYN_COUNT /* @min:%2ecount */] = count > 0 ? count : undefined;\r\n        dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n        dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n        dataPoint[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\r\n        dataPoint.value = value;\r\n        dataPoint.stdDev = isNaN(stdDev) || stdDev === null ? undefined : stdDev;\r\n        _self.metrics = [dataPoint];\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n    }\r\n    Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n    Metric.dataType = \"MetricData\";\r\n    return Metric;\r\n}());\r\nexport { Metric };\r\n//# sourceMappingURL=Metric.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, isString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { mathFloor, mathRound } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_TO_LOWER_CASE } from \"./__DynamicConstants\";\r\nvar strEmpty = \"\";\r\nexport function stringToBoolOrDefault(str, defaultValue) {\r\n    if (defaultValue === void 0) { defaultValue = false; }\r\n    if (str === undefined || str === null) {\r\n        return defaultValue;\r\n    }\r\n    return str.toString()[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === \"true\";\r\n}\r\n/**\r\n * Convert ms to c# time span format\r\n */\r\nexport function msToTimeSpan(totalms) {\r\n    if (isNaN(totalms) || totalms < 0) {\r\n        totalms = 0;\r\n    }\r\n    totalms = mathRound(totalms);\r\n    var ms = strEmpty + totalms % 1000;\r\n    var sec = strEmpty + mathFloor(totalms / 1000) % 60;\r\n    var min = strEmpty + mathFloor(totalms / (1000 * 60)) % 60;\r\n    var hour = strEmpty + mathFloor(totalms / (1000 * 60 * 60)) % 24;\r\n    var days = mathFloor(totalms / (1000 * 60 * 60 * 24));\r\n    ms = ms[_DYN_LENGTH /* @min:%2elength */] === 1 ? \"00\" + ms : ms[_DYN_LENGTH /* @min:%2elength */] === 2 ? \"0\" + ms : ms;\r\n    sec = sec[_DYN_LENGTH /* @min:%2elength */] < 2 ? \"0\" + sec : sec;\r\n    min = min[_DYN_LENGTH /* @min:%2elength */] < 2 ? \"0\" + min : min;\r\n    hour = hour[_DYN_LENGTH /* @min:%2elength */] < 2 ? \"0\" + hour : hour;\r\n    return (days > 0 ? days + \".\" : strEmpty) + hour + \":\" + min + \":\" + sec + \".\" + ms;\r\n}\r\nexport function getExtensionByName(extensions, identifier) {\r\n    var extension = null;\r\n    arrForEach(extensions, function (value) {\r\n        if (value.identifier === identifier) {\r\n            extension = value;\r\n            return -1;\r\n        }\r\n    });\r\n    return extension;\r\n}\r\nexport function isCrossOriginError(message, url, lineNumber, columnNumber, error) {\r\n    return !error && isString(message) && (message === \"Script error.\" || message === \"Script error\");\r\n}\r\n//# sourceMappingURL=HelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { msToTimeSpan } from \"../HelperFuncs\";\r\nimport { _DYN_DURATION, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { dataSanitizeId, dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString, dataSanitizeUrl } from \"./Common/DataSanitizer\";\r\nvar PageView = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageView(logger, name, url, durationMs, properties, measurements, id) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            name: 0 /* FieldType.Default */,\r\n            url: 0 /* FieldType.Default */,\r\n            duration: 0 /* FieldType.Default */,\r\n            properties: 0 /* FieldType.Default */,\r\n            measurements: 0 /* FieldType.Default */,\r\n            id: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        _self.id = dataSanitizeId(logger, id);\r\n        _self.url = dataSanitizeUrl(logger, url);\r\n        _self[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\r\n        if (!isNaN(durationMs)) {\r\n            _self[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(durationMs);\r\n        }\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n    }\r\n    PageView.envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\r\n    PageView.dataType = \"PageviewData\";\r\n    return PageView;\r\n}());\r\nexport { PageView };\r\n//# sourceMappingURL=PageView.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { msToTimeSpan } from \"../HelperFuncs\";\r\nimport { AjaxHelperParseDependencyPath } from \"../Util\";\r\nimport { _DYN_DURATION, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString, dataSanitizeUrl } from \"./Common/DataSanitizer\";\r\nvar RemoteDependencyData = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the RemoteDependencyData object\r\n     */\r\n    function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, correlationContext, properties, measurements) {\r\n        if (requestAPI === void 0) { requestAPI = \"Ajax\"; }\r\n        this.aiDataContract = {\r\n            id: 1 /* FieldType.Required */,\r\n            ver: 1 /* FieldType.Required */,\r\n            name: 0 /* FieldType.Default */,\r\n            resultCode: 0 /* FieldType.Default */,\r\n            duration: 0 /* FieldType.Default */,\r\n            success: 0 /* FieldType.Default */,\r\n            data: 0 /* FieldType.Default */,\r\n            target: 0 /* FieldType.Default */,\r\n            type: 0 /* FieldType.Default */,\r\n            properties: 0 /* FieldType.Default */,\r\n            measurements: 0 /* FieldType.Default */,\r\n            kind: 0 /* FieldType.Default */,\r\n            value: 0 /* FieldType.Default */,\r\n            count: 0 /* FieldType.Default */,\r\n            min: 0 /* FieldType.Default */,\r\n            max: 0 /* FieldType.Default */,\r\n            stdDev: 0 /* FieldType.Default */,\r\n            dependencyKind: 0 /* FieldType.Default */,\r\n            dependencySource: 0 /* FieldType.Default */,\r\n            commandName: 0 /* FieldType.Default */,\r\n            dependencyTypeName: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        _self.id = id;\r\n        _self[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(value);\r\n        _self.success = success;\r\n        _self.resultCode = resultCode + \"\";\r\n        _self.type = dataSanitizeString(logger, requestAPI);\r\n        var dependencyFields = AjaxHelperParseDependencyPath(logger, absoluteUrl, method, commandName);\r\n        _self.data = dataSanitizeUrl(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available\r\n        _self.target = dataSanitizeString(logger, dependencyFields.target);\r\n        if (correlationContext) {\r\n            _self.target = \"\".concat(_self.target, \" | \").concat(correlationContext);\r\n        }\r\n        _self[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, dependencyFields[_DYN_NAME /* @min:%2ename */]);\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n    }\r\n    RemoteDependencyData.envelopeType = \"Microsoft.ApplicationInsights.{0}.RemoteDependency\";\r\n    RemoteDependencyData.dataType = \"RemoteDependencyData\";\r\n    return RemoteDependencyData;\r\n}());\r\nexport { RemoteDependencyData };\r\n//# sourceMappingURL=RemoteDependencyData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_MEASUREMENTS, _DYN_MESSAGE, _DYN_PROPERTIES, _DYN_SEVERITY_LEVEL } from \"../__DynamicConstants\";\r\nimport { dataSanitizeMeasurements, dataSanitizeMessage, dataSanitizeProperties } from \"./Common/DataSanitizer\";\r\nvar Trace = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the TraceTelemetry object\r\n     */\r\n    function Trace(logger, message, severityLevel, properties, measurements) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            message: 1 /* FieldType.Required */,\r\n            severityLevel: 0 /* FieldType.Default */,\r\n            properties: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        message = message || strNotSpecified;\r\n        _self[_DYN_MESSAGE /* @min:%2emessage */] = dataSanitizeMessage(logger, message);\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n        if (severityLevel) {\r\n            _self[_DYN_SEVERITY_LEVEL /* @min:%2eseverityLevel */] = severityLevel;\r\n        }\r\n    }\r\n    Trace.envelopeType = \"Microsoft.ApplicationInsights.{0}.Message\";\r\n    Trace.dataType = \"MessageData\";\r\n    return Trace;\r\n}());\r\nexport { Trace };\r\n//# sourceMappingURL=Trace.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_DURATION, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString, dataSanitizeUrl } from \"./Common/DataSanitizer\";\r\nvar PageViewPerformance = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageViewPerformance(logger, name, url, unused, properties, measurements, cs4BaseData) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            name: 0 /* FieldType.Default */,\r\n            url: 0 /* FieldType.Default */,\r\n            duration: 0 /* FieldType.Default */,\r\n            perfTotal: 0 /* FieldType.Default */,\r\n            networkConnect: 0 /* FieldType.Default */,\r\n            sentRequest: 0 /* FieldType.Default */,\r\n            receivedResponse: 0 /* FieldType.Default */,\r\n            domProcessing: 0 /* FieldType.Default */,\r\n            properties: 0 /* FieldType.Default */,\r\n            measurements: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        _self.url = dataSanitizeUrl(logger, url);\r\n        _self[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n        if (cs4BaseData) {\r\n            _self.domProcessing = cs4BaseData.domProcessing;\r\n            _self[_DYN_DURATION /* @min:%2eduration */] = cs4BaseData[_DYN_DURATION /* @min:%2eduration */];\r\n            _self.networkConnect = cs4BaseData.networkConnect;\r\n            _self.perfTotal = cs4BaseData.perfTotal;\r\n            _self.receivedResponse = cs4BaseData.receivedResponse;\r\n            _self.sentRequest = cs4BaseData.sentRequest;\r\n        }\r\n    }\r\n    PageViewPerformance.envelopeType = \"Microsoft.ApplicationInsights.{0}.PageviewPerformance\";\r\n    PageViewPerformance.dataType = \"PageviewPerformanceData\";\r\n    return PageViewPerformance;\r\n}());\r\nexport { PageViewPerformance };\r\n//# sourceMappingURL=PageViewPerformance.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { isNullOrUndefined, objForEachKey, throwError, toISOString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strIkey, strNotSpecified } from \"./Constants\";\r\nimport { dataSanitizeString } from \"./Telemetry/Common/DataSanitizer\";\r\n/**\r\n * Create a telemetry item that the 1DS channel understands\r\n * @param item - domain specific properties; part B\r\n * @param baseType - telemetry item type. ie PageViewData\r\n * @param envelopeName - Name of the envelope, e.g., `Microsoft.ApplicationInsights.\\<instrumentation key\\>.PageView`.\r\n * @param customProperties - user defined custom properties; part C\r\n * @param systemProperties - system properties that are added to the context; part A\r\n * @returns ITelemetryItem that is sent to channel\r\n */\r\nexport function createTelemetryItem(item, baseType, envelopeName, logger, customProperties, systemProperties) {\r\n    envelopeName = dataSanitizeString(logger, envelopeName) || strNotSpecified;\r\n    if (isNullOrUndefined(item) ||\r\n        isNullOrUndefined(baseType) ||\r\n        isNullOrUndefined(envelopeName)) {\r\n        throwError(\"Input doesn't contain all required fields\");\r\n    }\r\n    var iKey = \"\";\r\n    if (item[strIkey]) {\r\n        iKey = item[strIkey];\r\n        delete item[strIkey];\r\n    }\r\n    var telemetryItem = {\r\n        name: envelopeName,\r\n        time: toISOString(new Date()),\r\n        iKey: iKey,\r\n        ext: systemProperties ? systemProperties : {},\r\n        tags: [],\r\n        data: {},\r\n        baseType: baseType,\r\n        baseData: item // Part B\r\n    };\r\n    // Part C\r\n    if (!isNullOrUndefined(customProperties)) {\r\n        objForEachKey(customProperties, function (prop, value) {\r\n            telemetryItem.data[prop] = value;\r\n        });\r\n    }\r\n    return telemetryItem;\r\n}\r\nvar TelemetryItemCreator = /** @class */ (function () {\r\n    function TelemetryItemCreator() {\r\n    }\r\n    /**\r\n     * Create a telemetry item that the 1DS channel understands\r\n     * @param item - domain specific properties; part B\r\n     * @param baseType - telemetry item type. ie PageViewData\r\n     * @param envelopeName - Name of the envelope (e.g., Microsoft.ApplicationInsights.[instrumentationKey].PageView).\r\n     * @param customProperties - user defined custom properties; part C\r\n     * @param systemProperties - system properties that are added to the context; part A\r\n     * @returns ITelemetryItem that is sent to channel\r\n     */\r\n    TelemetryItemCreator.create = createTelemetryItem;\r\n    return TelemetryItemCreator;\r\n}());\r\nexport { TelemetryItemCreator };\r\n//# sourceMappingURL=TelemetryItemCreator.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { getDocument, isFunction } from \"@microsoft/applicationinsights-core-js\";\r\nexport function createDomEvent(eventName) {\r\n    var event = null;\r\n    if (isFunction(Event)) { // Use Event constructor when available\r\n        event = new Event(eventName);\r\n    }\r\n    else { // Event has no constructor in IE\r\n        var doc = getDocument();\r\n        if (doc && doc.createEvent) {\r\n            event = doc.createEvent(\"Event\");\r\n            event.initEvent(eventName, true, true);\r\n        }\r\n    }\r\n    return event;\r\n}\r\n//# sourceMappingURL=DomHelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the\r\nexport { correlationIdSetPrefix, correlationIdGetPrefix, correlationIdCanIncludeCorrelationHeader, correlationIdGetCorrelationContext, correlationIdGetCorrelationContextValue, dateTimeUtilsNow, dateTimeUtilsDuration, isInternalApplicationInsightsEndpoint, createDistributedTraceContextFromTrace } from \"./Util\";\r\nexport { ThrottleMgr } from \"./ThrottleMgr\";\r\nexport { parseConnectionString, ConnectionStringParser } from \"./ConnectionStringParser\";\r\nexport { RequestHeaders } from \"./RequestResponseHeaders\";\r\nexport { DisabledPropertyName, ProcessLegacy, SampleRate, HttpMethod, DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH, strNotSpecified } from \"./Constants\";\r\nexport { Envelope } from \"./Telemetry/Common/Envelope\";\r\nexport { Event } from \"./Telemetry/Event\";\r\nexport { Exception } from \"./Telemetry/Exception\";\r\nexport { Metric } from \"./Telemetry/Metric\";\r\nexport { PageView } from \"./Telemetry/PageView\";\r\nexport { RemoteDependencyData } from \"./Telemetry/RemoteDependencyData\";\r\nexport { Trace } from \"./Telemetry/Trace\";\r\nexport { PageViewPerformance } from \"./Telemetry/PageViewPerformance\";\r\nexport { Data } from \"./Telemetry/Common/Data\";\r\nexport { SeverityLevel } from \"./Interfaces/Contracts/SeverityLevel\";\r\nexport { ConfigurationManager } from \"./Interfaces/IConfig\";\r\nexport { ContextTagKeys } from \"./Interfaces/Contracts/ContextTagKeys\";\r\nexport { dataSanitizeKeyAndAddUniqueness, dataSanitizeKey, dataSanitizeString, dataSanitizeUrl, dataSanitizeMessage, dataSanitizeException, dataSanitizeProperties, dataSanitizeMeasurements, dataSanitizeId, dataSanitizeInput, dsPadNumber } from \"./Telemetry/Common/DataSanitizer\";\r\nexport { TelemetryItemCreator, createTelemetryItem } from \"./TelemetryItemCreator\";\r\nexport { CtxTagKeys, Extensions } from \"./Interfaces/PartAExtensions\";\r\nexport { DistributedTracingModes, EventPersistence } from \"./Enums\";\r\nexport { stringToBoolOrDefault, msToTimeSpan, getExtensionByName, isCrossOriginError } from \"./HelperFuncs\";\r\nexport { isBeaconsSupported as isBeaconApiSupported, createTraceParent, parseTraceParent, isValidTraceId, isValidSpanId, isValidTraceParent, isSampledFlag, formatTraceParent, findW3cTraceParent, findAllScripts } from \"@microsoft/applicationinsights-core-js\";\r\nexport { createDomEvent } from \"./DomHelperFuncs\";\r\nexport { utlDisableStorage, utlEnableStorage, utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage, utlRemoveStorage, utlCanUseSessionStorage, utlGetSessionStorageKeys, utlGetSessionStorage, utlSetSessionStorage, utlRemoveSessionStorage, utlSetStoragePrefix } from \"./StorageHelperFuncs\";\r\nexport { urlParseUrl, urlGetAbsoluteUrl, urlGetPathName, urlGetCompleteUrl, urlParseHost, urlParseFullHost } from \"./UrlHelperFuncs\";\r\nexport { createOfflineListener } from \"./Offline\";\r\nexport var PropertiesPluginIdentifier = \"AppInsightsPropertiesPlugin\";\r\nexport var BreezeChannelIdentifier = \"AppInsightsChannelPlugin\";\r\nexport var AnalyticsPluginIdentifier = \"ApplicationInsightsAnalytics\";\r\n//# sourceMappingURL=applicationinsights-common.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES5 which can result in a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_TO_STRING = \"toString\"; // Count: 4\r\nexport var _DYN_IS_STORAGE_USE_DISAB0 = \"isStorageUseDisabled\"; // Count: 3\r\nexport var _DYN__ADD_HOOK = \"_addHook\"; // Count: 6\r\nexport var _DYN_CORE = \"core\"; // Count: 7\r\nexport var _DYN_DATA_TYPE = \"dataType\"; // Count: 8\r\nexport var _DYN_ENVELOPE_TYPE = \"envelopeType\"; // Count: 7\r\nexport var _DYN_DIAG_LOG = \"diagLog\"; // Count: 13\r\nexport var _DYN_TRACK = \"track\"; // Count: 7\r\nexport var _DYN_TRACK_PAGE_VIEW = \"trackPageView\"; // Count: 4\r\nexport var _DYN_TRACK_PREVIOUS_PAGE_1 = \"trackPreviousPageVisit\"; // Count: 3\r\nexport var _DYN_SEND_PAGE_VIEW_INTER2 = \"sendPageViewInternal\"; // Count: 7\r\nexport var _DYN_START_TIME = \"startTime\"; // Count: 6\r\nexport var _DYN_PROPERTIES = \"properties\"; // Count: 5\r\nexport var _DYN_DURATION = \"duration\"; // Count: 12\r\nexport var _DYN_SEND_PAGE_VIEW_PERFO3 = \"sendPageViewPerformanceInternal\"; // Count: 3\r\nexport var _DYN_POPULATE_PAGE_VIEW_P4 = \"populatePageViewPerformanceEvent\"; // Count: 3\r\nexport var _DYN_HREF = \"href\"; // Count: 6\r\nexport var _DYN_SEND_EXCEPTION_INTER5 = \"sendExceptionInternal\"; // Count: 2\r\nexport var _DYN_ERROR = \"error\"; // Count: 5\r\nexport var _DYN_LINE_NUMBER = \"lineNumber\"; // Count: 4\r\nexport var _DYN_COLUMN_NUMBER = \"columnNumber\"; // Count: 5\r\nexport var _DYN__CREATE_AUTO_EXCEPTI6 = \"CreateAutoException\"; // Count: 3\r\nexport var _DYN_ADD_TELEMETRY_INITIA7 = \"addTelemetryInitializer\"; // Count: 4\r\nexport var _DYN_OVERRIDE_PAGE_VIEW_D8 = \"overridePageViewDuration\"; // Count: 2\r\nexport var _DYN_AUTO_EXCEPTION_INSTR9 = \"autoExceptionInstrumented\"; // Count: 3\r\nexport var _DYN_AUTO_TRACK_PAGE_VISI10 = \"autoTrackPageVisitTime\"; // Count: 2\r\nexport var _DYN_IS_BROWSER_LINK_TRAC11 = \"isBrowserLinkTrackingEnabled\"; // Count: 2\r\nexport var _DYN_LENGTH = \"length\"; // Count: 5\r\nexport var _DYN_ENABLE_AUTO_ROUTE_TR12 = \"enableAutoRouteTracking\"; // Count: 2\r\nexport var _DYN_ENABLE_UNHANDLED_PRO13 = \"enableUnhandledPromiseRejectionTracking\"; // Count: 2\r\nexport var _DYN_AUTO_UNHANDLED_PROMI14 = \"autoUnhandledPromiseInstrumented\"; // Count: 3\r\nexport var _DYN_GET_ENTRIES_BY_TYPE = \"getEntriesByType\"; // Count: 5\r\nexport var _DYN_IS_PERFORMANCE_TIMIN15 = \"isPerformanceTimingSupported\"; // Count: 2\r\nexport var _DYN_GET_PERFORMANCE_TIMI16 = \"getPerformanceTiming\"; // Count: 2\r\nexport var _DYN_NAVIGATION_START = \"navigationStart\"; // Count: 4\r\nexport var _DYN_SHOULD_COLLECT_DURAT17 = \"shouldCollectDuration\"; // Count: 3\r\nexport var _DYN_IS_PERFORMANCE_TIMIN18 = \"isPerformanceTimingDataReady\"; // Count: 2\r\nexport var _DYN_RESPONSE_START = \"responseStart\"; // Count: 5\r\nexport var _DYN_REQUEST_START = \"requestStart\"; // Count: 3\r\nexport var _DYN_LOAD_EVENT_END = \"loadEventEnd\"; // Count: 4\r\nexport var _DYN_RESPONSE_END = \"responseEnd\"; // Count: 5\r\nexport var _DYN_CONNECT_END = \"connectEnd\"; // Count: 4\r\n//# sourceMappingURL=__DynamicConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, arrForEach, dumpObj, getDocument, getExceptionName, getLocation, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getPerformance, isUndefined, isWebWorker, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI16, _DYN_HREF, _DYN_IS_PERFORMANCE_TIMIN15, _DYN_IS_PERFORMANCE_TIMIN18, _DYN_LENGTH, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_SHOULD_COLLECT_DURAT17, _DYN_START_TIME, _DYN_TRACK_PAGE_VIEW } from \"../../__DynamicConstants\";\r\n/**\r\n * Class encapsulates sending page views and page view performance telemetry.\r\n */\r\nvar PageViewManager = /** @class */ (function () {\r\n    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {\r\n        dynamicProto(PageViewManager, this, function (_self) {\r\n            var queueTimer = null;\r\n            var itemQueue = [];\r\n            var pageViewPerformanceSent = false;\r\n            var firstPageViewSent = false;\r\n            var _logger;\r\n            if (core) {\r\n                _logger = core.logger;\r\n            }\r\n            function _flushChannels(isAsync) {\r\n                if (core) {\r\n                    core.flush(isAsync, function () {\r\n                        // Event flushed, callback added to prevent promise creation\r\n                    });\r\n                }\r\n            }\r\n            function _startTimer() {\r\n                if (!queueTimer) {\r\n                    queueTimer = scheduleTimeout((function () {\r\n                        queueTimer = null;\r\n                        var allItems = itemQueue.slice(0);\r\n                        var doFlush = false;\r\n                        itemQueue = [];\r\n                        arrForEach(allItems, function (item) {\r\n                            if (!item()) {\r\n                                // Not processed so rescheduled\r\n                                itemQueue.push(item);\r\n                            }\r\n                            else {\r\n                                doFlush = true;\r\n                            }\r\n                        });\r\n                        if (itemQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                            _startTimer();\r\n                        }\r\n                        if (doFlush) {\r\n                            // We process at least one item so flush the queue\r\n                            _flushChannels(true);\r\n                        }\r\n                    }), 100);\r\n                }\r\n            }\r\n            function _addQueue(cb) {\r\n                itemQueue.push(cb);\r\n                _startTimer();\r\n            }\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                var name = pageView.name;\r\n                if (isNullOrUndefined(name) || typeof name !== \"string\") {\r\n                    var doc = getDocument();\r\n                    name = pageView.name = doc && doc.title || \"\";\r\n                }\r\n                var uri = pageView.uri;\r\n                if (isNullOrUndefined(uri) || typeof uri !== \"string\") {\r\n                    var location_1 = getLocation();\r\n                    uri = pageView.uri = location_1 && location_1[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                }\r\n                if (!firstPageViewSent) {\r\n                    var perf = getPerformance();\r\n                    // Access the performance timing object\r\n                    var navigationEntries = (perf && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */] && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\"));\r\n                    // Edge Case the navigation Entries may return an empty array and the timeOrigin is not supported on IE\r\n                    if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {\r\n                        // Get the value of loadEventStart\r\n                        var loadEventStart = navigationEntries[0].loadEventStart;\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(perf.timeOrigin + loadEventStart);\r\n                    }\r\n                    else {\r\n                        // calculate the start time manually\r\n                        var duration_1 = ((customProperties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration_1);\r\n                    }\r\n                    firstPageViewSent = true;\r\n                }\r\n                // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\r\n                // do not provide the duration, set duration to undefined\r\n                // Also this is case 4\r\n                if (!pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN15 /* @min:%2eisPerformanceTimingSupported */]()) {\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    if (!isWebWorker()) {\r\n                        // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 25 /* _eInternalMessageId.NavigationTimingNotSupported */, \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n                    }\r\n                    return;\r\n                }\r\n                var pageViewSent = false;\r\n                var customDuration;\r\n                // if the performance timing is supported by the browser, calculate the custom duration\r\n                var start = pageViewPerformanceManager[_DYN_GET_PERFORMANCE_TIMI16 /* @min:%2egetPerformanceTiming */]()[_DYN_NAVIGATION_START /* @min:%2enavigationStart */];\r\n                if (start > 0) {\r\n                    customDuration = dateTimeUtilsDuration(start, +new Date);\r\n                    if (!pageViewPerformanceManager[_DYN_SHOULD_COLLECT_DURAT17 /* @min:%2eshouldCollectDuration */](customDuration)) {\r\n                        customDuration = undefined;\r\n                    }\r\n                }\r\n                // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\r\n                // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\r\n                var duration;\r\n                if (!isNullOrUndefined(customProperties) &&\r\n                    !isNullOrUndefined(customProperties[_DYN_DURATION /* @min:%2eduration */])) {\r\n                    duration = customProperties[_DYN_DURATION /* @min:%2eduration */];\r\n                }\r\n                if (overridePageViewDuration || !isNaN(duration)) {\r\n                    if (isNaN(duration)) {\r\n                        // case 3\r\n                        if (!customProperties) {\r\n                            customProperties = {};\r\n                        }\r\n                        customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                    }\r\n                    // case 2\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    pageViewSent = true;\r\n                }\r\n                // now try to send the page view performance telemetry\r\n                var maxDurationLimit = 60000;\r\n                if (!customProperties) {\r\n                    customProperties = {};\r\n                }\r\n                // Queue the event for processing\r\n                _addQueue(function () {\r\n                    var processed = false;\r\n                    try {\r\n                        if (pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN18 /* @min:%2eisPerformanceTimingDataReady */]()) {\r\n                            processed = true;\r\n                            var pageViewPerformance = {\r\n                                name: name,\r\n                                uri: uri\r\n                            };\r\n                            pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](pageViewPerformance);\r\n                            if (!pageViewPerformance.isValid && !pageViewSent) {\r\n                                // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                                // That's the best value we can get that makes sense.\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                            else {\r\n                                if (!pageViewSent) {\r\n                                    customProperties[_DYN_DURATION /* @min:%2eduration */] = pageViewPerformance.durationMs;\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                                }\r\n                                if (!pageViewPerformanceSent) {\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](pageViewPerformance, customProperties);\r\n                                    pageViewPerformanceSent = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (start > 0 && dateTimeUtilsDuration(start, +new Date) > maxDurationLimit) {\r\n                            // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\r\n                            // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\r\n                            processed = true;\r\n                            if (!pageViewSent) {\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = maxDurationLimit;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 38 /* _eInternalMessageId.TrackPVFailedCalc */, \"trackPageView failed on page load calculation: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                    return processed;\r\n                });\r\n            };\r\n            _self.teardown = function (unloadCtx, unloadState) {\r\n                if (queueTimer) {\r\n                    queueTimer.cancel();\r\n                    queueTimer = null;\r\n                    var allItems = itemQueue.slice(0);\r\n                    var doFlush_1 = false;\r\n                    itemQueue = [];\r\n                    arrForEach(allItems, function (item) {\r\n                        if (item()) {\r\n                            doFlush_1 = true;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Currently supported cases:\r\n     * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n     *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n     * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n     * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported).\r\n     * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration.\r\n     *\r\n     * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n     */\r\n    PageViewManager.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewManager.prototype.teardown = function (unloadCtx, unloadState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageViewManager;\r\n}());\r\nexport { PageViewManager };\r\n//# sourceMappingURL=PageViewManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration, msToTimeSpan } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, getNavigator, getPerformance, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { mathFloor, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_CONNECT_END, _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI16, _DYN_IS_PERFORMANCE_TIMIN15, _DYN_IS_PERFORMANCE_TIMIN18, _DYN_LENGTH, _DYN_LOAD_EVENT_END, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_REQUEST_START, _DYN_RESPONSE_END, _DYN_RESPONSE_START, _DYN_SHOULD_COLLECT_DURAT17, _DYN_START_TIME } from \"../../__DynamicConstants\";\r\nvar MAX_DURATION_ALLOWED = 3600000; // 1h\r\nvar botAgentNames = [\"googlebot\", \"adsbot-google\", \"apis-google\", \"mediapartners-google\"];\r\nfunction _isPerformanceTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && !!perf.timing;\r\n}\r\nfunction _isPerformanceNavigationTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && perf.getEntriesByType && perf.getEntriesByType(\"navigation\")[_DYN_LENGTH /* @min:%2elength */] > 0;\r\n}\r\nfunction _isPerformanceTimingDataReady() {\r\n    var perf = getPerformance();\r\n    var timing = perf ? perf.timing : 0;\r\n    return timing\r\n        && timing.domainLookupStart > 0\r\n        && timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */] > 0\r\n        && timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */] > 0\r\n        && timing[_DYN_REQUEST_START /* @min:%2erequestStart */] > 0\r\n        && timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */] > 0\r\n        && timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */] > 0\r\n        && timing[_DYN_CONNECT_END /* @min:%2econnectEnd */] > 0\r\n        && timing.domLoading > 0;\r\n}\r\nfunction _getPerformanceTiming() {\r\n    if (_isPerformanceTimingSupported()) {\r\n        return getPerformance().timing;\r\n    }\r\n    return null;\r\n}\r\nfunction _getPerformanceNavigationTiming() {\r\n    if (_isPerformanceNavigationTimingSupported()) {\r\n        return getPerformance()[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\")[0];\r\n    }\r\n    return null;\r\n}\r\n/**\r\n* This method tells if given durations should be excluded from collection.\r\n*/\r\nfunction _shouldCollectDuration() {\r\n    var durations = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        durations[_i] = arguments[_i];\r\n    }\r\n    var _navigator = getNavigator() || {};\r\n    // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\r\n    var userAgent = _navigator.userAgent;\r\n    var isGoogleBot = false;\r\n    if (userAgent) {\r\n        for (var i = 0; i < botAgentNames[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            isGoogleBot = isGoogleBot || strIndexOf(userAgent.toLowerCase(), botAgentNames[i]) !== -1;\r\n        }\r\n    }\r\n    if (isGoogleBot) {\r\n        // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\r\n        return false;\r\n    }\r\n    else {\r\n        // for other page views, don't report if it's outside of a reasonable range\r\n        for (var i = 0; i < durations[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Class encapsulates sending page view performance telemetry.\r\n */\r\nvar PageViewPerformanceManager = /** @class */ (function () {\r\n    function PageViewPerformanceManager(core) {\r\n        var _logger = safeGetLogger(core);\r\n        dynamicProto(PageViewPerformanceManager, this, function (_self) {\r\n            _self[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */] = function (pageViewPerformance) {\r\n                pageViewPerformance.isValid = false;\r\n                /*\r\n                 * http://www.w3.org/TR/navigation-timing/#processing-model\r\n                 *  |-navigationStart\r\n                 *  |             |-connectEnd\r\n                 *  |             ||-requestStart\r\n                 *  |             ||             |-responseStart\r\n                 *  |             ||             |              |-responseEnd\r\n                 *  |             ||             |              |\r\n                 *  |             ||             |              |         |-loadEventEnd\r\n                 *  |---network---||---request---|---response---|---dom---|\r\n                 *  |--------------------------total----------------------|\r\n                 *\r\n                 *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration\r\n                 *  network = Redirect time + App Cache + DNS lookup time + TCP connection time\r\n                 *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time\r\n                 *  response = Response time\r\n                 *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info\r\n                 *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing\r\n                 *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading\r\n                 */\r\n                var navigationTiming = _getPerformanceNavigationTiming();\r\n                var timing = _getPerformanceTiming();\r\n                var total = 0;\r\n                var network = 0;\r\n                var request = 0;\r\n                var response = 0;\r\n                var dom = 0;\r\n                if (navigationTiming || timing) {\r\n                    if (navigationTiming) {\r\n                        total = navigationTiming[_DYN_DURATION /* @min:%2eduration */];\r\n                        /**\r\n                         * support both cases:\r\n                         * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming\r\n                         * - for older browsers where the startTime is not zero\r\n                         */\r\n                        network = navigationTiming[_DYN_START_TIME /* @min:%2estartTime */] === 0 ? navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */] : dateTimeUtilsDuration(navigationTiming[_DYN_START_TIME /* @min:%2estartTime */], navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */], navigationTiming[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    else {\r\n                        total = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                        network = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(timing.requestStart, timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */], timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(timing.responseEnd, timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    if (total === 0) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 10 /* _eInternalMessageId.ErrorPVCalc */, \"error calculating page view performance.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (!_self[_DYN_SHOULD_COLLECT_DURAT17 /* @min:%2eshouldCollectDuration */](total, network, request, response, dom)) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 45 /* _eInternalMessageId.InvalidDurationValue */, \"Invalid page load duration value. Browser perf data won't be sent.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (total < mathFloor(network) + mathFloor(request) + mathFloor(response) + mathFloor(dom)) {\r\n                        // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\r\n                        // in this case, don't report client performance from this page\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 8 /* _eInternalMessageId.ClientPerformanceMathError */, \"client performance math error.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else {\r\n                        pageViewPerformance.durationMs = total;\r\n                        // // convert to timespans\r\n                        pageViewPerformance.perfTotal = pageViewPerformance[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(total);\r\n                        pageViewPerformance.networkConnect = msToTimeSpan(network);\r\n                        pageViewPerformance.sentRequest = msToTimeSpan(request);\r\n                        pageViewPerformance.receivedResponse = msToTimeSpan(response);\r\n                        pageViewPerformance.domProcessing = msToTimeSpan(dom);\r\n                        pageViewPerformance.isValid = true;\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_GET_PERFORMANCE_TIMI16 /* @min:%2egetPerformanceTiming */] = _getPerformanceTiming;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN15 /* @min:%2eisPerformanceTimingSupported */] = _isPerformanceTimingSupported;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN18 /* @min:%2eisPerformanceTimingDataReady */] = _isPerformanceTimingDataReady;\r\n            _self[_DYN_SHOULD_COLLECT_DURAT17 /* @min:%2eshouldCollectDuration */] = _shouldCollectDuration;\r\n        });\r\n    }\r\n    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n    * Returns true is window performance timing API is supported, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n    * Returns true if ready, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * This method tells if given durations should be excluded from collection.\r\n    */\r\n    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\r\n        var durations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            durations[_i] = arguments[_i];\r\n        }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    return PageViewPerformanceManager;\r\n}());\r\nexport { PageViewPerformanceManager };\r\n//# sourceMappingURL=PageViewPerformanceManager.js.map","/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, utlDisableStorage, utlEnableStorage, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, cfgDfBoolean, cfgDfMerge, cfgDfSet, cfgDfString, cfgDfValidate, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, findAllScripts, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, onConfigChange, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isArray, isError, objDeepFreeze, objDefine, scheduleTimeout, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ADD_TELEMETRY_INITIA7, _DYN_AUTO_EXCEPTION_INSTR9, _DYN_AUTO_TRACK_PAGE_VISI10, _DYN_AUTO_UNHANDLED_PROMI14, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DURATION, _DYN_ENABLE_AUTO_ROUTE_TR12, _DYN_ENABLE_UNHANDLED_PRO13, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC11, _DYN_IS_STORAGE_USE_DISAB0, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_OVERRIDE_PAGE_VIEW_D8, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_EXCEPTION_INTER5, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_START_TIME, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_1, _DYN__ADD_HOOK, _DYN__CREATE_AUTO_EXCEPTI6 } from \"../__DynamicConstants\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { Timing } from \"./Timing\";\r\nvar strEvent = \"event\";\r\nfunction _dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n    }\r\n}\r\nfunction _getReason(error) {\r\n    if (error && error.reason) {\r\n        var reason = error.reason;\r\n        if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\r\n            return reason[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        }\r\n        return dumpObj(reason);\r\n    }\r\n    // Pass the original object down which will eventually get evaluated for any message or description\r\n    return error || \"\";\r\n}\r\nvar MinMilliSeconds = 60000;\r\nvar defaultValues = objDeepFreeze((_a = {\r\n        sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1000),\r\n        sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1000),\r\n        disableExceptionTracking: cfgDfBoolean()\r\n    },\r\n    _a[_DYN_AUTO_TRACK_PAGE_VISI10 /* @min:autoTrackPageVisitTime */] = cfgDfBoolean(),\r\n    _a[_DYN_OVERRIDE_PAGE_VIEW_D8 /* @min:overridePageViewDuration */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_UNHANDLED_PRO13 /* @min:enableUnhandledPromiseRejectionTracking */] = cfgDfBoolean(),\r\n    _a[_DYN_AUTO_UNHANDLED_PROMI14 /* @min:autoUnhandledPromiseInstrumented */] = false,\r\n    _a.samplingPercentage = cfgDfValidate(_chkSampling, 100),\r\n    _a[_DYN_IS_STORAGE_USE_DISAB0 /* @min:isStorageUseDisabled */] = cfgDfBoolean(),\r\n    _a[_DYN_IS_BROWSER_LINK_TRAC11 /* @min:isBrowserLinkTrackingEnabled */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_AUTO_ROUTE_TR12 /* @min:enableAutoRouteTracking */] = cfgDfBoolean(),\r\n    _a.namePrefix = cfgDfString(),\r\n    _a.enableDebug = cfgDfBoolean(),\r\n    _a.disableFlushOnBeforeUnload = cfgDfBoolean(),\r\n    _a.disableFlushOnUnload = cfgDfBoolean(false, \"disableFlushOnBeforeUnload\"),\r\n    _a.expCfg = cfgDfMerge({ inclScripts: false, expLog: undefined, maxLogs: 50 }),\r\n    _a));\r\nfunction _chkConfigMilliseconds(value, defValue) {\r\n    value = value || defValue;\r\n    if (value < MinMilliSeconds) {\r\n        value = MinMilliSeconds;\r\n    }\r\n    return +value;\r\n}\r\nfunction _chkSampling(value) {\r\n    return !isNaN(value) && value > 0 && value <= 100;\r\n}\r\nfunction _updateStorageUsage(extConfig) {\r\n    // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\r\n    // reset based if the configuration option is provided\r\n    if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */])) {\r\n        if (extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */]) {\r\n            utlDisableStorage();\r\n        }\r\n        else {\r\n            utlEnableStorage();\r\n        }\r\n    }\r\n}\r\nvar AnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(AnalyticsPlugin, _super);\r\n    function AnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\r\n        _this.priority = 180; // take from reserved priority range 100- 200\r\n        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        var _eventTracking;\r\n        var _pageTracking;\r\n        var _pageViewManager;\r\n        var _pageViewPerformanceManager;\r\n        var _pageVisitTimeManager;\r\n        var _preInitTelemetryInitializers;\r\n        var _isBrowserLinkTrackingEnabled;\r\n        var _browserLinkInitializerAdded;\r\n        var _enableAutoRouteTracking;\r\n        var _historyListenerAdded;\r\n        var _disableExceptionTracking;\r\n        var _autoExceptionInstrumented;\r\n        var _enableUnhandledPromiseRejectionTracking;\r\n        var _autoUnhandledPromiseInstrumented;\r\n        var _extConfig;\r\n        var _autoTrackPageVisitTime;\r\n        var _expCfg;\r\n        // Counts number of trackAjax invocations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        var _trackAjaxAttempts = 0;\r\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n        var _prevUri; // Assigned in the constructor\r\n        var _currUri;\r\n        var _evtNamespace;\r\n        // For testing error hooks only\r\n        var _errorHookCnt;\r\n        dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\r\n            var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\r\n            _initDefaults();\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self.trackEvent = function (event, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n             * @param name - A string that identifies this event uniquely within the document.\r\n             */\r\n            _self.startTrackEvent = function (name) {\r\n                try {\r\n                    _eventTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Log an extended event that you started timing with `startTrackEvent`.\r\n             * @param name - The string you used to identify this event in `startTrackEvent`.\r\n             * @param properties - map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n             * @param measurements - map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackEvent = function (name, properties, measurements) {\r\n                try {\r\n                    _eventTracking.stop(name, undefined, properties, measurements);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a diagnostic message\r\n             * @param trace - the trace message\r\n             * @param customProperties - Additional custom properties to include in the event\r\n             */\r\n            _self.trackTrace = function (trace, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a numeric value that is not associated with a specific event. Typically\r\n             * used to send regular reports of performance indicators. To send single measurement, just\r\n             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n             * and sending the resulting average at intervals\r\n             * @param metric - input object argument. Only name and average are mandatory.\r\n             * @param } customProperties additional data used to filter metrics in the\r\n             * portal. Defaults to empty.\r\n             */\r\n            _self.trackMetric = function (metric, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Logs that a page or other item was viewed.\r\n             * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n             */\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                try {\r\n                    var inPv = pageView || {};\r\n                    _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n             * @param pageView - Page view item to be sent\r\n             * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n             * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\r\n                var doc = getDocument();\r\n                if (doc) {\r\n                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\r\n                }\r\n                if (isNullOrUndefined(pageView[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                    // calculate the start time manually\r\n                    var duration = ((properties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                    pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration);\r\n                }\r\n                var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                // reset ajaxes counter\r\n                _trackAjaxAttempts = 0;\r\n            };\r\n            /**\r\n             * @ignore INTERNAL ONLY\r\n             * @param pageViewPerformance\r\n             * @param properties\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\r\n                var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Send browser performance metrics.\r\n             * @param pageViewPerformance\r\n             * @param customProperties\r\n             */\r\n            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n                var inPvp = pageViewPerformance || {};\r\n                try {\r\n                    _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\r\n                    _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n             * and send the event.\r\n             * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n             */\r\n            _self.startTrackPage = function (name) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    _pageTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n             * @param name - The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param url - String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n             * @param properties - map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             * @param measurements - map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackPage = function (name, url, properties, measurement) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    if (typeof url !== \"string\") {\r\n                        var loc = getLocation();\r\n                        url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    _pageTracking.stop(name, url, properties, measurement);\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](name, url);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n            * @ignore INTERNAL ONLY\r\n            * @param exception\r\n            * @param properties\r\n            * @param systemProperties\r\n            */\r\n            _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\r\n                // Adding additional edge cases to handle\r\n                // - Not passing anything (null / undefined)\r\n                var theError = (exception && (exception.exception || exception[_DYN_ERROR /* @min:%2eerror */])) ||\r\n                    // - Handle someone calling trackException based of v1 API where the exception was the Error\r\n                    isError(exception) && exception ||\r\n                    // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\r\n                    //   is preserved and does not list ApplicationInsights code as the source\r\n                    { name: (exception && typeof exception), message: exception || strNotSpecified };\r\n                // If no exception object was passed assign to an empty object to avoid internal exceptions\r\n                exception = exception || {};\r\n                var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception[_DYN_PROPERTIES /* @min:%2eproperties */] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n                var doc = getDocument();\r\n                if (doc && (_expCfg === null || _expCfg === void 0 ? void 0 : _expCfg.inclScripts)) {\r\n                    var scriptsInfo = findAllScripts(doc);\r\n                    exceptionPartB[_DYN_PROPERTIES /* @min:%2eproperties */][\"exceptionScripts\"] = JSON.stringify(scriptsInfo);\r\n                }\r\n                if (_expCfg === null || _expCfg === void 0 ? void 0 : _expCfg.expLog) {\r\n                    var logs = _expCfg.expLog();\r\n                    if (logs && logs.logs && isArray(logs.logs)) {\r\n                        exceptionPartB[_DYN_PROPERTIES /* @min:%2eproperties */][\"exceptionLog\"] = logs.logs.slice(0, _expCfg.maxLogs).join(\"\\n\");\r\n                    }\r\n                }\r\n                var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Log an exception you have caught.\r\n             *\r\n             * @param exception -   Object which contains exception to be sent\r\n             * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             *\r\n             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n             */\r\n            _self.trackException = function (exception, customProperties) {\r\n                if (exception && !exception.exception && exception[_DYN_ERROR /* @min:%2eerror */]) {\r\n                    exception.exception = exception[_DYN_ERROR /* @min:%2eerror */];\r\n                }\r\n                try {\r\n                    _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */](exception, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Custom error handler for Application Insights Analytics\r\n             * @param exception\r\n             */\r\n            _self._onerror = function (exception) {\r\n                var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\r\n                var evt = exception && exception.evt;\r\n                try {\r\n                    if (!evt) {\r\n                        var _window = getWindow();\r\n                        if (_window) {\r\n                            evt = _window[strEvent];\r\n                        }\r\n                    }\r\n                    var url = (exception && exception.url) || (getDocument() || {}).URL;\r\n                    // If no error source is provided assume the default window.onerror handler\r\n                    var errorSrc = exception.errorSrc || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\r\n                    var properties = {\r\n                        errorSrc: errorSrc,\r\n                        url: url,\r\n                        lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\r\n                        columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\r\n                        message: exception.message\r\n                    };\r\n                    if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\r\n                        _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\r\n                    }\r\n                    else {\r\n                        if (!exception.errorSrc) {\r\n                            exception.errorSrc = errorSrc;\r\n                        }\r\n                        _self.trackException({ exception: exception, severityLevel: 3 /* eSeverityLevel.Error */ }, properties);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    var errorString = error ? (error.name + \", \" + error.message) : \"null\";\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \"\r\n                        + getExceptionName(e), { exception: dumpObj(e), errorString: errorString });\r\n                }\r\n            };\r\n            _self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\r\n                if (_self[_DYN_CORE /* @min:%2ecore */]) {\r\n                    // Just add to the core\r\n                    return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\r\n                }\r\n                // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\r\n                if (!_preInitTelemetryInitializers) {\r\n                    _preInitTelemetryInitializers = [];\r\n                }\r\n                _preInitTelemetryInitializers.push(telemetryInitializer);\r\n            };\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    return;\r\n                }\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                try {\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                    if (_preInitTelemetryInitializers) {\r\n                        arrForEach(_preInitTelemetryInitializers, function (initializer) {\r\n                            core[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](initializer);\r\n                        });\r\n                        _preInitTelemetryInitializers = null;\r\n                    }\r\n                    _populateDefaults(config);\r\n                    _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\r\n                    _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n                    _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\r\n                    _eventTracking.action =\r\n                        function (name, url, duration, properties, measurements) {\r\n                            if (!properties) {\r\n                                properties = {};\r\n                            }\r\n                            if (!measurements) {\r\n                                measurements = {};\r\n                            }\r\n                            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                            _self.trackEvent({ name: name, properties: properties, measurements: measurements });\r\n                        };\r\n                    // initialize page view timing\r\n                    _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\r\n                    _pageTracking.action = function (name, url, duration, properties, measurements) {\r\n                        // duration must be a custom property in order for the collector to extract it\r\n                        if (isNullOrUndefined(properties)) {\r\n                            properties = {};\r\n                        }\r\n                        properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                        var pageViewItem = {\r\n                            name: name,\r\n                            uri: url,\r\n                            properties: properties,\r\n                            measurements: measurements\r\n                        };\r\n                        _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\r\n                    };\r\n                    if (hasWindow()) {\r\n                        _updateExceptionTracking();\r\n                        _updateLocationChange();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // resetting the initialized state because of failure\r\n                    _self.setInitialized(false);\r\n                    throw e;\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\r\n                // Just register to remove all events associated with this namespace\r\n                eventOff(window, null, null, _evtNamespace);\r\n                _initDefaults();\r\n            };\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_errorHookCnt, _autoExceptionInstrumented];\r\n            };\r\n            function _populateDefaults(config) {\r\n                // it is used for 1DS as well, so config type should be IConfiguration only\r\n                var identifier = _self.identifier;\r\n                var core = _self[_DYN_CORE /* @min:%2ecore */];\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extConfig = ctx.getExtCfg(identifier, defaultValues);\r\n                    // make sure auto exception is instrumented only once and it won't be overriden by the following config changes\r\n                    _autoExceptionInstrumented = _autoExceptionInstrumented || config[_DYN_AUTO_EXCEPTION_INSTR9 /* @min:%2eautoExceptionInstrumented */] || _extConfig[_DYN_AUTO_EXCEPTION_INSTR9 /* @min:%2eautoExceptionInstrumented */];\r\n                    _expCfg = _extConfig.expCfg;\r\n                    _autoTrackPageVisitTime = _extConfig[_DYN_AUTO_TRACK_PAGE_VISI10 /* @min:%2eautoTrackPageVisitTime */];\r\n                    if (config.storagePrefix) {\r\n                        utlSetStoragePrefix(config.storagePrefix);\r\n                    }\r\n                    _updateStorageUsage(_extConfig);\r\n                    // _updateBrowserLinkTracking\r\n                    _isBrowserLinkTrackingEnabled = _extConfig[_DYN_IS_BROWSER_LINK_TRAC11 /* @min:%2eisBrowserLinkTrackingEnabled */];\r\n                    _addDefaultTelemetryInitializers();\r\n                }));\r\n            }\r\n            /**\r\n             * Log a page visit time\r\n             * @param pageName - Name of page\r\n             * @param pageVisitDuration - Duration of visit to the page in milliseconds\r\n             */\r\n            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageUrl };\r\n                _self.trackMetric({\r\n                    name: \"PageVisitTime\",\r\n                    average: pageVisitTime,\r\n                    max: pageVisitTime,\r\n                    min: pageVisitTime,\r\n                    sampleCount: 1\r\n                }, properties);\r\n            }\r\n            function _addDefaultTelemetryInitializers() {\r\n                if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\r\n                    var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\r\n                    var dropBrowserLinkRequests = function (envelope) {\r\n                        if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n                            var remoteData = envelope.baseData;\r\n                            if (remoteData) {\r\n                                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                                    if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    };\r\n                    _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](_self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests));\r\n                    _browserLinkInitializerAdded = true;\r\n                }\r\n            }\r\n            function _sendCORSException(exception, properties) {\r\n                var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            }\r\n            function _updateExceptionTracking() {\r\n                var _window = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _disableExceptionTracking = _extConfig.disableExceptionTracking;\r\n                    if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig[_DYN_AUTO_EXCEPTION_INSTR9 /* @min:%2eautoExceptionInstrumented */]) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onerror\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\r\n                                if (!_disableExceptionTracking && callDetails.rslt !== true) {\r\n                                    _self._onerror(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _errorHookCnt++;\r\n                        _autoExceptionInstrumented = true;\r\n                    }\r\n                }));\r\n                _addUnhandledPromiseRejectionTracking(_window, locn);\r\n            }\r\n            function _updateLocationChange() {\r\n                var win = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableAutoRouteTracking = _extConfig[_DYN_ENABLE_AUTO_ROUTE_TR12 /* @min:%2eenableAutoRouteTracking */] === true;\r\n                    /**\r\n                     * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n                     */\r\n                    if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {\r\n                        var _history = getHistory();\r\n                        if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\r\n                            _addHistoryListener(win, _history, locn);\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                if (!distributedTraceCtx) {\r\n                    // Fallback when using an older Core and PropertiesPlugin\r\n                    var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                    if (properties) {\r\n                        var context = properties.plugin.context;\r\n                        if (context) {\r\n                            distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\r\n                        }\r\n                    }\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            /**\r\n             * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n             */\r\n            function _addHistoryListener(win, history, locn) {\r\n                if (_historyListenerAdded) {\r\n                    return;\r\n                }\r\n                // Name Prefix is only referenced during the initial initialization and cannot be changed afterwards\r\n                var namePrefix = _extConfig.namePrefix || \"\";\r\n                function _popstateHandler() {\r\n                    if (_enableAutoRouteTracking) {\r\n                        _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                    }\r\n                }\r\n                function _locationChangeHandler() {\r\n                    // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\r\n                    if (_currUri) {\r\n                        _prevUri = _currUri;\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    else {\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    if (_enableAutoRouteTracking) {\r\n                        var distributedTraceCtx = _getDistributedTraceCtx();\r\n                        if (distributedTraceCtx) {\r\n                            distributedTraceCtx.setTraceId(generateW3CId());\r\n                            var traceLocationName = \"_unknown_\";\r\n                            if (locn && locn.pathname) {\r\n                                traceLocationName = locn.pathname + (locn.hash || \"\");\r\n                            }\r\n                            // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\r\n                            distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\r\n                        }\r\n                        scheduleTimeout((function (uri) {\r\n                            // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                        }).bind(_self, _prevUri), _self.autoRoutePVDelay);\r\n                    }\r\n                }\r\n                _addHook(InstrumentEvent(history, \"pushState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                _addHook(InstrumentEvent(history, \"replaceState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\r\n                eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\r\n                _historyListenerAdded = true;\r\n            }\r\n            function _addUnhandledPromiseRejectionTracking(_window, _location) {\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableUnhandledPromiseRejectionTracking = _extConfig[_DYN_ENABLE_UNHANDLED_PRO13 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\r\n                    _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[_DYN_AUTO_UNHANDLED_PROMI14 /* @min:%2eautoUnhandledPromiseInstrumented */];\r\n                    if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, error) {\r\n                                if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) { // handled could be typeof function\r\n                                    _self._onerror(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _errorHookCnt++;\r\n                        _extConfig[_DYN_AUTO_UNHANDLED_PROMI14 /* @min:%2eautoUnhandledPromiseInstrumented */] = _autoUnhandledPromiseInstrumented = true;\r\n                    }\r\n                }));\r\n            }\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity - The severity of the log message\r\n             * @param msgId - The log message.\r\n             */\r\n            function _throwInternal(severity, msgId, msg, properties, isUserAct) {\r\n                _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\r\n            }\r\n            function _initDefaults() {\r\n                _eventTracking = null;\r\n                _pageTracking = null;\r\n                _pageViewManager = null;\r\n                _pageViewPerformanceManager = null;\r\n                _pageVisitTimeManager = null;\r\n                _preInitTelemetryInitializers = null;\r\n                _isBrowserLinkTrackingEnabled = false;\r\n                _browserLinkInitializerAdded = false;\r\n                _enableAutoRouteTracking = false;\r\n                _historyListenerAdded = false;\r\n                _disableExceptionTracking = false;\r\n                _autoExceptionInstrumented = false;\r\n                _enableUnhandledPromiseRejectionTracking = false;\r\n                _autoUnhandledPromiseInstrumented = false;\r\n                _autoTrackPageVisitTime = false;\r\n                // Counts number of trackAjax invocations.\r\n                // By default we only monitor X ajax call per view to avoid too much load.\r\n                // Default value is set in config.\r\n                // This counter keeps increasing even after the limit is reached.\r\n                _trackAjaxAttempts = 0;\r\n                // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n                var location = getLocation(true);\r\n                _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                _currUri = null;\r\n                _evtNamespace = null;\r\n                _extConfig = null;\r\n                _errorHookCnt = 0;\r\n                // Define _self.config\r\n                objDefine(_self, \"config\", {\r\n                    g: function () { return _extConfig; }\r\n                });\r\n            }\r\n            // For backward compatibility\r\n            objDefine(_self, \"_pageViewManager\", { g: function () { return _pageViewManager; } });\r\n            objDefine(_self, \"_pageViewPerformanceManager\", { g: function () { return _pageViewPerformanceManager; } });\r\n            objDefine(_self, \"_pageVisitTimeManager\", { g: function () { return _pageVisitTimeManager; } });\r\n            objDefine(_self, \"_evtNamespace\", { g: function () { return \".\" + _evtNamespace; } });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AnalyticsPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param name - A string that identifies this event uniquely within the document.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param name - The string you used to identify this event in `startTrackEvent`.\r\n     * @param properties - map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param measurements - map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param trace - the trace message\r\n     * @param customProperties - Additional custom properties to include in the event\r\n     */\r\n    AnalyticsPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param metric - input object argument. Only name and average are mandatory.\r\n     * @param customProperties - additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView - Page view item to be sent\r\n     * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance - The page view performance item to be sent\r\n     * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance - The page view performance item to be sent\r\n     * @param customProperties - Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param name - The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param url - String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param properties - map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param measurements - map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception - The exception item to be sent\r\n    * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n    * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n    */\r\n    AnalyticsPlugin.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param exception - Object which contains exception to be sent\r\n     * @param customProperties - Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     */\r\n    AnalyticsPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param exception - The exception item to be sent\r\n     */\r\n    AnalyticsPlugin.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.Version = '3.3.6'; // Not currently used anywhere\r\n    return AnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { AnalyticsPlugin };\r\n//# sourceMappingURL=AnalyticsPlugin.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlCanUseSessionStorage, utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _warnToConsole, dateNow, dumpObj, getJSON, hasJSON, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { _DYN_TRACK_PREVIOUS_PAGE_1 } from \"../../__DynamicConstants\";\r\n/**\r\n * Used to track page visit durations\r\n */\r\nvar PageVisitTimeManager = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of PageVisitTimeManager\r\n     * @param pageVisitTimeTrackingHandler - Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n     * @returns {}\r\n     */\r\n    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {\r\n        var prevPageVisitDataKeyName = \"prevPageVisitData\";\r\n        dynamicProto(PageVisitTimeManager, this, function (_self) {\r\n            _self[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */] = function (currentPageName, currentPageUrl) {\r\n                try {\r\n                    // Restart timer for new page view\r\n                    var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);\r\n                    // If there was a page already being timed, track the visit time for it now.\r\n                    if (prevPageVisitTimeData) {\r\n                        pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Auto track page visit time failed, metric will not be collected: \" + dumpObj(e));\r\n                }\r\n            };\r\n            /**\r\n             * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n             * @param pageName - Name of page to begin timing visit duration\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.\r\n             */\r\n            function restartPageVisitTimer(pageName, pageUrl) {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    prevPageVisitData = stopPageVisitTimer();\r\n                    if (utlCanUseSessionStorage()) {\r\n                        if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {\r\n                            throwError(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                        }\r\n                        var currPageVisitDataStr = getJSON().stringify(new PageVisitData(pageName, pageUrl));\r\n                        utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Call to restart failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            /**\r\n             * Stops timing of current page, if exists.\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.\r\n             */\r\n            function stopPageVisitTimer() {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    if (utlCanUseSessionStorage()) {\r\n                        // Define end time of page's visit\r\n                        var pageVisitEndTime = dateNow();\r\n                        // Try to retrieve  page name and start time from session storage\r\n                        var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        if (pageVisitDataJsonStr && hasJSON()) {\r\n                            // if previous page data exists, set end time of visit\r\n                            prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);\r\n                            prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;\r\n                            // Remove data from storage since we already used it\r\n                            utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Stop page visit timer failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            // For backward compatibility\r\n            objDefine(_self, \"_logger\", { g: function () { return logger; } });\r\n            objDefine(_self, \"pageVisitTimeTrackingHandler\", { g: function () { return pageVisitTimeTrackingHandler; } });\r\n        });\r\n    }\r\n    /**\r\n    * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n    * @param currentPageName - Name of page to begin timing for visit duration\r\n    * @param currentPageUrl - Url of page to begin timing for visit duration\r\n    */\r\n    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageVisitTimeManager;\r\n}());\r\nexport { PageVisitTimeManager };\r\nvar PageVisitData = /** @class */ (function () {\r\n    function PageVisitData(pageName, pageUrl) {\r\n        this.pageVisitStartTime = dateNow();\r\n        this.pageName = pageName;\r\n        this.pageUrl = pageUrl;\r\n    }\r\n    return PageVisitData;\r\n}());\r\nexport { PageVisitData };\r\n//# sourceMappingURL=PageVisitTimeManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal } from \"@microsoft/applicationinsights-core-js\";\r\n/**\r\n * Used to record timed events and page views.\r\n */\r\nvar Timing = /** @class */ (function () {\r\n    function Timing(logger, name) {\r\n        var _self = this;\r\n        var _events = {};\r\n        _self.start = function (name) {\r\n            if (typeof _events[name] !== \"undefined\") {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 62 /* _eInternalMessageId.StartCalledMoreThanOnce */, \"start was called more than once for this event without calling stop.\", { name: name, key: name }, true);\r\n            }\r\n            _events[name] = +new Date;\r\n        };\r\n        _self.stop = function (name, url, properties, measurements) {\r\n            var start = _events[name];\r\n            if (isNaN(start)) {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 63 /* _eInternalMessageId.StopCalledWithoutStart */, \"stop was called without a corresponding start.\", { name: name, key: name }, true);\r\n            }\r\n            else {\r\n                var end = +new Date;\r\n                var duration = dateTimeUtilsDuration(start, end);\r\n                _self.action(name, url, duration, properties, measurements);\r\n            }\r\n            delete _events[name];\r\n            _events[name] = undefined;\r\n        };\r\n    }\r\n    return Timing;\r\n}());\r\nexport { Timing };\r\n//# sourceMappingURL=Timing.js.map"],"names":["strShimFunction","strShimObject","strShimUndefined","strShimPrototype","ObjClass","Object","ObjProto","_pureAssign","func1","func2","_pureRef","value","name","UNDEF_VALUE","undefined","NULL_VALUE","EMPTY","FUNCTION","OBJECT","PROTOTYPE","__PROTO__","UNDEFINED","CONSTRUCTOR","SYMBOL","POLYFILL_TAG","LENGTH","NAME","CALL","TO_STRING","StrCls","String","StrProto","MathCls","Math","ArrCls","Array","ArrProto","ArrSlice","safe","func","argArray","v","apply","this","e","safeGet","cb","defValue","result","_createIs","theType","_createObjIs","theName","objToString","call","isUndefined","isStrictUndefined","arg","isDefined","isNullOrUndefined","isStrictNullOrUndefined","isString","isFunction","isObject","isArray","isBoolean","isError","isTruthy","objGetOwnPropertyDescriptor","objHasOwnProperty","obj","prop","hasOwnProperty","objHasOwn","polyObjHasOwn","objForEachKey","theObject","callbackfn","thisArg","propMap","c","w","g","s","_createProp","desc","l","get","set","newValue","key","objDefineProp","objDefine","target","propDesc","_createKeyValueMap","values","keyType","valueType","completeFn","writable","theMap","_assignMapValue","enumerable","asString","ERROR_TYPE","dumpObj","object","format","propertyValueDump","objType","stack","message","JSON","stringify","replace","throwError","Error","throwTypeError","TypeError","_objFreeze","_doNothing","_getProto","objAssign","objKeys","objDeepFreeze","objFreeze","objGetPrototypeOf","createEnum","createEnumKeyMap","_globalCfg","_wellKnownSymbolMap","asyncIterator","hasInstance","isConcatSpreadable","iterator","match","matchAll","search","species","split","toPrimitive","toStringTag","unscopables","GLOBAL_CONFIG_KEY","_getGlobalValue","globalThis","self","window","global","_getGlobalConfig","gbl","_unwrapFunction","_unwrapFunctionWithPoly","funcName","clsProto","polyFunc","clsFn","theArgs","theFunc","arguments","mathMax","strSlice","strSubstring","strSubstr","polyStrSubstr","start","length","strLeft","count","_polySymbols","_wellKnownSymbolCache","_globalLazyTestHooks","UNIQUE_REGISTRY_ID","_globalSymbolRegistry","gblCfg","gblSym","k","polyNewSymbol","description","theSymbol","toString","polySymbolFor","newSymbol_1","regId_1","registry","polyGetKnownSymbol","knownName","_initTestHooks","getLazy","lazyValue","b","lzy","configurable","createCachedValue","toJSON","_cachedGlobal","WINDOW","_getGlobalInstFn","getFn","cachedValue","getGlobal","useCached","getInst","getDocument","hasWindow","getWindow","getNavigator","hasHistory","getHistory","_symbol","_symbolFor","_iterSymbol","isWebWorker","WorkerGlobalScope","_initSymbol","_getSymbolKey","getKnownSymbol","noPoly","sym","newSymbol","symbolFor","isIterator","next","isIterable","iterForOf","iter","err","iterResult","done","failed","throw","return","fnApply","fn","arrAppend","elms","push","elm","arrForEach","theArray","len","idx","_isProtoArray","arrIndexOf","arrMap","objCreate","polyObjCreate","type","tempFunc","objSetPrototypeOf","proto","d","_a","_createCustomError","__","_setName","baseClass","createCustomError","constructCb","errorBase","theBaseClass","orgName","captureFn","captureStackTrace","_this","orgProto","_self","utcNow","Date","now","polyUtcNow","getTime","_createTrimFn","exp","_fnToString","_objCtrFnString","_gblWindow","_perf","polyStrTrim","strTrim","mathFloor","isPlainObject","Function","ex","getPerformance","mathRound","strEndsWith","polyStrEndsWith","searchString","searchValue","end","strIndexOf","REF","UNREF","HAS_REF","ENABLED","_createTimerHandler","startTimer","refreshFn","cancelFn","theTimerHandler","ref","timerId","_unref","_cancel","_refresh","cancel","refresh","h","dn","_createTimeoutWith","overrideFn","isArr","setFn","setTimeout","clearFn","clearTimeout","timerFn","handler","scheduleTimeout","callback","timeout","strHasOwnProperty","__objAssignFnImpl","t","i","n","p","__assignFn","extendStaticsFn","__proto__","__extendsFn","constructor","Constructor","Prototype","strFunction","DynInstFuncTable","DynProxyTag","DynClassName","DynClassNamePrefix","DynInstChkTag","DynAllowInstChkTag","DynProtoDefaultOptions","UnknownValue","str__Proto","DynProtoBaseProto","DynProtoGlobalSettings","DynProtoCurrent","strUseBaseInst","strSetInstFuncs","Obj","_objGetPrototypeOf","_objGetOwnProps","_gbl","_gblInst","o","_isObjectOrArrayPrototype","_isObjectArrayOrFunctionPrototype","_getObjProto","curProto","newProto","_forEachProp","props","name_1","lp","_isDynamicCandidate","skipOwn","_throwTypeError","_getInstanceFuncs","thisTarget","instFuncs","_hasVisited","_getBaseFuncs","classProto","useBaseInst","_instFuncProxy","funcHost","instFuncTable","baseFuncs","baseProto","visited","_getInstFunc","currentDynProtoProxy","instFunc","canAddInst","objProto","protoFunc","_getProtoFunc","_populatePrototype","className","baseInstFuncs","setInstanceFunc","instFuncs_1","dynProtoProxy","_checkPrototype","thisProto","_getObjName","unknownValue","dynamicProto","theClass","delegateFunc","options","perfOptions","aggregationErrorType","createEnumStyle","_DYN_TO_LOWER_CASE","_DYN_LENGTH","_DYN_WARN_TO_CONSOLE","_DYN_THROW_INTERNAL","_DYN_WATCH","_DYN_APPLY","_DYN_PUSH","_DYN_SPLICE","_DYN_LOGGER","_DYN_CANCEL","_DYN_INITIALIZE","_DYN_IDENTIFIER","_DYN_IS_INITIALIZED","_DYN_GET_PLUGIN","_DYN_NAME","_DYN_PROCESS_NEXT","_DYN_GET_PROCESS_TEL_CONT2","_DYN_ENABLED","_DYN_UNLOAD","_DYN_LOGGING_LEVEL_CONSOL4","_DYN_CREATE_NEW","_DYN_TEARDOWN","_DYN_MESSAGE_ID","_DYN_MESSAGE","_DYN_DIAG_LOG","_DYN__DO_TEARDOWN","_DYN_UPDATE","_DYN_GET_NEXT","_DYN_SET_NEXT_PLUGIN","_DYN_USER_AGENT","_DYN_SPLIT","_DYN_REPLACE","_DYN_TYPE","_DYN_EVT_NAME","_DYN_IS_CHILD_EVT","_DYN_GET_CTX","_DYN_SET_CTX","_DYN_GET_ATTRIBUTE","throwAggregationError","sourceErrors","args","errors","theMessage","srcError","concat","UNDEFINED_VALUE","STR_EMPTY","STR_CORE","STR_DISABLED","STR_EXTENSION_CONFIG","STR_PROCESS_TELEMETRY","STR_PRIORITY","STR_GET_PERF_MGR","STR_DOMAIN","STR_PATH","STR_NOT_DYNAMIC_ERROR","strGetPrototypeOf","rCamelCase","rNormalizeInvalid","rLeadingNumeric","isNotNullOrUndefined","normalizeJsName","_all","letter","toUpperCase","strContains","toISOString","date","getExceptionName","setValue","field","valChk","srcChk","theValue","_createProxyFunction","source","srcFunc","src","originalArguments","proxyFunctionAs","overwriteTarget","strLocation","strConsole","strJSON","strCrypto","strMsCrypto","strMsie","strTrident","_isTrident","_navUserAgentCheck","_enableMocks","getLocation","checkForMock","mockLocation","location","getConsole","console","hasJSON","getJSON","getCrypto","getMsCrypto","isIE","nav","userAgent","UInt32Mask","MaxUInt32","SEED1","SEED2","_mwcSeeded","_mwcW","_mwcZ","_mwcSeed","seedValue","_autoSeedMwc","random","random32","signed","getRandomValues","Uint32Array","mwcRandom32","newId","maxLength","number","chars","base64chars","version","instanceName","_dataUid","_canAcceptData","nodeType","_getCache","data","theCache","id","createUniqueNamespace","includeVersion","createElmNodeData","accept","addDefault","kill","_isConfigDefaults","isVal","fb","_getDefault","dynamicHandler","theConfig","cfgDefaults","isDefaultValid","dfVal","fallbacks","fallback","fbValue","cfg","_resolveDefaultValue","newValue_1","_applyDefaultValue","defaultValue","isValid","mergeDf","reference","readOnly","rdOnly","blkDynamicValue","blkVal","mrg","usingDefault","cfgValue","dfName","dfValue","CFG_HANDLER_LINK","BLOCK_DYNAMIC","FORCE_DYNAMIC","_cfgDeepCopy","target_1","getDynamicConfigHandler","blockDynamicConversion","_canMakeDynamic","getFunc","state","throwInvalidAccess","arrayMethodsToPatch","_throwDynamicError","logger","_patchArray","method","orgMethod","_i","_makeDynamicObject","_getOwnPropGetter","_createDynamicProperty","detail","trk","clr","checkDynamic","isObjectOrArray","_getProperty","activeHandler","act","chng","add","ro","upd","newIsObjectOrArray","isReferenced","rf","_setDynamicProperty","hdlr","getter","valueState","_setDynamicPropertyState","flags","isDynamic","inPlace","blkProp","symPrefix","symPostfix","_createState","cfgHandler","theState","dynamicPropertySymbol","uid","dynamicPropertyReadOnly","dynamicPropertyReferenced","dynamicPropertyBlockValue","dynamicPropertyDetail","_waitingHandlers","_watcherTimer","_useHandler","prevWatcher","bind","setDf","_notifyWatchers","notifyHandlers","watcherFailures_1","notify","use","details","_createAndUseHandler","configHandler","rm","_createDynamicHandler","newTarget","defaultValues","watch","_block","allowUpdate","prevUpd","_logInvalidAccess","createDynamicConfig","config","defaultConfig","onConfigChange","_stringToBoolOrDefault","cfgDfMerge","cfgDfSet","setter","cfgDfValidate","validator","fallBackName","cfgDfBoolean","cfgDfString","_aiNamespace","_getExtensionNamespace","getDebugExt","ns","disableDbgExt","STR_WARN_TO_CONSOLE","AiNonUserActionablePrefix","AiUserActionablePrefix","AIInternalMessagePrefix","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","enableDebug","_logFuncs","_sanitizeDiagnosticText","text","_logToConsole","logFunc","theConsole","_InternalLogMessage","msgId","msg","isUserAct","properties","strProps","diagnosticText","dataType","safeGetLogger","core","DiagnosticLogger","_b","identifier","queue","_loggingLevelConsole","_loggingLevelTelemetry","_maxInternalMessageLimit","_enableDebug","_unloadHandler","_messageCount","_messageLogged","_logInternalMessage","severity","throttleLimitMessage","throttleMessage","logMessage","messageKey","_debugExtMsg","errorToConsole","dbgExt","consoleLoggingLevel","debugToConsole","resetInternalMessageCount","logInternalMessage","isAsync","_getLogger","_throwInternal","_warnToConsole","_doc","strToGMTString","strToUTCString","strCookie","strExpires","strIsCookieUseDisabled","strDisableCookiesUsage","strConfigCookieMgr","_supportsCookies","_allowUaSameSite","_parsedCookieValue","_cookieCache","_globalCookieConfig","rootDefaultConfig","cookieCfg","path","enabled","ignoreCookies","blockedCookies","cookieDomain","cookiePath","_getDoc","_gblCookieMgr","inst","createCookieMgr","_isMgrEnabled","cookieMgr","isEnabled","_isIgnoredCookie","cookieMgrCfg","_isBlockedCookie","_isCfgEnabled","rootConfig","cookieMgrConfig","cookieEnabled","isCfgEnabled","safeGetCookieMgr","getCookieMgr","_path","_domain","_enabled","_getCookieFn","_setCookieFn","_delCookieFn","unloadHandler","getCookie","_getCookieValue","setCookie","_setCookieValue","delCookie","areCookiesSupported","gblManager","setEnabled","maxAgeSec","domain","location_1","_extractParts","_isIE","expireMs","expiry","setTime","_formatDate","protocol","uaDisallowsSameSiteNone","_formatCookieValue","del","purge","unload","doc","exception","thePart","theDate","cookieValue","theCookie","strExecutionContextKey","strParentContextKey","strChildrenContextKey","PerfEvent","payloadDetails","theDetails_1","complete","childTime","childEvts","childEvt","time","exTime","ParentContextKey","ChildrenContextKey","doPerfActiveKey","doPerf","mgrSource","getSource","perfMgr","children","perfEvt","currentActive","create","fire","generateW3CId","tmp","hexValues","oct","a","clockSequenceHi","INVALID_TRACE_ID","INVALID_SPAN_ID","_isValid","invalidValue","isValidTraceId","isValidSpanId","findAllScripts","scripts","getElementsByTagName","script","crossOrigin","async","defer","hasAttribute","referrerPolicy","info","url","pluginStateData","_getPluginState","plugin","strTelemetryPluginChain","strHasRunFlags","strGetTelCtx","_chainId","_getNextProxyStart","proxy","startAt","createTelemetryProxyChain","_createInternalContext","telemetryChain","_nextProxy","_onComplete","context","_next","onComplete","nextProxy","completeDetails","ctx","diagLog","getCfg","getExtCfg","newConfig","_getExtCfg","getConfig","extConfig","hasNext","getNext","setNext","nextPlugin","iterate","that","createIfMissing","extCfg","idCfg","createProcessTelemetryContext","internalContext","env","plugins","createProcessTelemetryUnloadContext","unloadState","createProcessTelemetryUpdateContext","updateState","lastProxy_1","firstProxy","thePlugin","newProxy","createTelemetryPluginProxy","_setNext","hasProcessTelemetry","hasSetNext","chainId","proxyChain","getPlugin","processTelemetry","itemCtx","_processChain","pluginState","item","unloadCtx","pluginCore","hasRun","update","updateCtx","_id","processPluginFn","hasRunContext","nextId","error","hasNextRun","createUnloadHandlerContainer","handlers","run","createUnloadHookContainer","_hooks","oldHooks","remove","hooks","strGetPlugin","BaseTelemetryPlugin","_isinitialized","_rootCtx","_nextPlugin","_unloadHandlerContainer","_hookContainer","_getTelCtx","currentCtx","rootCtx","_setDefaults","pluginChain","_initDefaults","extensions","unloadDone","theUnloadCtx","theUnloadState","reason","_unloadCallback","updateDone","theUpdateCtx","_doUpdate","_updateCallback","setInitialized","isInitialized","strOnPrefix","strAttachEvent","strAddEventHelper","strDetachEvent","strRemoveEventListener","strEvents","rRemoveEmptyNs","rRemoveTrailingEmptyNs","_guid","elmNodeData","eventNamespace","_normalizeNamespace","_getEvtNamespace","eventName","evtNamespace","theNamespace_1","parsedEvent","exec","sort","join","_getRegisteredEvents","evtName","aiEvts","_doDetach","handlerRef","useCapture","_doAttach","_doUnregister","events","unRegFn","theEvent","capture","_unregisterEvents","eventCache","evtType","mergeEvtNamespace","theNamespace","namespaces","eventOn","registeredEvent","guid","eventOff","evtName_1","found_1","regEvent","aiInstrumentHooks","cbNames","_arrLoop","arr","_doCallbacks","callDetails","cbArgs","hookCtx","hook","cbks","orgEx","hookErrorCb","_createFunctionHook","aiHook","orgArgs","funcArgs","_createArgs","evt","f","rslt","_getOwner","checkPrototype","checkParentProto","owner","_createInstrumentHook","callbacks","theHook","newFunc","InstrumentEvent","strNotSpecified","strIkey","_DYN_TO_STRING","_DYN_REMOVE_ITEM","_DYN_COUNT","_DYN_STRINGIFY","_DYN_PATHNAME","_DYN_MATCH","_DYN_PROPERTIES","_DYN_MEASUREMENTS","_DYN_SIZE_IN_BYTES","_DYN_TYPE_NAME","_DYN_EXCEPTIONS","_DYN_SEVERITY_LEVEL","_DYN_PROBLEM_GROUP","_DYN_PARSED_STACK","_DYN_HAS_FULL_STACK","_DYN_ASSEMBLY","_DYN_FILE_NAME","_DYN_LINE","_DYN_AI_DATA_CONTRACT","_DYN_DURATION","dataSanitizeKeyAndAddUniqueness","map","origLength","dataSanitizeKey","uniqueField","dsPadNumber","nameTrunc","dataSanitizeString","valueTrunc","dataSanitizeUrl","dataSanitizeInput","dataSanitizeMessage","messageTrunc","dataSanitizeException","exceptionTrunc","dataSanitizeProperties","tempProps_1","dataSanitizeMeasurements","measurements","tempMeasurements_1","measure","dataSanitizeId","input","_msgId","inputTrunc","num","_document","_htmlAnchorIdx","_htmlAnchorElement","urlParseUrl","anchorIdx","anchorCache","tempAnchor","createElement","host","urlParseHost","href","inclPort","fullHost","urlParseFullHost","port","AjaxHelperParseDependencyPath","absoluteUrl","commandName","parsedUrl","pathName","pathname","dateTimeUtilsDuration","createDistributedTraceContextFromTrace","telemetryTrace","parentCtx","trace","getName","setName","getTraceId","traceID","setTraceId","getSpanId","parentID","setSpanId","getTraceFlags","traceFlags","setTraceFlags","newTraceFlags","StorageType","LocalStorage","SessionStorage","_canUseLocalStorage","_canUseSessionStorage","_storagePrefix","_getVerifiedStorageObject","storageType","storage","getGlobalInst","fail","setItem","getItem","_getSessionStorageObject","utlCanUseSessionStorage","utlDisableStorage","utlSetStoragePrefix","storagePrefix","utlEnableStorage","utlCanUseLocalStorage","reset","utlGetSessionStorage","utlSetSessionStorage","utlRemoveSessionStorage","Event","aiDataContract","ver","envelopeType","STACKFRAME_BASE_SIZE","IS_FRAME","FULL_STACK_FRAME_1","FULL_STACK_FRAME_2","FULL_STACK_FRAME_3","EXTRACT_FILENAME","PARSE_FILENAME_LINE_COL","PARSE_FILENAME_LINE_ONLY","NoMethod","strError","strStack","strStackDetails","strErrorSrc","strMessage","strDescription","_parseSequence","re","m","ln","col","chk","_ignoreNative","pre","_scrubAnonymous","hdl","_handleFilename","frame","_stringify","convertToString","_formatMessage","errorType","evtMessage","_isExceptionDetailsInternal","_isExceptionInternal","_isStackDetails","_convertStackObj","errorStack","items","_getOperaStack","errorMessage","lines","entry","_getStackFromErrorObj","errorObj","_formatStackTrace","stackDetails","_parseStack","frames","parsedStack","level_1","foundStackStart_1","totalSizeInBytes_1","_isStackFrame","theFrame","parsedFrame","_extractStackFrame","left","right","size","acceptedLeft","acceptedRight","splice","_getErrorType","typeName","results","_formatErrorCode","Exception","severityLevel","exceptions","isManual","_createExceptionDetails","CreateAutoException","lineNumber","columnNumber","errorSrc","CreateFromInterface","_createExDetailsFromInterface","__assign","prototype","toInterface","problemGroup","CreateSimpleException","assembly","fileName","line","formatError","exDetailsAiDataContract","outerId","hasFullStack","_toInterface","_parsedFrameToInterface","theStack","_stackFrameFromInterface","_parseFilename","lineCol","parseInt","lineNo","sequence","matches","filename","trimmedFrame","test","stackFrameAiDataContract","level","sizeInBytes","_populateFrameSizeInBytes","DataPoint","kind","min","max","stdDev","Metric","metrics","dataPoint","isNaN","strEmpty","msToTimeSpan","totalms","ms","sec","hour","days","isCrossOriginError","PageView","durationMs","duration","RemoteDependencyData","success","resultCode","requestAPI","correlationContext","dependencyKind","dependencySource","dependencyTypeName","dependencyFields","Trace","PageViewPerformance","unused","cs4BaseData","perfTotal","networkConnect","sentRequest","receivedResponse","domProcessing","createTelemetryItem","baseType","envelopeName","customProperties","systemProperties","iKey","telemetryItem","ext","tags","baseData","createDomEvent","event","createEvent","initEvent","PropertiesPluginIdentifier","AnalyticsPluginIdentifier","_DYN_IS_STORAGE_USE_DISAB0","_DYN__ADD_HOOK","_DYN_CORE","_DYN_DATA_TYPE","_DYN_ENVELOPE_TYPE","_DYN_TRACK","_DYN_TRACK_PAGE_VIEW","_DYN_TRACK_PREVIOUS_PAGE_1","_DYN_SEND_PAGE_VIEW_INTER2","_DYN_START_TIME","_DYN_SEND_PAGE_VIEW_PERFO3","_DYN_POPULATE_PAGE_VIEW_P4","_DYN_HREF","_DYN_SEND_EXCEPTION_INTER5","_DYN_ERROR","_DYN_LINE_NUMBER","_DYN_COLUMN_NUMBER","_DYN__CREATE_AUTO_EXCEPTI6","_DYN_ADD_TELEMETRY_INITIA7","_DYN_OVERRIDE_PAGE_VIEW_D8","_DYN_AUTO_EXCEPTION_INSTR9","_DYN_AUTO_TRACK_PAGE_VISI10","_DYN_IS_BROWSER_LINK_TRAC11","_DYN_ENABLE_AUTO_ROUTE_TR12","_DYN_ENABLE_UNHANDLED_PRO13","_DYN_AUTO_UNHANDLED_PROMI14","_DYN_GET_ENTRIES_BY_TYPE","_DYN_IS_PERFORMANCE_TIMIN15","_DYN_GET_PERFORMANCE_TIMI16","_DYN_NAVIGATION_START","_DYN_SHOULD_COLLECT_DURAT17","_DYN_IS_PERFORMANCE_TIMIN18","_DYN_RESPONSE_START","_DYN_REQUEST_START","_DYN_LOAD_EVENT_END","_DYN_RESPONSE_END","_DYN_CONNECT_END","PageViewManager","appInsights","overridePageViewDuration","pageViewPerformanceManager","_logger","queueTimer","itemQueue","pageViewPerformanceSent","firstPageViewSent","_flushChannels","flush","_addQueue","_startTimer","allItems","slice","doFlush","pageView","loadEventStart","duration_1","uri","title","navigationEntries","perf","timeOrigin","customDuration","pageViewSent","pageViewPerformance","processed","teardown","MAX_DURATION_ALLOWED","botAgentNames","_isPerformanceTimingSupported","timing","_isPerformanceNavigationTimingSupported","getEntriesByType","_isPerformanceTimingDataReady","domainLookupStart","domLoading","_getPerformanceTiming","_getPerformanceNavigationTiming","_shouldCollectDuration","durations","isGoogleBot","toLowerCase","PageViewPerformanceManager","navigationTiming","total","network","request","response","dom","requestStart","responseEnd","PageVisitTimeManager","pageVisitTimeTrackingHandler","prevPageVisitDataKeyName","restartPageVisitTimer","pageName","pageUrl","prevPageVisitData","currPageVisitDataStr","stopPageVisitTimer","PageVisitData","pageVisitEndTime","pageVisitDataJsonStr","dateNow","parse","pageVisitTime","pageVisitStartTime","currentPageName","currentPageUrl","prevPageVisitTimeData","Timing","_events","stop","action","strEvent","_dispatchEvent","evnt","dispatchEvent","_getReason","MinMilliSeconds","sessionRenewalMs","_chkConfigMilliseconds","sessionExpirationMs","disableExceptionTracking","samplingPercentage","_chkSampling","namePrefix","disableFlushOnBeforeUnload","disableFlushOnUnload","expCfg","inclScripts","expLog","maxLogs","_updateStorageUsage","AnalyticsPlugin","_super","_eventTracking","_pageTracking","_pageViewManager","_pageViewPerformanceManager","_pageVisitTimeManager","_preInitTelemetryInitializers","_isBrowserLinkTrackingEnabled","_browserLinkInitializerAdded","_enableAutoRouteTracking","_historyListenerAdded","_disableExceptionTracking","_autoExceptionInstrumented","_enableUnhandledPromiseRejectionTracking","_autoUnhandledPromiseInstrumented","_extConfig","_autoTrackPageVisitTime","_expCfg","_prevUri","_currUri","_evtNamespace","_errorHookCnt","priority","autoRoutePVDelay","_base","_addHook","throwInternal","processNext","trackEvent","EventTelemetry","startTrackEvent","stopTrackEvent","trackTrace","trackMetric","metric","inPv","refUri","referrer","trackPageViewPerformance","inPvp","startTrackPage","stopTrackPage","measurement","loc","theError","exceptionPartB","scriptsInfo","logs","trackException","_onerror","_window","URL","errorString","telemetryInitializer","initialize","_location","initializer","browserLinkPaths_1","envelope","remoteData","average","sampleCount","PageName","PageUrl","locn","rsp","win","history","_history","pushState","replaceState","strUndefined","distributedTraceCtx","getTraceCtx","traceLocationName","hash","_doTeardown","__extends","Version"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50]}